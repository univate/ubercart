<?php
// $Id$

/**
 * @file
 * A Viaklix payment gateway.
 *
 * Development by ESA Technologies. http://www.esatech.com
 */

/*******************************************************************************
 * Hook Functions (Ubercart)
 ******************************************************************************/

function uc_viaklix_payment_gateway() {
  $gateways[] = array(
    'id' => 'viaklix',
    'title' => t('Viaklix'),
    'description' => t('Process credit card payments using Viaklix.'),
    'settings' => 'uc_viaklix_settings_form',
    'credit' => 'uc_viaklix_charge',
  );

  return $gateways;
}


/*******************************************************************************
 * Callback Functions, Forms, and Tables
 ******************************************************************************/

/**
 * Callback for payment gateway settings.
 */
function uc_viaklix_settings_form() {
  $form['viaklix_settings'] = array(
    '#type' => 'fieldset',
    '#title' => t('Settings'),
  );
  $form['viaklix_settings']['viaklix_merchant_id'] = array(
    '#type' => 'textfield',
    '#title' => t('Merchant ID'),
    '#default_value' => variable_get('viaklix_merchant_id', ''),
    '#description' => t('The merchant id used for the Viaklix service.')
  );
  $form['viaklix_settings']['viaklix_user_id'] = array(
    '#type' => 'textfield',
    '#title' => t('User ID'),
    '#default_value' => variable_get('viaklix_user_id', ''),
    '#description' => t('Your user ID for the Viaklix service.')
  );
  $form['viaklix_settings']['viaklix_pin'] = array(
    '#type' => 'textfield',
    '#title' => t('Pin'),
    '#default_value' => variable_get('viaklix_pin', ''),
    '#description' => t('Your pin for the Viaklix service.')
  );
  $form['viaklix_settings']['viaklix_transaction_mode'] = array(
    '#type' => 'select',
    '#title' => t('Transaction mode'),
    '#description' => t('Transaction mode used for processing orders.'),
    '#options' => array(
      'production' => t('Production'),
      'test' => t('Test'),
    ),
    '#default_value' => variable_get('viaklix_transaction_mode', 'test')
  );
  $form['viaklix_settings']['viaklix_fake_cc_number'] = array(
    '#type' => 'textfield',
    '#title' => t('Fake credit card number'),
    '#default_value' => variable_get('viaklix_fake_cc_number', ''),
    '#description' => t('Fake credit card number for testing the Viaklix service.')
  );

  return $form;
}

function uc_viaklix_charge($order_id, $amount, $data) {
  if (!function_exists('curl_init')) {
    drupal_set_message(t('The Viaklix service requires curl.  Please talk to your system administrator to get this configured.'));
    return array('success' => FALSE);
  }

  global $user, $response;
  $order = uc_order_load($order_id);

  $description = '';
  if (is_array($order->products)) {
    foreach ($order->products as $product) {
      if (!empty($description)) {
        $description .= ' / ';
      }
      $description .= $product->title .' x'. $product->qty;
      foreach ($product->data['attributes'] as $key => $value) {
        $description .= ', '. $key .': '. $value;
      }
    }
  }
  $description = substr($description, 0, 255);

  $submit_data = array(
    'ssl_merchant_id' => variable_get('viaklix_merchant_id', ''),
	'ssl_user_id' => variable_get('viaklix_user_id', ''),
	'ssl_pin' => variable_get('viaklix_pin', ''),
    'ssl_amount' => $amount,
    'ssl_card_number' => $order->payment_details['cc_number'],
    'ssl_exp_date' => $order->payment_details['cc_exp_month'] . substr($order->payment_details['cc_exp_year'], 2),
    'ssl_customer_code' => $order->uid,
    'ssl_invoice_number' => $order_id,
    'ssl_company' => $order->billing_company,
    'ssl_first_name' => $order->billing_first_name,
    'ssl_last_name' => $order->billing_last_name,
    'ssl_avs_address' => $order->billing_street1,
    'ssl_city' => $order->billing_city,
    'ssl_state' => $order->billing_zone,
    'ssl_avs_zip' => $order->billing_postal_code,
    'ssl_country' => $order->billing_country,
    'ssl_phone' => $order->billing_phone,
    'ssl_email' => $order->primary_email,
    'ssl_show_form' => 'false',
    'ssl_ship_to_company' => $order->delivery_company,
    'ssl_ship_to_first_name' => $order->delivery_first_name,
    'ssl_ship_to_first_name' => $order->delivery_first_name,
    'ssl_ship_to_last_name' => $order->delivery_last_name,
    'ssl_ship_to_address' => $order->delivery_street1,
    'ssl_ship_to_city' => $order->delivery_city,
    'ssl_ship_to_state' => $order->delivery_zone,
    'ssl_ship_to_zip' => $order->delivery_postal_code,
    'ssl_ship_to_country' => $order->delivery_country,
    'ssl_description' => $description,
    'ssl_result_format' => 'ASCII',
    'ssl_receipt_link_method' => 'GET',
    'ssl_receipt_link_url' => $_SERVER['PHP_SELF']
  );

  if (variable_get('viaklix_transaction_mode', 'test') == 'test') {
    $submit_data['ssl_test_mode'] = 'true';
    $submit_data['ssl_card_number'] = variable_get('viaklix_fake_cc_number', '');
    
    // Use the current month and year when in test mode.
    $submit_data['ssl_exp_date'] = date("m") . substr(date("Y"), 2);

    // When testing, amount must be < $50.00
    $submit_data['ssl_amount'] = '49.99';
  }
  else {
      $submit_data['ssl_cvv2'] = 'present';
      $submit_data['ssl_cvv2cvc2'] = $order->payment_details['cc_cvv'];
  }

  $url = 'https://www.viaklix.com/process.asp';

  while (list($key, $value) = each($submit_data)) {
	  $data .= $key .'='. urlencode(ereg_replace(',', '', $value)) .'&';
  }

  $data = substr($data, 0, -1);

  $ch = curl_init();
  curl_setopt($ch, CURLOPT_URL, $url);
  curl_setopt($ch, CURLOPT_VERBOSE, 0);
  curl_setopt($ch, CURLOPT_POST, 1);
  curl_setopt($ch, CURLOPT_POSTFIELDS, $data);
  curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
  $authorize = curl_exec($ch);
  curl_close($ch);

  $authorize = trim($authorize);
  $authorize = str_replace("\r", "", $authorize);
  $authorize = str_replace("\n", "&", $authorize);

  // Put the results into an associative array.
  parse_str($authorize, $response);

  $ssl_result = $response['ssl_result'];
  $ssl_txn_id = $response['ssl_txn_id'];
  $ssl_approval_text = uc_viaklix_get_response_text($response['ssl_avs_response']);
  $ssl_approval_code = $response['ssl_approval_code'];

  if ($ssl_result != '0') {
	  $message = t('Credit card declined: !amount', array('!amount' => uc_currency_format($amount)));
    $result = array(
      'success' => FALSE,
      'comment' => t('Credit card payment declined.'),
      'message' => t('Credit card payment declined.'),
      'data' => t('Approval code: !code; Approval text: !text; Transaction ID: !txn_id', array('!code' => $ssl_approval_code, '!text' => $ssl_approval_text, '!txn_id' => $ssl_txn_id)),
      'uid' => $user->uid,
    );
  }
  else {
    $message = t('Credit card charged: !amount', array('!amount' => uc_currency_format($amount)));
    $result = array(
      'success' => TRUE,
      'comment' => t('Credit card payment processed successfully.'),
      'message' => t('Credit card payment processed successfully.'),
      'data' => t('Approval code: !code; Approval text: !text; Transaction ID: !txn_id', array('!code' => $ssl_approval_code, '!text' => $ssl_approval_text, '!txn_id' => $ssl_txn_id)),
      'uid' => $user->uid,
    );
  }
  uc_order_comment_save($order_id, $user->uid, $message, 'admin');

  return $result;
}

function uc_viaklix_get_response_text($code) {
  $codes = array (
    'A' => 'Address matches - Zip Code does not match.',
    'B' => 'Street address match, Postal code in wrong format. (International issuer)',
    'C' => 'Street address and postal code in wrong formats',
    'D' => 'Street address and postal code match (international issuer)',
    'E' => 'AVS Error',
    'G' => 'Service not supported by non-US issuer',
    'I' => 'Address information not verified by international issuer.',
    'M' => 'Street Address and Postal code match (international issuer)',
    'N' => 'No Match on Address (Street) or Zip',
    'O' => 'No Response sent',
    'P' => 'Postal codes match, Street address not verified due to incompatible formats.',
    'R' => 'Retry, System unavailable or Timed out',
    'S' => 'Service not supported by issuer',
    'U' => 'Address information is unavailable',
    'W' => '9 digit Zip matches, Address (Street) does not match.',
    'X' => 'Exact AVS Match',
    'Y' => 'Address (Street) and 5 digit Zip match.',
    'Z' => '5 digit Zip matches, Address (Street) does not match.'
  );
  
  return $codes[$code]; 
}
