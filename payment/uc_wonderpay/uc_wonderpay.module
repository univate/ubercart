<?php
// $Id$

/**
 * @file
 * A module used for WonderPay's Preview Mode of redirected payment processing.
 *
 * WonderPay offers a service that lets customers checkout on their secure
 * server and can return completed order details to your website.  This module
 * interfaces with that by using a checkout pane to redirect the browser to an
 * intermediate checkout page the displays the cart contents and creates the
 * form to submit to WonderPay's service.  Returned information is captured and
 * turned into a new order, and at the same time it empties out the contents of
 * the specified cart so customers can come back to your site just like they
 * had checked out on your page.
 *
 * As of right now, this module is not meant to be used in conjunction with any
 * other payment method, since it bypasses the Ubercart checkout altogether.
 *
 * Note that WonderPay offers an e-mail receipt service that you can turn off
 * through your account.  You may want to do this so you can leverage Ubercart's
 * invoice e-mailing system instead.
 *
 * Questions/comments directed to Ryan from Ubercart.org.
 */

/*******************************************************************************
 * Hook Functions (Drupal)
 ******************************************************************************/

/**
 * Implementation of hook_menu().
 */
function uc_wonderpay_menu($may_cache) {
  if ($may_cache) {
    $items[] = array(
      'path' => 'cart/checkout/wp',
      'title' => t('Proceed to checkout'),
      'callback' => 'uc_wonderpay_checkout_page',
      'access' => user_access('access content'),
      'type' => MENU_CALLBACK,
    );
    $items[] = array(
      'path' => 'wp_preview/complete',
      'title' => t('Payment complete'),
      'callback' => 'uc_wonderpay_complete',
      'access' => user_access('access content'),
      'type' => MENU_CALLBACK,
    );
  }

  return $items;
}


/*******************************************************************************
 * Hook Functions (Ubercart)
 ******************************************************************************/

/**
 * Implementation of hook_checkout_pane().
 */
function uc_wonderpay_checkout_pane() {
  $panes[] = array(
    'id' => 'wp_preview',
    'callback' => 'uc_checkout_pane_wonderpay_preview',
    'title' => t('WonderPay redirect'),
    'desc' => t("Redirect to a page that submits to WonderPay's preview mode checkout."),
    'weight' => -10,
  );

  return $panes;
}

/**
 * Implementation of hook_payment_method().
 */
function uc_wonderpay_payment_method() {
  $path = base_path() . drupal_get_path('module', 'uc_credit');
  $title = variable_get('wonderpay_preview_method_title', t('Credit card on a secure server:'));
  $cc_types = array('visa', 'mastercard', 'discover', 'amex');
  foreach ($cc_types as $type) {
    if (in_array($type, variable_get('wonderpay_preview_icons', array('visa', 'mastercard', 'discover', 'amex')))) {
      $title .= ' <img src="'. $path .'/images/'. $type .'.gif" style="position: relative; top: 5px;">';
    }
  }
  $methods[] = array(
    'id' => 'wp_preview',
    'name' => t('WonderPay Preview'),
    'title' => $title,
    'review' => t('Credit card'),
    'desc' => t('Redirect to WonderPay to pay by credit card.'),
    'callback' => 'uc_payment_method_wonderpay_preview',
    'weight' => 3,
    'checkout' => FALSE,
    'backend' => FALSE,
  );

  return $methods;
}


/*******************************************************************************
 * Callback Functions, Forms, and Tables
 ******************************************************************************/

/**
 * Callback for the checkout pane used to redirect to the custom review page.
 */
function uc_checkout_pane_wonderpay_preview($op) {
  switch ($op) {
    case 'view':
      drupal_goto('cart/checkout/wp');
  }
}

/**
 * Callback for WonderPay payment method settings.
 */
function uc_payment_method_wonderpay_preview($op, &$arg1) {
  switch ($op) {
    case 'settings':
      $form['uc_wonderpay_preview_hijack_cart'] = array(
        '#type' => 'checkbox',
        '#title' => t('Allow WonderPay to alter the checkout form to submit to its checkout page.'),
        '#default_value' => variable_get('uc_wonderpay_preview_hijack_cart', TRUE),
      );
      $form['wonderpay_preview_acctid'] = array(
        '#type' => 'textfield',
        '#title' => t('Account ID'),
        '#default_value' => variable_get('wonderpay_preview_acctid', 'TEST0'),
        '#description' => t('Your five character alphanumeric account ID.'),
        '#maxlength' => 5,
        '#size' => 10,
      );
      $form['wonderpay_preview_subid'] = array(
        '#type' => 'textfield',
        '#title' => t('Sub ID'),
        '#default_value' => variable_get('wonderpay_preview_subid', ''),
        '#description' => t('The merchant sub ID for this site.'),
        '#size' => 10,
      );
      $form['wonderpay_preview_getshippinginfo'] = array(
        '#type' => 'checkbox',
        '#title' => t('Collect shipping info separately from billing info on the payment form.'),
        '#default_value' => variable_get('wonderpay_preview_getshippinginfo', FALSE),
      );
      $form['wonderpay_preview_checkout_button'] = array(
        '#type' => 'textfield',
        '#title' => t('Submit order button text'),
        '#description' => t('This will be used for the submit button on the Review Order page.'),
        '#default_value' => variable_get('wonderpay_preview_checkout_button', t('Proceed to checkout')),
      );
      $form['wonderpay_preview_denied_page'] = array(
        '#type' => 'textfield',
        '#title' => t('Payment declined link'),
        '#description' => t('Where the link from the declined page should go.'),
        '#default_value' => variable_get('wonderpay_preview_denied_page', ''),
        '#field_prefix' => url(NULL, NULL, NULL, TRUE) . (variable_get('clean_url', 0) ? '' : '?q='),
        '#size' => 16,
      );
      $form['html_settings'] = array(
        '#type' => 'fieldset',
        '#title' => t('Preview page HTML settings'),
        '#collapsible' => TRUE,
        '#collapsed' => TRUE,
      );
      $title = variable_get('uc_store_name', t('Secure')) .' '. t('Payment Form');
      $form['html_settings']['wonderpay_preview_title'] = array(
        '#type' => 'textfield',
        '#title' => t('Page title'),
        '#description' => t('Title of the preview page shown in the browser window.'),
        '#default_value' => variable_get('wonderpay_preview_title', $title),
      );
      $form['html_settings']['wonderpay_preview_body'] = array(
        '#type' => 'textfield',
        '#title' => t('Body tag attributes'),
        '#description' => t('Attributes to go into the preview page body tag. Example: bgcolor="#FFFFCC"'),
        '#default_value' => variable_get('wonderpay_preview_body', 'bgcolor="#FFFFCC"'),
      );
      $form['html_settings']['wonderpay_preview_header'] = array(
        '#type' => 'textarea',
        '#title' => t('Header HTML'),
        '#description' => t('HTML text to put in the header section of the page body.'),
        '#default_value' => variable_get('wonderpay_preview_header', '<h2>'. $title .'</h2>'),
      );
      $form['html_settings']['wonderpay_preview_footer'] = array(
        '#type' => 'textarea',
        '#title' => t('Footer HTML'),
        '#description' => t('HTML text to put in the footer section of the page body.'),
        '#default_value' => variable_get('wonderpay_preview_footer', ''),
      );
      return $form;
  }
}

/**
 * Form with appropriate hidden values to pay for an order at WonderPay.
 */
function uc_wonderpay_preview_form() {
  // This form submits directly to WonderPay's processing script.
  $form['#action'] = 'https://trans.atsbank.com/cgi-bin/process.cgi';

  // The following hidden fields are for various settings on the payment page.
  $form['action'] = array('#type' => 'hidden', '#value' => 'preview');
  $form['acctid'] = array('#type' => 'hidden', '#value' => variable_get('wonderpay_preview_acctid', 'TEST0'));
  $form['subid'] = array('#type' => 'hidden', '#value' => variable_get('wonderpay_preview_subid', ''));
  $form['itemtax'] = array('#type' => 'hidden', '#value' => '0');
  $form['getshippinginfo'] = array('#type' => 'hidden', '#value' => variable_get('wonderpay_preview_getshippinginfo', FALSE) ? '1' : '0');
  $form['accepturl'] = array('#type' => 'hidden', '#value' => url('wp_preview/complete/'. uc_cart_get_id(), NULL, NULL, TRUE));
  $form['declineurl'] = array('#type' => 'hidden', '#value' => url('wp_preview/complete/'. uc_cart_get_id(), NULL, NULL, TRUE));
  $form['title'] = array('#type' => 'hidden', '#value' => variable_get('wonderpay_preview_title', ''));
  $form['body'] = array('#type' => 'hidden', '#value' => variable_get('wonderpay_preview_body', ''));
  $form['header'] = array('#type' => 'hidden', '#value' => variable_get('wonderpay_preview_header', ''));
  $form['footer'] = array('#type' => 'hidden', '#value' => variable_get('wonderpay_preview_footer', ''));
  $form['usepost'] = array('#type' => 'hidden', '#value' => 1);

  // The following hidden fields add the products on the order to the form.
  $i = 0;
  $items = uc_cart_get_contents();
  foreach ($items as $item) {
    $desc = $item->title;
    if (is_array($item->options)) {
      foreach($item->options as $option){
        $desc .= ', '. $option['attribute'] .': '. $option['name'];
      }
    }
    if (strpos('.', strval($item->price)) === FALSE) {
      $item->price = $item->price .'.00';
    }
    $products .= '<input type="hidden" name="itemid" value="'. check_plain($item->model) .'">'."\n";
    $products .= '<input type="hidden" name="itemname" value="'. check_plain($item->title) .'">'."\n";
    $products .= '<input type="hidden" name="itemdesc" value="'. $desc .'">'."\n";
    $products .= '<input type="hidden" name="itemprice" value="'. $item->price .'">'."\n";
    $products .= '<input type="hidden" name="itemweight" value="'. $item->weight .'">'."\n";
    $products .= '<input type="hidden" name="itemquant" value="'. $item->qty .'">'."\n";
    $i++;
  }
  $form['products'] = array('#value' => $products);

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => variable_get('wonderpay_preview_checkout_button', t('Proceed to checkout')),
  );

  return $form;
}

/**
 * Display the completed order page.
 */
function uc_wonderpay_complete($cart_id = 0) {
  if ($cart_id === 0) {
    drupal_goto('<front>');
  }

  $items = uc_cart_get_contents($cart_id);
  if (count($items) == 0) {
    print t('Your request cannot be completed.') .'<p>'
        . l(t('Click here to return to !site.', array('!site' => variable_get('uc_store_name', t('the front page')))), '<front>', array(), NULL, NULL, TRUE);
    exit();
  }

  if ($_POST['Status'] == 'Accepted') {
    // Create and save the new order based on returned information.
    $order = uc_order_new();
    $order->primary_email = check_plain($_POST['email']);
    $order->billing_first_name = check_plain($_POST['fname']);
    $order->billing_last_name = check_plain($_POST['lname']);
    $order->billing_phone = check_plain($_POST['phone']);
    $order->billing_street1 = check_plain($_POST['addr1']);
    $order->billing_street2 = check_plain($_POST['addr2']);
    $order->billing_city = check_plain($_POST['city']);
    $order->billing_zone = db_result(db_query("SELECT zone_id FROM {uc_zones} WHERE zone_code = '%s'", check_plain($_POST['state'])));
    $country = db_result(db_query("SELECT country_id FROM {uc_countries} WHERE country_name LIKE '%s' OR country_iso_code_2 LIKE '%s' OR country_iso_code_3 LIKE '%s'",
                         check_plain($_POST['country']), check_plain($_POST['country']), check_plain($_POST['country'])));
    $order->billing_postal_code = check_plain($_POST['zip']);
    $order->billing_country = empty($country) ? 840 : $country;

    if (empty($_POST['shipname']) || empty($_POST['shipaddr1']) ||
        empty($_POST['shipcity']) || empty($_POST['shipstate']) ||
        empty($_POST['shipzip'])) {
      $order->delivery_first_name = $order->billing_first_name;
      $order->delivery_last_name = $order->billing_last_name;
      $order->delivery_phone = '';
      $order->delivery_street1 = $order->billing_street1;
      $order->delivery_street2 = $order->billing_street2;
      $order->delivery_city = $order->billing_city;
      $order->delivery_zone = $order->billing_zone;
      $order->delivery_postal_code = $order->billing_postal_code;
      $order->delivery_country = $order->billing_country;
    }
    else {
      $name = check_plain($_POST['shipname']);
      if (($pos = strpos($name, ' ')) === FALSE) {
        $order->delivery_first_name = $name;
        $order->delivery_last_name = '';
      }
      else {
        $order->delivery_first_name = substr($name, 0, $pos + 1);
        $order->delivery_last_name = substr($name, $pos + 1);
      }
      $order->delivery_phone = '';
      $order->delivery_street1 = check_plain($_POST['shipaddr1']);
      $order->delivery_street2 = check_plain($_POST['shipaddr2']);
      $order->delivery_city = check_plain($_POST['shipcity']);
      $order->delivery_zone = db_result(db_query("SELECT zone_id FROM {uc_zones} WHERE zone_code = '%s'", check_plain($_POST['shipstate'])));
      $country = db_result(db_query("SELECT country_id FROM {uc_countries} WHERE country_name LIKE '%s' OR country_iso_code_2 LIKE '%s' OR country_iso_code_3 LIKE '%s'",
                           check_plain($_POST['shipcountry']), check_plain($_POST['shipcountry']), check_plain($_POST['shipcountry'])));
      $order->delivery_postal_code = check_plain($_POST['shipzip']);
      $order->delivery_country = empty($country) ? 840 : $country;
    }

    $order->payment_method = 'wp_preview';
    $order->products = $items;

    uc_order_save($order);

    if ($_POST['TaxAmount'] > 0) {
      uc_order_line_item_add($order->order_id, 'generic', t('Tax'), $_POST['TaxAmount'], 1);
    }
    if ($_POST['ShippingAmount'] > 0) {
      uc_order_line_item_add($order->order_id, 'generic', t('Shipping'), $_POST['ShippingAmount'], 2);
    }

    // Log the payment to the order.
    switch ($_POST['paymethod']) {
      case 'visa':
        $type = t('VISA');
        break;
      case 'mc':
        $type = t('MasterCard');
        break;
      case 'amex':
        $type = t('American Express');
        break;
      case 'disc':
        $type = t('Discover Network');
        break;
      case 'pchk':
        $type = t('Electronic Check');
        $details = t('No information');
    }
    if (empty($details)) {
      $details = check_plain($_POST['ccname']) .', '. t('Exp.')
               . check_plain($_POST['expmon']) .'/'. check_plain($_POST['expyear']);
    }
    $comment = t('Paid by: !type (!details)', array('!type' => $type, '!details' => $details));
    uc_payment_enter($order->order_id, 'wp_preview', $_POST['TotalAmount'], 0, NULL, $comment);

    uc_order_comment_save($order->order_id, 0, check_plain($_POST['comments']), 'order', 1, TRUE);

    $message = uc_cart_complete_sale($order);

    // Add a comment to let sales team know this came in through the site.
    uc_order_comment_save($order->order_id, 0, t('Order completed through WonderPay.'), 'admin');
    $payinfo = t('WonderPay OrderID: !orderid', array('!orderid' => check_plain($_POST['OrderID']))) .'<br />'
             . t('Authorization: !authno', array('!authno' => check_plain($_POST['AuthNo'])));
    uc_order_comment_save($order->order_id, 0, $payinfo, 'admin');

    uc_cart_empty($cart_id);
  }
  else {
    $message = t('Sorry, your payment could not be processed.') .'<p>'
             . t('The reason given was:<p>!reason', array('!reason' => check_plain($_POST['Reason']))) .'<p>'
             . t("Please use your browser's back button to correct any problems in your billing or payment information and try again.") .'<p>'
             . t('If the problem persists, you may !link to return to our website and get assistance.', array('!link' => l(t('click here'), variable_get('wonderpay_preview_denied_page', ''), array(), NULL, NULL, TRUE)));
  }

  $title = variable_get('wonderpay_preview_title', variable_get('uc_store_name', t('Secure')) .' '. t('Payment Complete'));

  $output = '
<html>
<head>
<title>'. $title .'</title>
</head>
<body '. variable_get('wonderpay_preview_body', 'bgcolor="#FFFFCC"') .'>
<h2>'. $title .'</h2>
<p>
'. $message .'
</p>
</body>
</html>';

  print $output;
  exit();
}

/**
 * User redirected here after proceeding to checkout so they can submit the form
 * that leads to WonderPay.
 */
function uc_wonderpay_checkout_page() {
  $items = uc_cart_get_contents();
  if (count($items) == 0) {
    drupal_goto('cart');
  }

  drupal_add_css(drupal_get_path('module', 'uc_cart') .'/uc_cart.css');
  $output = '<div style="border: solid 1px #bbb;">'. theme('cart_review_table') .'</div>';
  $output .= '<p>'. t("You have selected the items above for purchase.  To complete the order form and submit payment over our secure server, click the button below.  Otherwise, use your browser's back button to adjust your cart contents.") .'</p>';
  $output .= drupal_get_form('uc_wonderpay_preview_form');

  return $output;
}
