<?php
// $Id: uc_ups.module,v 1.2 2007-10-02 17:43:43 rszrama Exp $

/**
 * @file
 * Shipping quote module that interfaces with www.ups.com to get rates for small package shipments.
 */

/******************************************************************************
 * Drupal Hooks                                                               *
 ******************************************************************************/

/**
 * Implementation of hook_menu().
 */
function uc_ups_menu($may_cache){
  $items = array();
  
  if ($may_cache){
    $items[] = array('path' => 'admin/store/settings/quotes/methods/ups',
      'access' => user_access('configure quotes'),
      'title' => t('UPS'),
      'callback' => 'drupal_get_form',
      'callback arguments' => 'uc_ups_admin_settings',
      'type' => MENU_LOCAL_TASK,
    );
  }
  else{
    drupal_add_css(drupal_get_path('module', 'uc_ups') .'/uc_ups.css');
  }
  
  return $items;
}

/**
 * Implementation of hook_form_alter().
 *
 * Adds package type and physical dimensions to products.
 */
function uc_ups_form_alter($form_id, &$form){
  $node = $form['#node'];
  $product_types = uc_product_node_info();
  if (is_object($node) && $form_id == $node->type .'_node_form' && isset($product_types[$node->type])){
    $enabled = variable_get('uc_quote_enabled', array('ups' => true));
    $ups = array('#type' => 'fieldset',
      '#title' => t('UPS Product Description'),
      '#collapsible' => true,
      '#collapsed' => ($enabled['ups'] == false || uc_product_get_shipping_type($node) != 'small_package'),
      '#weight' => 2,
      '#tree' => true,
    );
    $ups['pkg_type'] = array('#type' => 'select',
      '#title' => t('Package Type'),
      '#options' => _uc_ups_pkg_types(),
      '#default_value' => $node->ups['pkg_type'] ? $node->ups['pkg_type'] : '02',
    );
    $ups['qty'] = array('#type' => 'textfield',
      '#title' => t('Package Quantity'),
      '#default_value' => $node->ups['qty'] ? $node->ups['qty'] : 1,
      '#description' => t('For a package containing only this product, how many are in it?'),
    );
    $ups['dimensions'] = array('#type' => 'fieldset',
      '#title' => t('Dimensions'),
      '#description' => t('Physical dimensions of the packaged product.'),
      '#theme' => 'uc_ups_dimensions',
    );
    $ups['dimensions']['units'] = array('#type' => 'select',
      '#title' => t('Units of measurement'),
      '#options' => array(
        'in' => t('Inches'),
        'cm' => t('Centimeters'),
      ),
      '#default_value' => $node->ups ? $node->ups['units'] : variable_get('uc_store_length_unit', 'in'),
    );
    $ups['dimensions']['length'] = array('#type' => 'textfield',
      '#title' => t('Length'),
      '#default_value' => $node->ups['length'],
    );
    $ups['dimensions']['width'] = array('#type' => 'textfield',
      '#title' => t('Width'),
      '#default_value' => $node->ups['width'],
    );
    $ups['dimensions']['height'] = array('#type' => 'textfield',
      '#title' => t('Height'),
      '#default_value' => $node->ups['height'],
    );
    
    $form['shipping']['ups'] = $ups;
    if ($enabled['ups']){
      $form['#validate']['uc_ups_product_alter_validate'] = array();
    }
  }
}

/**
 * Theme function for uc_ups_form_alter().
 */
function theme_uc_ups_dimensions($form){
  $output = '';
  $row = array();
  foreach (element_children($form) as $dimension){
    $row[] = drupal_render($form[$dimension]);
  }
  $output .= theme('table', array(), array($row));
  return $output;
}

function uc_ups_product_alter_validate($form_id, $form_values){
  $enabled = variable_get('uc_quote_enabled', array('ups' => true));
  if ($form_values['shipping_type'] == 'small_package'){
    $dimensions = $form_values['ups']['dimensions'];
    if ($form_values['ups']['pkg_type'] == '02' && (empty($dimensions['length']) || empty($dimensions['width']) || empty($dimensions['height']))){
      form_set_error('ups][dimensions', t('Dimensions are required for custom packaging.'));
    }
  }
}

/**
 * Implementation of hook_nodeapi().
 */
function uc_ups_nodeapi(&$node, $op){
  switch ($op){
    case 'insert':
    case 'update':
      if (isset($node->ups)){
        $ups_values = $node->ups;
        db_query("DELETE FROM {uc_ups_products} WHERE nid = %d", $node->nid);
        db_query("INSERT INTO {uc_ups_products} (nid, pkg_type, qty, length, width, height, units) VALUES (%d, '%s', %d, %f, %f, %f, '%s')",
          $node->nid, $ups_values['pkg_type'], $ups_values['qty'], $ups_values['dimensions']['length'], $ups_values['dimensions']['width'], $ups_values['dimensions']['height'], $ups_values['dimensions']['units']);
      }
    break;
    case 'load':
      if (uc_product_get_shipping_type($node) == 'small_package'){
        return array('ups' => db_fetch_array(db_query("SELECT * FROM {uc_ups_products} WHERE nid = %d", $node->nid)));
      }
    break;
    case 'delete':
      db_query("DELETE FROM {uc_ups_products} WHERE nid = %d", $node->nid);
    break;
  }
}

/******************************************************************************
 * Übercart Hooks                                                             *
 ******************************************************************************/

/**
 * Implementation of Übercart's hook_shipping_type().
 */
function uc_ups_shipping_type(){
  $weight = variable_get('uc_quote_type_weight', array('small_package' => 0));

  $types = array();
  $types['small_package'] = array(
    'id' => 'small_package',
    'title' => t('Small Packages'),
    'weight' => $weight['small_package'],
  );
  
  return $types;
}

/**
 * Implementation of Übercart's hook_shipping_method().
 */
function uc_ups_shipping_method(){
  $methods = array();
  
  $enabled = variable_get('uc_quote_enabled', array('ups' => true));
  $weight = variable_get('uc_quote_method_weight', array('ups' => 0));
  $methods['ups'] = array(
    'id' => 'ups',
    'module' => 'uc_ups',
    'title' => t('UPS'),
    'enabled' => $enabled['ups'],
    'quote' => array(
      'type' => 'small_package',
      'callback' => 'uc_ups_quote',
      'accessorials' => _uc_ups_service_list(),
    ),
    'ship' => array(
      'type' => 'small_package',
      'callback' => 'uc_ups_pro_fulfill_order',
    ),
    'weight' => $weight['ups'],
  );
  
  return $methods;
}

/**
 * Implementation of Übercart's hook_store_status().
 *
 * Let's the administrator know that the UPS account information has not been
 * filled out.
 */
function uc_ups_store_status(){
  $messages = array();
  $access = variable_get('uc_ups_access_license', '') != '';
  $account = variable_get('uc_ups_shipper_number', '') != '';
  $user = variable_get('uc_ups_user_id', '') != '';
  $password = variable_get('uc_ups_password', '') != '';
  if ($access && $account && $user && $password){
    $messages[] = array('status' => 'ok', 'title' => t('UPS Online Tools'),
      'desc' => t('Information needed to access UPS Online Tools has been entered.'),
    );
  }
  else{
    $messages[] = array('status' => 'error', 'title' => t('UPS Online Tools'),
      'desc' => t('More information is needed to access UPS Online Tools. Please enter it ') .
        l('here', 'admin/store/settings/quotes/ups') .'.',
    );
  }
  
  return $messages;
}

/******************************************************************************
 * Menu Callbacks                                                             *
 ******************************************************************************/

/**
 * Default UPS Online Tool settings.
 *
 * Records UPS account information neccessary to use service. Allows testing
 * or production mode. Configures which UPS services are quoted to customers.
 */
function uc_ups_admin_settings(){
  $form = array();
  
  $form['uc_ups_access_license'] = array('#type' => 'textfield',
    '#title' => t('UPS Online Tools Access #'),
    '#default_value' => variable_get('uc_ups_access_license', ''),
    '#required' => true,
  );
  $form['uc_ups_shipper_number'] = array('#type' => 'textfield',
    '#title' => t('UPS Shipper #'),
    '#default_value' => variable_get('uc_ups_shipper_number', ''),
    '#required' => true,
  );
  $form['uc_ups_user_id'] = array('#type' => 'textfield',
    '#title' => t('UPS.com User ID'),
    '#default_value' => variable_get('uc_ups_user_id', ''),
    '#required' => true,
  );
  $form['uc_ups_password'] = array('#type' => 'password',
    '#title' => t('Password'),
    '#default_value' => variable_get('uc_ups_password', ''),
    '#required' => true,
  );
  $form['uc_ups_connection_address'] = array('#type' => 'select',
    '#title' => t('Mode'),
    '#description' => t('Quotes and shipments requested in Testing mode will not be picked up or charged to your account.'),
    '#options' => array('https://wwwcie.ups.com/ups.app/xml/' => t('Testing'),
      'https://www.ups.com/ups.app/xml/' => t('Production'),
    ),
    '#default_value' => variable_get('uc_ups_connection_address', 'https://wwwcie.ups.com/ups.app/xml/'),
  );
  $form['uc_ups_services'] = array('#type' => 'checkboxes',
    '#title' => t('UPS Services'),
    '#default_value' => variable_get('uc_ups_services', _uc_ups_service_list()),
    '#options' => _uc_ups_service_list(),
    '#description' => t('Select the UPS services that are available to customers.'),
  );
  $form['uc_ups_pickup_type'] = array('#type' => 'select',
    '#title' => t('Pickup Type'),
    '#options' => array(
      '01' => 'Daily Pickup',
      '03' => 'Customer Counter',
      '06' => 'One Time Pickup',
      '07' => 'On Call Air',
      '11' => 'Suggested Retail Rates',
      '19' => 'Letter Center',
      '20' => 'Air Service Center',
    ),
    '#default_value' => '01',
  );
  $form['uc_ups_negotiated_rates'] = array('#type' => 'radios',
    '#title' => t('Negotiated Rates'),
    '#default_value' => variable_get('uc_ups_negotiated_rates', 0),
    '#options' => array(1 => t('Yes'), 0 => t('No')),
    '#description' => t('Is your UPS account receiving negotiated rates on shipments?'),
  );
  $form['uc_ups_markup'] = array('#type' => 'textfield',
    '#title' => t('Shipping Rate Markup'),
    '#default_value' => variable_get('uc_ups_markup', '0%'),
    '#description' => t('Markup shipping rate quote by dollar amount, percentage, or multiplier.'),
  );
  $form['uc_ups_all_in_one'] = array('#type' => 'radios',
    '#title' => t('Product Packages'),
    '#default_value' => variable_get('uc_ups_all_in_one', 1),
    '#options' => array(
      0 => t('Each in its own package'),
      1 => t('All in one'),
    ),
    '#description' => t('Indicate whether each product is quoted as shipping separately or all in one package.'),
  );
  
  return system_settings_form($form);
}

/******************************************************************************
 * Module Functions                                                           *
 ******************************************************************************/

/**
 * Returns XML access request to be prepended to all requests to the UPS webservice.
 */
function uc_ups_access_request(){
  $access = variable_get('uc_ups_access_license', '');
  $user = variable_get('uc_ups_user_id', '');
  $password = variable_get('uc_ups_password', '');
  return "<?xml version=\"1.0\" encoding=\"UTF-8\"?>
<AccessRequest xml:lang=\"en-US\">
  <AccessLicenseNumber>$access</AccessLicenseNumber>
  <UserId>$user</UserId>
  <Password>$password</Password>
</AccessRequest>
";
}

/**
 * Constructs an XML quote request.
 *
 * @param $packages
 *   Array of packages received from the cart.
 * @param $origin
 *   Delivery origin address information.
 * @param $destination
 *   Delivery destination address information.
 * @param $ups_service
 *   UPS service code (refers to UPS Ground, Next-Day Air, etc.).
 * @return
 *   ShipConfirm XML document to send to UPS
 */
function uc_ups_shipping_quote($packages, $origin, $destination, $ups_service){
  $store['name'] = variable_get('uc_store_name', NULL);
  $store['owner'] = variable_get('uc_store_owner', NULL);
  $store['email'] = variable_get('uc_store_email', NULL);
  $store['email_from'] = variable_get('uc_store_email_from', NULL);
  $store['phone'] = variable_get('uc_store_phone', NULL);
  $store['fax'] = variable_get('uc_store_fax', NULL);
  $store['street1'] = variable_get('uc_store_street1', NULL);
  $store['street2'] = variable_get('uc_store_street2', NULL);
  $store['city'] = variable_get('uc_store_city', NULL);
  $store['zone'] = variable_get('uc_store_zone', NULL);
  $store['postal_code'] = variable_get('uc_store_postal_code', NULL); 
  $store['country'] = variable_get('uc_store_country', 840);
  
  $account = variable_get('uc_ups_shipper_number', '');
  $ua = explode(' ', $_SERVER['HTTP_USER_AGENT']);
  $user_agent = $ua[0];
  
  $services = _uc_ups_service_list();
  $service = array('code' => $ups_service, 'description' => $services[$ups_service]);
  
  $pkg_types = _uc_ups_pkg_types();
  
  $shipper_zone = uc_get_zone_code($store['zone']);
  $shipper_country = uc_get_country_data(array('country_id' => $store['country']));
  $shipper_country = $shipper_country[0]['country_iso_code_2'];
  $shipper_zip = $store['postal_code'];
  $shipto_zone = uc_get_zone_code($destination->zone);
  $shipto_country = uc_get_country_data(array('country_id' => $destination->country));
  $shipto_country = $shipto_country[0]['country_iso_code_2'];
  $shipto_zip = $destination->postal_code;
  $shipfrom_zone = uc_get_zone_code($origin->zone);
  $shipfrom_country = uc_get_country_data(array('country_id' => $origin->country));
  $shipfrom_country = $shipfrom_country[0]['country_iso_code_2'];
  $shipfrom_zip = $origin->postal_code;

  $shipment_weight = 0;
  $package_schema = '';
  foreach ($packages as $package){
    $qty = $package->qty;
    for ($i = 0; $i < $qty; $i++){
      $size = $package->length + 2 * ($package->width + $package->height);
      $package_type = array('code' => $package->pkg_type, 'description' => $pkg_types[$package->pkg_type]);
      $package_schema .= "<Package>";
        $package_schema .= "<PackagingType>";
          $package_schema .= "<Code>". $package_type['code'] ."</Code>";
          //$package_schema .= "<Description>". $package_type['description'] ."</Description>";
        $package_schema .= "</PackagingType>";
        if ($package->pkg_type == '02' && $package->length && $package->width && $package->height){
          if ($package->length < $package->width){
            list($package->length, $package->width) = array($package->width, $package->length);
          }
          $package_schema .= "<Dimensions>";
            $package_schema .= "<UnitOfMeasurement>";
            if ($package->units == 'cm'){
              $package_schema .= "<Code>CM</Code>";
              //$package_schema .= "<Description>Centimeters</Description>";
            }
            else{
              $package_schema .= "<Code>IN</Code>";
              //$package_schema .= "<Description>Inches</Description>";
            }
            $package_schema .= "</UnitOfMeasurement>";
            $package_schema .= "<Length>". $package->length ."</Length>";
            $package_schema .= "<Width>". $package->width ."</Width>";
            $package_schema .= "<Height>". $package->height ."</Height>";
          $package_schema .= "</Dimensions>";
        }
        switch ($package->weight_units){
          case 'oz':
            $units = 'LBS';
            $unit_name = 'Pounds';
            $weight = $package->weight / 16;
            $shipment_weight += $weight;
          break;
          case 'lb':
            $units = 'LBS';
            $unit_name = 'Pounds';
            $weight = $package->weight;
            $shipment_weight += $weight;
          break;
          case 'g':
            $units = 'KGS';
            $unit_name = 'Kilograms';
            $weight = $package->weight / 1000;
            $shipment_weight += $weight * 2.2;
          break;
          case 'kg':
            $units = 'KGS';
            $unit_name = 'Kilograms';
            $weight = $package->weight;
            $shipment_weight += $weight * 2.2;
          break;
        }
        $package_schema .= "<PackageWeight>";
          $package_schema .= "<UnitOfMeasurement>";
            $package_schema .= "<Code>$units</Code>";
            $package_schema .= "<Description>$unit_name</Description>";
          $package_schema .= "</UnitOfMeasurement>";
          $package_schema .= "<Weight>". $weight ."</Weight>";
        $package_schema .= "</PackageWeight>";
        if ($size > 130 && $size <= 165){
          $package_schema .= "<LargePackageIndicator/>";
        }
        $package_schema .= "<PackageServiceOptions>";
          $package_schema .= "<InsuredValue>";
            $package_schema .= "<CurrencyCode>". variable_get('uc_currency_code', 'USD') ."</CurrencyCode>";
            $package_schema .= "<MonetaryValue>". $package->price ."</MonetaryValue>";
          $package_schema .= "</InsuredValue>";
        $package_schema .= "</PackageServiceOptions>";
      $package_schema .= "</Package>";
    }
  }

  $schema = uc_ups_access_request() ."
<?xml version=\"1.0\" encoding=\"UTF-8\"?>
<RatingServiceSelectionRequest xml:lang=\"en-US\">
  <Request>
    <TransactionReference>
      <CustomerContext>Complex Rate Request</CustomerContext>
      <XpciVersion>1.0001</XpciVersion>
    </TransactionReference>
    <RequestAction>Rate</RequestAction>
    <RequestOption>rate</RequestOption>
  </Request>
  <PickupType>
    <Code>". variable_get('uc_ups_pickup_type', '01') ."</Code>
  </PickupType>
  <Shipment>
    <Shipper>
      <ShipperNumber>". variable_get('uc_ups_shipper_number', '') ."</ShipperNumber>
      <Address>
        <City>". $store['city'] ."</City>
        <StateProvinceCode>$shipper_zone</StateProvinceCode>
        <PostalCode>$shipper_zip</PostalCode>
        <CountryCode>$shipper_country</CountryCode>
      </Address>
    </Shipper>
    <ShipTo>
      <Address>
        <StateProvinceCode>$shipto_zone</StateProvinceCode>
        <PostalCode>$shipto_zip</PostalCode>
        <CountryCode>$shipto_country</CountryCode>
      ";
      if ($destination->residence){
        $schema .= "<ResidentialAddressIndicator/>
      ";
      }
      $schema .= "</Address>
    </ShipTo>
    <ShipFrom>
      <Address>
        <StateProvinceCode>$shipfrom_zone</StateProvinceCode>
        <PostalCode>$shipfrom_zip</PostalCode>
        <CountryCode>$shipfrom_country</CountryCode>
      </Address>
    </ShipFrom>
    <ShipmentWeight>
      <UnitOfMeasurement>
        <Code>LBS</Code>
      </UnitOfMeasurement>
      <Weight>$shipment_weight</Weight>
    </ShipmentWeight>
    <Service>
      <Code>{$service[code]}</Code>
      <Description>{$service[description]}</Description>
    </Service>
    ";
    $schema .= $package_schema;
    if (variable_get('uc_ups_negotiated_rates', false)){
      $schema .= "<RateInformation>
          <NegotiatedRatesIndicator/>
        </RateInformation>";
    }
  $schema .= "</Shipment>
</RatingServiceSelectionRequest>";

  return $schema;
}

/**
 * Callback for retrieving a UPS shipping quote.
 *
 * Requests a quote for each enabled UPS Service. Therefore, the quote will 
 * take longer to display to the user for each option the customer has available.
 *
 * @param $products
 *   Array of cart contents.
 * @param $details
 *   Order details other than product information.
 * @return
 *   JSON object containing rate, error, and debugging information.
 */
function uc_ups_quote($products, $details){
  include_once(drupal_get_path('module', 'uc_store') .'/includes/simplexml.php');
  $quotes = array();
  
  $method = uc_ups_shipping_method();
  
  $packages = array();
  if (variable_get('uc_ups_all_in_one', true)){
    $shipment_weight = 0;
    $package = new stdClass();
    foreach ($products as $product){
      $product->weight *= $product->qty;
      switch ($product->units){
        case 'oz':
          $weight = $product->weight / 16;
          $shipment_weight += $weight;
        break;
        case 'lb':
          $weight = $product->weight;
          $shipment_weight += $weight;
        break;
        case 'g':
          $weight = $product->weight / 1000;
          $shipment_weight += $weight * 2.2;
        break;
        case 'kg':
          $weight = $product->weight;
          $shipment_weight += $weight * 2.2;
        break;
      }
      $package->price += $product->price * $product->qty;
    }
    $package->weight_units = 'lb';
    $package->weight = $shipment_weight;
    $package->qty = 1;
    $package->pkg_type = '02';
    $packages[] = $package;
  }
  else{
    foreach ($products as $product){
      if (!$product->ups['qty']){
        $product->ups['qty'] = 1;
      }
      $num_of_pkgs = (int)($product->qty / $product->ups['qty']);
      if ($num_of_pkgs){
        $package = drupal_clone($product);
        $package->weight = $product->weight * $product->ups['qty'];
        $package->weight_units = $product->units;
        $package->length = $product->ups['length'];
        $package->width = $product->ups['width'];
        $package->height = $product->ups['height'];
        $package->units = $product->ups['units'];
        $package->price = $product->price * $product->ups['qty'];
        $package->qty = $num_of_pkgs;
        $package->pkg_type = $product->ups['pkg_type'];
        $packages[] = $package;
      }
      $remaining_qty = $product->qty % $product->ups['qty'];
      if ($remaining_qty){
        $package = drupal_clone($product);
        $package->description = $product->model;
        $package->weight = $product->weight * $remaining_qty;
        $package->weight_units = $product->units;
        $package->length = $product->ups['length'];
        $package->width = $product->ups['width'];
        $package->height = $product->ups['height'];
        $package->units = $product->ups['units'];
        $package->price = $product->price * $remaining_qty;
        $package->qty = 1;
        $package->pkg_type = $product->ups['pkg_type'];
        $packages[] = $package;
      }
    }
  }
  
  $dest = (object)$details;
  
  $orig = variable_get('uc_quote_store_default_address', new stdClass());
  $orig->email = variable_get('uc_store_email', '');
  foreach (array_keys(array_filter(variable_get('uc_ups_services', array()))) as $ups_service){
    $quote = array();
    $dest->residence = false;
    $request = uc_ups_shipping_quote($packages, $orig, $dest, $ups_service);
    $resp = drupal_http_request(variable_get('uc_ups_connection_address', 'https://wwwcie.ups.com/ups.app/xml/') .'Rate', array(), 'POST', $request);
    if (user_access('configure quotes') && variable_get('uc_quote_display_debug', false)){
      $quote['debug'] = /* '<pre>'. print_r($packages, true) .'</pre>' . */ htmlentities($request) .' <br /><br /> '. htmlentities($resp->data);
    }
    $response = new JSimpleXML();
    $response->loadString($resp->data);
    if (isset($response->document->response[0]->error)){
      foreach($response->document->response[0]->error as $error){
        $quote['error'][] = $error->errorseverity[0]->data() .' '. $error->errorcode[0]->data() .': '. $error->errordescription[0]->data();
        if ($error->errorseverity[0]->data() == 'HardError'){
          $quotes[$ups_service] = $quote;
          break;
        }
      }
    }
    // if NegotiatedRates exist, quote based on those, otherwise, use TotalCharges
    if (isset($response->document->ratedshipment)){
      $charge = $response->document->ratedshipment[0]->totalcharges[0];
      if (isset($response->document->ratedshipment[0]->negotiatedrates)){
        $charge = $response->document->ratedshipment[0]->negotiatedrates[0]->netsummarycharges[0]->grandtotal[0];
      }
      if (!isset($charge->currencycode) || $charge->currencycode[0]->data() == variable_get('uc_currency_code', "USD")){
        $rate = uc_ups_markup($charge->monetaryvalue[0]->data());
        $quote['rate'] = $rate;
        $quote['format'] = uc_currency_format($rate);
        $quote['option_label'] = '<img class="ups_logo" src="'. base_path() . drupal_get_path('module', 'uc_ups') .'/uc_ups_logo.gif" /> '. $method['ups']['quote']['accessorials'][$ups_service] . t(' Rate');
      }
    }
    $quotes[$ups_service] = $quote;
  }
  
  uasort($quotes, '_uc_ups_sort_quotes');
  
  /**
   * Ugly hack to work around PHP bug, details here:
   *   http://bugs.php.net/bug.php?id=23220
   * We strip out errors that look something like:
   *  warning: fread() [function.fread]: SSL fatal protocol error in...
   * Copied from http://drupal.org/node/70915.
   */
  $messages = drupal_set_message();
  $errors = $messages['error'];
  $count = 0;
  for ($i = 0; $i <= sizeof($errors); $i++) {
    if (strpos($errors[$i], 'SSL: fatal protocol error in')) {
      unset($errors[$i]);
      unset($_SESSION['messages']['error'][$i]);
    }
    else {
      $count++;
    }
  }
  if (!$count) {
    unset($_SESSION['messages']['error']);
  }
  db_query("DELETE FROM {watchdog} WHERE type = 'php' AND message LIKE '%%SSL: fatal protocol error%%'");
  // End of ugly hack.
  
  return $quotes;
}

function uc_ups_fulfill_order($order_id, $package_ids){
  $form = array();
  $pkg_types = _uc_ups_pkg_types();
  if ($order = uc_order_load($order_id)){
    $form['order_id'] = array('#type' => 'value', '#value' => $order_id);
    $packages = array();
    $form['packages'] = array('#tree' => true);
    foreach ($package_ids as $id){
      $package = uc_shipping_package_load($id);
      if ($package){
        // Create list of products and get a representative product for default values
        $product_list = array();
        $declared_value = 0;
        foreach ($package->products as $product){
          $product_list[] = $product->qty .' x '. $product->model;
          $declared_value += $product->qty * $product->price;
        }
        $ups_data = db_fetch_array(db_query("SELECT pkg_type, qty, length, width, height, units FROM {uc_ups_products} WHERE nid = %d", $product->nid));
        $product->ups = $ups_data;
        $pkg_form = array('#type' => 'fieldset',
          '#title' => t('Package !id', array('!id' => $id)),
        );
        $pkg_form['products'] = array('#value' => '<ul><li>'. implode('</li><li>', $product_list) .'</li></ul>');
        $pkg_form['package_id'] = array('#type' => 'hidden', '#value' => $id);
        $pkg_form['pkg_type'] = array('#type' => 'select',
          '#title' => t('Package Type'),
          '#options' => $pkg_types,
          '#default_value' => $product->ups['pkg_type'],
        );
        $pkg_form['declared_value'] = array('#type' => 'textfield',
          '#title' => t('Declared Value'),
          '#default_value' => $declared_value
        );
        $pkg_type['dimensions'] = array('#type' => 'fieldset',
          '#title' => t('Dimensions'),
          '#description' => t('Physical dimensions of the package.'),
          '#theme' => 'uc_ups_dimensions',
        );
        $pkg_form['dimensions']['units'] = array('#type' => 'select',
          '#title' => t('Units of measurement'),
          '#options' => array(
            'in' => t('Inches'),
            'cm' => t('Centimeters'),
          ),
          '#default_value' => $product->ups ? $product->ups['units'] : variable_get('uc_store_length_unit', 'in'),
        );
        $pkg_form['dimensions']['length'] = array('#type' => 'textfield',
          '#title' => t('Length'),
          '#default_value' => $product->ups['length'],
        );
        $pkg_form['dimensions']['width'] = array('#type' => 'textfield',
          '#title' => t('Width'),
          '#default_value' => $product->ups['width'],
        );
        $pkg_form['dimensions']['height'] = array('#type' => 'textfield',
          '#title' => t('Height'),
          '#default_value' => $product->ups['height'],
        );
        $form['packages'][$id] = $pkg_form;
      }
    }
    
    if (isset($product)){
      $address = uc_quote_get_default_shipping_address($product->nid);
    }
    $form['origin'] = array('#type' => 'fieldset',
      '#title' => t('Origin Address'),
      '#collapsible' => true,
      '#collapsed' => false,
      '#weight' => -2,
    );
    $form['origin']['pickup_email'] = uc_textfield(uc_get_field_name('email'), variable_get('uc_store_email', null), FALSE);
    $form['origin']['pickup_email']['#weight'] = -1;
    $form['origin']['pickup_first_name'] = uc_textfield(uc_get_field_name('first_name'), $address->first_name, FALSE);
    $form['origin']['pickup_last_name'] = uc_textfield(uc_get_field_name('last_name'), $address->last_name, FALSE);
    $form['origin']['pickup_company'] = uc_textfield(uc_get_field_name('company'), $address->company, FALSE);
    $form['origin']['pickup_street1'] = uc_textfield(uc_get_field_name('street1'), $address->street1, FALSE, NULL, 64);
    $form['origin']['pickup_street2'] = uc_textfield(uc_get_field_name('street2'), $address->street2, FALSE, NULL, 64);
    $form['origin']['pickup_city'] = uc_textfield(uc_get_field_name('city'), $address->city, FALSE);
    if (isset($_POST['pickup_country'])){
      $country = $_POST['pickup_country'];
    }
    else{
      $country = $address->country;
    }
    $form['origin']['pickup_zone'] = uc_zone_select(uc_get_field_name('zone'), $address->zone, null, $country);
    $form['origin']['pickup_country'] = uc_country_select(uc_get_field_name('country'), $address->country);
    $form['origin']['pickup_postal_code'] = uc_textfield(uc_get_field_name('postal_code'), $address->postal_code, FALSE, NULL, 10, 10);

    $order_form = uc_order_pane_ship_to('edit-form', $order);
    $form['destination'] = $order_form['ship_to'];
    $form['destination']['delivery_email'] = uc_textfield(uc_get_field_name('email'), $order->primary_email, FALSE);
    $form['destination']['delivery_email']['#weight'] = -1;
    $form['destination']['#title'] = t('Destination Address');
    $form['destination']['#weight'] = -1;
    
    $ups_services = _uc_ups_service_list();
    $services = array_filter(variable_get('uc_ups_services', array()));
    foreach ($services as $ups_id => $service){
      $services[$ups_id] = $ups_services[$ups_id];
    }
    if (count($services)){
      $form['service'] = array('#type' => 'select',
        '#title' => t('UPS Service'),
        '#options' => $services,
      );
    }
    $today = getdate();
    $form['ship_date'] = array('#type' => 'date',
      '#title' => t('Ship Date'),
      '#default_value' => array('year' => $today['year'], 'month' => $today['mon'], 'day' => $today['mday']),
    );
    $form['expected_delivery'] = array('#type' => 'date',
      '#title' => t('Expected Delivery'),
      '#default_value' => array('year' => $today['year'], 'month' => $today['mon'], 'day' => $today['mday']),
    );
    $form['submit'] = array('#type' => 'submit', '#value' => t('Review shipment'));
  }
  else{
    drupal_set_message(t("What? That's not an order id. You can't create a shipment without an order."));
    drupal_goto('admin/store/orders');
  }
  return $form;
}

function uc_ups_fulfill_order_submit($form_id, $form_values){
  include_once(drupal_get_path('module', 'uc_store') .'/includes/simplexml.php');
  $origin = new stdClass();
  $destination = new stdClass();
  $packages = array();
  foreach ($form_values as $key => $value){
    if (substr($key, 0, 7) == 'pickup_'){
      $field = 'o_'. substr($key, 7);
      $origin->$field = $value;
    }
    else if (substr($key, 0, 9) == 'delivery_'){
      $field = 'd_'. substr($key, 9);
      $destination->$field = $value;
    }
  }
  $_SESSION['ups'] = array();
  $_SESSION['ups']['origin'] = $origin;
  $_SESSION['ups']['destination'] = $destination;
  foreach ($form_values['packages'] as $id => $pkg_form){
    $package = uc_shipping_package_load($id);
    $package->pkg_type = $pkg_form['pkg_type'];
    $package->value = $pkg_form['declared_value'];
    $package->length = $pkg_form['dimensions']['length'];
    $package->width = $pkg_form['dimensions']['width'];
    $package->height = $pkg_form['dimensions']['height'];
    $package->units = $pkg_form['dimensions']['units'];
    $package->qty = 1;
    $_SESSION['ups']['packages'][$id] = $package;
  }
  $_SESSION['ups']['service'] = $form_values['service'];
  $_SESSION['ups']['ship_date'] = $form_values['ship_date'];
  $_SESSION['ups']['expected_delivery'] = $form_values['expected_delivery'];
  $_SESSION['ups']['order_id'] = $form_values['order_id'];
  
  $request = uc_ups_shipping_quote($_SESSION['ups']['packages'], $origin, $destination, $form_values['service']);
  $response_obj = drupal_http_request(variable_get('uc_ups_connection_address', 'https://wwwcie.ups.com/ups.app/xml/') .'ShipConfirm', array(), 'POST', $request);
  $response = new JSimpleXML();
  $response->loadString($response_obj->data);
  if (is_array($response->document->response->error)){
    $error = $response->document->response->error[0];
    $error_msg = $error->errorseverity[0]->data() .' '. $error->errorcode[0]->data() .': '. $error->errordescription[0]->data();
    //drupal_set_message($error_msg, 'error');
    //drupal_set_message('<pre>'. print_r($_SESSION['ups']['packages'], true) .'</pre>' . htmlentities($request) .' <br /><br /> '. htmlentities($response->data));
    if ($error->errorseverity[0]->data() == 'HardError'){
      return 'admin/store/orders/'. $form_values['order_id'] .'/shipments/new';
    }
  }
  $charges = $response[0]['children'][1]['children'];
  $charge = array();
  // if NegotiatedRates exist, quote based on those, otherwise, use TotalCharges
  if (is_array($response->document->shipmentcharges)){
    $charge = $response->document->shipmentcharges[0]->totalcharges[0];
    $_SESSION['ups']['rate']['type'] = t('Total Charges');
    if (is_array($response->document->shipmentcharges[0]->negotiatedrates)){
      $charge = $response->document->shipmentcharges[0]->negotiatedrates[0]->grandtotal[0];
      $_SESSION['ups']['rate']['type'] = t('Negotiated Rates');
    }
  }
  $_SESSION['ups']['rate']['currency'] = $charge->currencycode[0]->data();
  $_SESSION['ups']['rate']['amount'] = $charge->monetaryvalue[0]->data();
  $_SESSION['ups']['digest'] = $response->shipmentdigest[0]->data();

  return 'admin/store/orders/'. $form_values['order_id'] .'/shipments/ups';
}

function uc_ups_confirm_shipment($order_id){
  $form = array();
  $form['digest'] = array('#type' => 'hidden', '#value' => $_SESSION['ups']['digest']);
  $form['submit'] = array('#type' => 'submit', '#value' => t('Request Pickup'));
  return $form;
}

function theme_uc_ups_confirm_shipment($form){
  $output = '';
  
  $output .= '<div class="shipping_address"><b>'. t('Ship from:') .'</b><br />';
  $output .= uc_address_format(
    $_SESSION['ups']['origin']->first_name,
    $_SESSION['ups']['origin']->last_name,
    $_SESSION['ups']['origin']->company,
    $_SESSION['ups']['origin']->street1,
    $_SESSION['ups']['origin']->street2,
    $_SESSION['ups']['origin']->city,
    $_SESSION['ups']['origin']->zone,
    $_SESSION['ups']['origin']->postal_code,
    $_SESSION['ups']['origin']->country
  );
  $output .= '<br />'. $_SESSION['ups']['origin']->email;
  $output .= '</div>';
  
  $output .= '<div class="shipping_address"><b>'. t('Ship to:') .'</b><br />';
  $output .= uc_address_format(
    $_SESSION['ups']['destination']->first_name,
    $_SESSION['ups']['destination']->last_name,
    $_SESSION['ups']['destination']->company,
    $_SESSION['ups']['destination']->street1,
    $_SESSION['ups']['destination']->street2,
    $_SESSION['ups']['destination']->city,
    $_SESSION['ups']['destination']->zone,
    $_SESSION['ups']['destination']->postal_code,
    $_SESSION['ups']['destination']->country
  );
  $output .= '<br />'. $_SESSION['ups']['destination']->email;
  $output .= '</div>';
  $output .= '<div class="shipment_data">';
  $method = uc_ups_shipping_method();
  $output .= '<b>'. $method['ups']['quote']['accessorials'][$_SESSION['ups']['service']] .'</b><br />';
  $output .= '<i>'. $_SESSION['ups']['rate']['type'] .'</i>: '. uc_currency_format($_SESSION['ups']['rate']['amount']) .' ('. $_SESSION['ups']['rate']['currency'] .')<br />';
  $ship_date = $_SESSION['ups']['ship_date'];
  $output .= 'Ship date: '. format_date(gmmktime(12, 0, 0, $ship_date['month'], $ship_date['day'], $ship_date['year']), 'custom', 'Y/m/d');
  $exp_delivery = $_SESSION['ups']['expected_delivery'];
  $output .= '<br />Expected delivery: '. format_date(gmmktime(12, 0, 0, $exp_delivery['month'], $exp_delivery['day'], $exp_delivery['year']), 'custom', 'Y/m/d');
  $output .= "</div>\n<br style=\"clear: both;\" />";
  $output .= drupal_render($form);
  return $output;
}

function uc_ups_confirm_shipment_submit($form_id, $form_values){
  include_once(drupal_get_path('module', 'uc_store') .'/includes/simplexml.php');
  // Request pickup using parameters in form.
  $order_id = $_SESSION['ups']['order_id'];
  $packages = array_keys($_SESSION['ups']['packages']);
  $request = uc_ups_request_pickup($form_values['digest'], $order_id, $packages);
  $result = drupal_http_request(variable_get('uc_ups_connection_address', 'https://wwwcie.ups.com/ups.app/xml/') .'ShipAccept', array(), 'POST', $request);
  $response = new JSimpleXML();
  $response->loadString($result->data);
  $code = $response->document->responsestatuscode[0]->data();
  if ($code == 0) { // failed request 
    $error = $response->document->error[0];
    $error_severity = $error->errorseverity[0]->data();
    $error_code = $error->errorcode[0]->data();
    $error_description = $error->errordescription[0]->data();
    drupal_set_message(t('(@severity error @code) @description', array('@severity' => $error_severity, '@code' => $error_code, '@description' => $error_description)), 'error');
    if ($error_severity == 'HardError'){
      return 'admin/store/orders/'. $order_id .'/shipments/ups/'. implode('/', $packages);
    }
  }
  
  $shipment = new stdClass();
  $shipment->order_id = $order_id;
  $shipment->origin = drupal_clone($_SESSION['ups']['origin']);
  $shipment->destination = drupal_clone($_SESSION['ups']['destination']);
  $shipment->packages = $_SESSION['ups']['packages'];
  $shipment->shipping_method = 'ups';
  $shipment->accessorials = $_SESSION['ups']['service'];
  $shipment->carrier = t('UPS');
  // if NegotiatedRates exist, quote based on those, otherwise, use TotalCharges
  if (is_array($response->document->shipmentcharges)){
    $charge = $response->document->shipmentcharges[0]->totalcharges[0];
    if (is_array($response->document->shipmentcharges[0]->negotiatedrates)){
      $charge = $response->document->shipmentcharges[0]->negotiatedrates[0]->grandtotal[0];
    }
  }
  $cost = $charge->monetaryvalue[0]->data();
  $shipment->cost = $cost;
  $shipment->tracking_number = $response->shipmentresults[0]->shipmentidentificationnumber[0]->data();
  $ship_date = $_SESSION['ups']['ship_date'];
  $shipment->ship_date = gmmktime(12, 0, 0, $ship_date['month'], $ship_date['day'], $ship_date['year']);
  $exp_delivery = $_SESSION['ups']['expected_delivery'];
  $shipment->expected_delivery = gmmktime(12, 0, 0, $exp_delivery['month'], $exp_delivery['day'], $exp_delivery['year']);
  
  foreach ($response->document->shipmentresults[0]->packageresults as $package_results){
    $package =& current($shipment->packages);
    $package->tracking_number = $package_result->trackingnumber[0]->data();
    $label_image = $package_results->labelimage[0]->graphicimage[0]->data();
    if (file_check_directory(file_create_path('ubercart_images/ups_labels'), FILE_CREATE_DIRECTORY)){
      $label_path = file_create_path('ubercart_images/ups_labels') .'/label'. $package->tracking_number .'.gif';
      if ($label_file = fopen($label_path, 'wb')){
        fwrite($label_file, base64_decode($label_image));
        fclose($label_file);
        $package->label_image = $label_path;
      }
      else{
        drupal_set_message(t('Could not open a file to save the label image.'), 'error');
      }
    }
    else{
      drupal_set_message(t('Could not find or create the directory "ubercart_images/ups_labels" in the file system path.'), 'error');
    }
    unset($package);
    next($shipment->packages);
  }
  
  uc_shipping_shipment_save($shipment);
  
  unset($_SESSION['ups']);
  return 'admin/store/orders/'. $order_id .'/shipments';
}

function uc_ups_request_pickup($digest, $order_id = 0, $packages = array()){
  $packages = (array)$packages;
  
  $schema = uc_ups_access_request();
  $schema .= "<?xml version=\"1.0\" encoding=\"UTF-8\"?>
<ShipmentAcceptRequest>
  <Request>
    <RequestAction>ShipAccept</RequestAction>";
    if ($order_id || count($packages)){
      $schema .= "\n<TransactionReference>
      <CustomerContext>";
      if ($order_id){
        $schema .= "<OrderId>". $order_id ."</OrderId>\n";
      }
      foreach ($packages as $pkg_id){
        $schema .= "<PackageId>". $pkg_id ."</PackageId>\n";
      }
      $schema .= "</CustomerContext>\n</TransactionReference>\n";
    }
  $schema .= "  </Request>
  <ShipmentDigest>". $digest ."</ShipmentDigest>
</ShipmentAcceptRequest>";

  //drupal_set_message('<pre>'. htmlentities($schema) .'</pre>');
  return $schema;
}

function theme_uc_ups_label_image(){
  $args = func_get_args();
  $image_path = implode('/', $args);
  print '<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 3.2//EN">
<html><head><title>
View/Print Label</title></head><style>
    .small_text {font-size: 80%;}
    .large_text {font-size: 115%;}
</style>
<body bgcolor="#FFFFFF">
<table border="0" cellpadding="0" cellspacing="0" width="600"><tr>
<td height="410" align="left" valign="top">
<b class="large_text">View/Print Label</b>
&nbsp;<br>
<ol class="small_text"> <li><b>Print the label:</b> &nbsp;
Select Print from the File menu in this browser window to print the label below.<br><br><li><b>
Fold the printed label at the dotted line.</b> &nbsp;
Place the label in a UPS Shipping Pouch. If you do not have a pouch, affix the folded label using clear plastic shipping tape over the entire label.<br><br><li><b>GETTING YOUR SHIPMENT TO UPS<br>
Customers without a Daily Pickup</b><ul><li>Ground, 3 Day Select, and Standard to Canada shipments must be dropped off at an authorized UPS location, or handed to a UPS driver. Pickup service is not available for these services. To find the nearest drop-off location, select the Drop-off icon from the UPS tool bar.<li>
Air shipments (including Worldwide Express and Expedited) can be picked up or dropped off. To schedule a pickup, or to find a drop-off location, select the Pickup or Drop-off icon from the UPS tool bar.  </ul> <br> 
<b>Customers with a Daily Pickup</b><ul><li>
Your driver will pickup your shipment(s) as usual. </ul>
</ol></td></tr></table><table border="0" cellpadding="0" cellspacing="0" width="600">
<tr>
<td class="small_text" align="left" valign="top">
&nbsp;&nbsp;&nbsp;
FOLD HERE</td>
</tr>
<tr>
<td align="left" valign="top"><hr>
</td>
</tr>
</table>

<table>
<tr>
<td height="10">&nbsp;
</td>
</tr>
</table>

<table border="0" cellpadding="0" cellspacing="0" width="650" ><tr>
<td align="left" valign="top">
<img src="'. base_path() . $image_path .'" height="392" width="672">
</td>
</tr></table>
</body>
</html>';

  exit();
}

/**
 * Modifies the rate received from UPS before displaying to the customer.
 */
function uc_ups_markup($rate){
  $markup = variable_get('uc_ups_markup', '0%');
  if (strpos($markup, '%') !== false){
    return $rate + $rate * floatval(rtrim($markup, '%')) / 100;
  }
  else if (strpos($markup, '$') !== false){
    return $rate + floatval(ltrim($markup, '$'));
  }
  else if (floatval($markup)){
    return $rate * floatval($markup);
  }
  else{
    return $rate;
  }
}

/**
 * Convenience function to get UPS codes for their services.
 */
function _uc_ups_service_list(){
  return array(
    '03' => t('UPS Ground'),
    '11' => t('UPS Standard'),
    '01' => t('UPS Next Day Air'),
    '13' => t('UPS Next Day Air Saver'),
    '14' => t('UPS Next Day Early A.M.'),
    '02' => t('UPS 2nd Day Air'),
    '59' => t('UPS 2nd Day Air A.M.'),
    '12' => t('UPS 3-Day Select'),
  );
}

/**
 * Convenience function to get UPS codes for their package types.
 */
function _uc_ups_pkg_types(){
  return array(
    '01' => t('UPS Letter'),
    '02' => t('Customer Supplied Package'),
    '03' => t('Tube'),
    '04' => t('PAK'),
    '21' => t('UPS Express Box'),
    '24' => t('UPS 25KG Box'),
    '25' => t('UPS 10KG Box'),
    '30' => t('Pallet'),
  );
}

/**
 * Callback for usort().
 *
 * Sorts service rates by increasing price.
 */
function _uc_ups_sort_quotes($a, $b){
  $ar = $a['rate'];
  $br = $b['rate'];
  if ($ar == $br){
    return 0;
  }
  else{
    return ($ar < $br) ? -1 : 1;
  }
}
