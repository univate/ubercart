<?php
// $Id: uc_weightquote.module,v 1.4 2007-11-05 20:31:56 rszrama Exp $

/**
 * @file
 * Shipping quote module that defines a shipping rate for each product based on weight.
 *
 * Coded by Lyle Mantooth.
 */

/******************************************************************************
 * Drupal Hooks                                                               *
 ******************************************************************************/

/**
 * Implementation of hook_menu().
 */
function uc_weightquote_menu($may_cache){
  $items = array();
  
  if ($may_cache){
    $items[] = array('path' => 'admin/store/settings/quotes/methods/weightquote',
      'access' => user_access('configure quotes'),
      'title' => t('Weight quote'),
      'callback' => 'drupal_get_form',
      'callback arguments' => array('uc_weightquote_admin_settings'),
      'type' => MENU_LOCAL_TASK,
    );
  }
  
  return $items;
}

/**
 * Implementation of hook_form_alter().
 *
 * Add a form element for the shipping rate of a product.
 *
 * @see uc_product_form
 */
function uc_weightquote_form_alter($form_id, &$form){
  $node = $form['#node'];
  $product_types = uc_product_node_info();
  if (is_object($node) && $form_id == $node->type .'_node_form' && isset($product_types[$node->type])){
    $enabled = variable_get('uc_quote_enabled', array('weightquote' => true));
    $form['shipping']['weightquote'] = array('#type' => 'fieldset',
      '#title' => t('Shipping Rate by Weight'),
      '#collapsible' => true,
      '#collapsed' => ($enabled['weightquote'] == false),
      '#weight' => 2,
    );

    $form['shipping']['weightquote']['weightquote'] = array(
      '#type' => 'textfield',
      '#title' => t('Default cost adjustment per weight unit'),
      '#description' => t('The amount per weight unit to add to the shipping cost for an item.<br />Example: to add $5 per pound, put 5 in here.'),
      '#default_value' => $form['#node']->weightquote,
      '#size' => 16,
    );
  }
}

/**
 * Implementation of hook_nodeapi().
 */
function uc_weightquote_nodeapi(&$node, $op){
  switch($op){
    case 'insert':
    case 'update':
      if (isset($node->weightquote)){
        if (!$node->revision){
          db_query("DELETE FROM {uc_weightquote_products} WHERE vid = %d", $node->vid);
        }
        db_query("INSERT INTO {uc_weightquote_products} (vid, nid, rate) VALUES (%d, %d, %f)",
          $node->vid, $node->nid, $node->weightquote);
      }
    break;
    case 'load':
      $rate = db_result(db_query("SELECT rate FROM {uc_weightquote_products} WHERE vid = %d", $node->vid));
      if ($rate === false || $rate == -1){
        return array('weightquote' => variable_get('uc_weightquote_product_default', 0.00));
      }
      else{
        return array('weightquote' => $rate);
      }
    break;
    case 'delete':
      db_query("DELETE FROM {uc_weightquote_products} WHERE nid = %d", $node->nid);
    break;
    case 'delete revision':
      db_query("DELETE FROM {uc_weightquote_products} WHERE vid = %d", $node->vid);
    break;
  }
}

/******************************************************************************
 * Workflow-ng Hooks                                                          *
 ******************************************************************************/

/**
 * Implementation of hook_configuration().
 *
 * Connect the weightquote action and event.
 */
function uc_weightquote_configuration(){
  $enabled = variable_get('uc_quote_enabled', array('weightquote' => true));
  $configurations = array(
    'uc_weightquote_get_quote' => array(
      '#label' => t('Shipping quote via product weight'),
      '#event' => 'get_quote_from_weightquote',
      '#module' => 'uc_weightquote',
      '#active' => $enabled['weightquote'],
    ),
  );
  
  $action = workflow_ng_use_action('uc_quote_action_get_quote', array(
    '#label' => t('Fetch a shipping quote'),
  ));
  $configurations['uc_weightquote_get_quote'] = workflow_ng_configure($configurations['uc_weightquote_get_quote'], $action);
  
  return $configurations;
}

/******************************************************************************
 * Übercart Hooks                                                             *
 ******************************************************************************/

/**
 * Implementation of Übercart's hook_shipping_method().
 */
function uc_weightquote_shipping_method(){
  $methods = array();
  
  $enabled = variable_get('uc_quote_enabled', array('weightquote' => true, 'order rate' => false));
  $weight = variable_get('uc_quote_method_weight', array('weightquote' => 0, 'order rate' => 1));
  $methods['weightquote'] = array(
    'id' => 'weightquote',
    'module' => 'uc_weightquote',
    'title' => t('Weight Rate per Product'),
    'enabled' => $enabled['weightquote'],
    'quote' => array(
      'type' => 'order',
      'callback' => 'uc_weightquote_quote',
      'accessorials' => array(
        t('Shipping'),
      ),
    ),
    'weight' => $weight['weightquote'],
  );
  
  return $methods;
}


/******************************************************************************
 * Menu Callbacks                                                             *
 ******************************************************************************/

/**
 * Configure the store default shipping rate.
 */
function uc_weightquote_admin_settings(){
  $form['uc_weightquote_base_rate'] = array('#type' => 'textfield',
    '#title' => t('Base price'),
    '#description' => t('The starting price of weight based shipping costs.'),
    '#default_value' => variable_get('uc_weightquote_base_rate', 0),
    '#size' => 16,
    '#field_prefix' => variable_get('uc_sign_after_amount', FALSE) ? '' : variable_get('uc_currency_sign', '$'),
    '#field_suffix' => variable_get('uc_sign_after_amount', FALSE) ? variable_get('uc_currency_sign', '$') : '',
  );
  $form['uc_weightquote_product_default'] = array(
    '#type' => 'textfield',
    '#title' => t('Default cost adjustment per weight unit'),
    '#description' => t('The amount per weight unit to add to the shipping cost for an item.<br />Example: to add $5 per pound, put 5 in here.'),
    '#default_value' => variable_get('uc_weightquote_product_default', 0),
    '#size' => 16,
    '#field_prefix' => variable_get('uc_sign_after_amount', FALSE) ? '' : variable_get('uc_currency_sign', '$'),
    '#field_suffix' => variable_get('uc_sign_after_amount', FALSE) ? variable_get('uc_currency_sign', '$') : '',
  );

  return system_settings_form($form);
}

/******************************************************************************
 * Module Functions                                                           *
 ******************************************************************************/

/**
 * Standard callback to return a shipping rate via the weightquote method.
 *
 * @param $products
 *   The order's products.
 * @param $details
 *   Other order details including a shipping address.
 * @return
 *   A JSON object containing the shipping quote for the order.
 */
function uc_weightquote_quote($products, $details){
  $rate = 0;
  foreach ($products as $product){
    $node = node_load($product->nid);
    $rate += $node->weightquote * $product->qty * $product->weight;
  }
  $rate += variable_get('uc_weightquote_base_rate', 0);
  
  $method = uc_weightquote_shipping_method();
  
  $quotes[] = array('rate' => $rate, 'format' => uc_currency_format($rate), 'option_label' => $method['weightquote']['quote']['accessorials'][0]);
  
  return $quotes;
}
