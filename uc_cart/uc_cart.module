<?php
// $Id: uc_cart.module,v 1.7 2007-06-07 21:41:41 rszrama Exp $

/**
 * @file
 * Handles all things concerning Ubercart's shopping cart.
 *
 * The Ubercart cart system functions much like the e-commerce cart at its base
 * level... in fact, most carts do.  This module handles the cart display,
 * adding items to a cart, and checking out.  The module enables the cart,
 * products, and checkout to be extensible.
 *
 * Development sponsored by the Ubercart project.  http://www.ubercart.org
 */

/*******************************************************************************
 * Hook Functions (Drupal)
 ******************************************************************************/

/**
 * Implementation of hook_menu().
 */
function uc_cart_menu($may_cache) {
  if ($may_cache) {
    $items[] = array(
      'path' => 'admin/store/settings/cart',
      'title' => t('Cart settings'),
      'callback' => 'uc_cart_cart_settings_overview',
      'access' => user_access('administer store'),
      'description' => t('Configure the cart settings.'),
    );
    $items[] = array(
      'path' => 'admin/store/settings/cart/overview',
      'title' => t('Overview'),
      'access' => user_access('administer store'),
      'description' => t('View the cart settings.'),
      'type' => MENU_DEFAULT_LOCAL_TASK,
      'weight' => -10,
    );
    $items[] = array(
      'path' => 'admin/store/settings/cart/edit',
      'title' => t('Edit'),
      'callback' => 'drupal_get_form',
      'callback arguments' => array('uc_cart_cart_settings_form'),
      'access' => user_access('administer store'),
      'description' => t('Edit the cart settings.'),
      'type' => MENU_LOCAL_TASK,
      'weight' => -5,
    );
    $items[] = array(
      'path' => 'admin/store/settings/cart/edit/basic',
      'title' => t('Cart settings'),
      'access' => user_access('administer store'),
      'description' => t('Edit the basic cart settings.'),
      'type' => MENU_DEFAULT_LOCAL_TASK,
      'weight' => -10,
    );
    $items[] = array(
      'path' => 'admin/store/settings/cart/edit/panes',
      'title' => t('Cart panes'),
      'access' => user_access('administer store'),
      'callback' => 'drupal_get_form',
      'callback arguments' => array('uc_cart_cart_panes_form'),
      'description' => t('Edit the pane settings for the cart view page.'),
      'type' => MENU_LOCAL_TASK,
      'weight' => -5,
    );
    $items[] = array(
      'path' => 'admin/store/settings/cart/edit/block',
      'title' => t('Cart block'),
      'access' => user_access('administer store'),
      'callback' => 'uc_cart_block_edit_info',
      'description' => t('Edit the settings for the shopping cart block.'),
      'type' => MENU_LOCAL_TASK,
      'weight' => 0,
    );

    $items[] = array(
      'path' => 'admin/store/settings/checkout',
      'title' => t('Checkout settings'),
      'callback' => 'uc_cart_checkout_settings_overview',
      'access' => user_access('administer store'),
      'description' => t('Configure the checkout settings.'),
    );
    $items[] = array(
      'path' => 'admin/store/settings/checkout/overview',
      'title' => t('Overview'),
      'access' => user_access('administer store'),
      'description' => t('View the checkout settings.'),
      'type' => MENU_DEFAULT_LOCAL_TASK,
      'weight' => -10,
    );
    $items[] = array(
      'path' => 'admin/store/settings/checkout/edit',
      'title' => t('Edit'),
      'callback' => 'drupal_get_form',
      'callback arguments' => array('uc_cart_checkout_settings_form'),
      'access' => user_access('administer store'),
      'description' => t('Edit the cart settings.'),
      'type' => MENU_LOCAL_TASK,
      'weight' => -5,
    );
    $items[] = array(
      'path' => 'admin/store/settings/checkout/edit/basic',
      'title' => t('Checkout settings'),
      'access' => user_access('administer store'),
      'description' => t('Edit the basic checkout settings.'),
      'type' => MENU_DEFAULT_LOCAL_TASK,
      'weight' => -10,
    );
    $items[] = array(
      'path' => 'admin/store/settings/checkout/edit/panes',
      'title' => t('Checkout panes'),
      'access' => user_access('administer store'),
      'callback' => 'drupal_get_form',
      'callback arguments' => array('uc_cart_checkout_panes_form'),
      'description' => t('Edit the pane settings for the checkout page.'),
      'type' => MENU_LOCAL_TASK,
      'weight' => -5,
    );
    $items[] = array(
      'path' => 'admin/store/settings/checkout/edit/messages',
      'title' => t('Checkout messages'),
      'access' => user_access('administer store'),
      'callback' => 'drupal_get_form',
      'callback arguments' => array('uc_cart_checkout_messages_form'),
      'description' => t('Edit the messages for the checkout completion page.'),
      'type' => MENU_LOCAL_TASK,
      'weight' => -0,
    );

    $items[] = array(
      'path' => 'cart',
      'title' => t('Shopping Cart'),
      'description' => t('View/modify the contents of your shopping cart or proceed to checkout.'),
      'callback' => 'uc_cart_view',
      'access' => user_access('access content'),
      'type' => MENU_CALLBACK,
    );
    $items[] = array(
      'path' => 'cart/checkout',
      'title' => t('Checkout'),
      'description' => t('Purchase the items in your shopping cart.'),
      'callback' => 'uc_cart_checkout',
      'access' => user_access('access content'),
      'type' => MENU_CALLBACK,
    );
    $items[] = array(
      'path' => 'cart/checkout/review',
      'title' => t('Review Order'),
      'description' => t('Review an order before final submission.'),
      'callback' => 'uc_cart_checkout_review',
      'access' => user_access('access content'),
      'type' => MENU_CALLBACK,
    );
    $items[] = array(
      'path' => 'cart/checkout/complete',
      'title' => t('Order Complete'),
      'description' => t('Display information upon completion of an order.'),
      'callback' => 'uc_cart_checkout_complete',
      'access' => user_access('access content'),
      'type' => MENU_CALLBACK,
    );
  }

  return $items;
}

/**
 * Implementation of hook_cron().
 */
function uc_cart_cron() {
  // Empty anonymous carts.
  $time = strtotime(variable_get('uc_cart_anon_duration', '4') .' '
                  . variable_get('uc_cart_anon_unit', 'hours') .' ago');
  db_query("DELETE FROM {uc_cart_products} WHERE changed <= %d AND "
          ."CHAR_LENGTH(cart_id) > 8", $time);

  // Empty authenticated carts.
  $time = strtotime(variable_get('uc_cart_auth_duration', '1') .' '
                  . variable_get('uc_cart_auth_unit', 'years') .' ago');
  db_query("DELETE FROM {uc_cart_products} WHERE changed <= %d AND "
          ."CHAR_LENGTH(cart_id) <= 8", $time);
}

/**
 * Implementation of hook_block().
 */
function uc_cart_block($op = 'list', $delta = 0, $edit = array()) {
  if ($op == 'list') {
    $blocks[0]['info'] = t('Shopping Cart');

    return $blocks;
  }
  elseif ($op == 'view') {
    if (variable_get('uc_cart_expanded', FALSE)) {
      drupal_add_js('var expanded_block = true;', 'inline');
    }
    else {
      drupal_add_js('var expanded_block = false;', 'inline');
    }

    drupal_add_js(drupal_get_path('module', 'uc_cart') .'/uc_cart_block.js');
    drupal_add_css(drupal_get_path('module', 'uc_cart') .'/uc_cart_block.css');

    $item_count = count(uc_cart_get_contents());
    if (!$item_count && variable_get('uc_cart_empty_hide', '0')) {
      return;
    }

    $uc_cart_path = base_path() . drupal_get_path('module', 'uc_cart');
    $cart_image = $uc_cart_path;
    $cart_image .= ($item_count) ? '/images/cart_full.gif' : '/images/cart_empty.gif';
    $arrow_down_image = $uc_cart_path .'/images/bullet-arrow-down.gif';
    $arrow_up_image = $uc_cart_path .'/images/bullet-arrow-up.gif';

    $subject = l('<img src="'. $cart_image .'" align="left" style="padding-right: 5px;" />', 'cart', NULL, NULL, NULL, FALSE, TRUE)
                .'<div id="block-cart-title-bar" onclick="cart_toggle(\''. $uc_cart_path .'\');" style="cursor: pointer; white-space: nowrap;">'
                .'<img id="block-cart-title-arrow" src="'. $arrow_up_image .'" alt="[]" title="'. t('Expand cart block.') .'" style="padding-top: 5px; padding-right: 2px;" align="right" />'
               . t('Shopping Cart') .'</div>';

    $block['subject'] = $subject;
    $block['content'] = theme('uc_cart_display_block');

    return $block;
  }
  elseif ($op == 'configure') {
    $form['uc_cart_empty_hide'] = array(
      '#type' => 'checkbox',
      '#title' => t('Hide block if cart is empty.'),
      '#default_value' => variable_get('uc_cart_empty_hide', FALSE),
    );
    $form['uc_cart_expanded'] = array(
      '#type' => 'checkbox',
      '#title' => t('Display the shopping cart expanded by default.'),
      '#default_value' => variable_get('uc_cart_expanded', FALSE),
    );
    $form['uc_cart_show_help_text'] = array(
      '#type' => 'checkbox',
      '#title' => t('Display small help text in the shopping cart block.'),
      '#default_value' => variable_get('uc_cart_show_help_text', FALSE),
    );
    $form['uc_cart_help_text'] = array(
      '#type' => 'textfield',
      '#title' => t('Cart help text'),
      '#description' => t('Displayed if the above box is checked.'),
      '#size' => 32,
      '#default_value' => variable_get('uc_cart_help_text', t('Click title to display cart contents.')),
    );

    return $form;
  }
  elseif ($op == 'save' && isset($edit['uc_cart_empty_hide'])) {
    variable_set('uc_cart_empty_hide', $edit['uc_cart_empty_hide']);
    variable_set('uc_cart_expanded', $edit['uc_cart_expanded']);
    variable_set('uc_cart_show_help_text', $edit['uc_cart_show_help_text']);
    variable_set('uc_cart_help_text', check_plain($edit['uc_cart_help_text']));
  }
}

/**
 * Theme the shopping cart block contents.
 */
function theme_uc_cart_display_block() {
  /* The e-commerce cart has a bit here that takes into account page caching
     for anonymous users.  This would really only affect anonymous users browsing
     with items in their cart, not just people browsing the site.  If there is
     a performance issue, this should be a place to look to tweak...  -RS  */

  if (!module_exists('uc_store')) {
    return '<div id="block-cart-contents"><p>The module uc_store must be enabled for the cart block to function properly.</p></div>';
  }

  if (variable_get('uc_cart_show_help_text', FALSE)) {
    $output = '<span class="cart-help-text">'
            . variable_get('uc_cart_help_text', t('Click title to display cart contents.'))
             .'</span>';
  }

  $output .= '<div id="block-cart-contents">';

  $items = uc_cart_get_contents();

  $item_count = 0;
  if (!empty($items)) {
    $output .= '<table style="border-bottom-width: 2px;" cellpadding="2">'
              .'<tbody style="border-top: 0px;">';

    foreach ($items as $item) {
      $output .= '<tr valign="top"><td><div class="cart-block-item-qty">'. $item->qty .'x</div></td>'
               . '<td width="100%"><div class="cart-block-item-title">'. l($item->title, 'node/'. $item->nid) .'</div></td>'
               . '<td align="right" nowrap="nowrap"><div class="cart-block-item-price">'. uc_currency_format($item->price) .'</div></td></tr>';
      $total += ($item->price) * $item->qty;
      $item_count += $item->qty;
    }

    $output .= '</tbody></table>';
  }
  else {
    $output .= '<p>'. t('There are no products in your shopping cart.') .'</p>';
  }

  $output .= '</div>';

  $item_word = ($item_count == 1) ? t('Item') : t('Items');
  $view = '('. l(t('View cart'), 'cart', array('rel' => 'nofollow')) .')';
  $checkout = '('. l(t('Checkout'), 'cart/checkout', array('rel' => 'nofollow')) .')';
  $output .= '<table cellpadding="2"><tbody style="border-top: 0px;">'
            .'<tr valign="top"><td nowrap>'. $item_count
            .' '. $item_word .'</td><td width="100%" align="right">'
            .'<strong>'. t('Total:') .'</strong> '. uc_currency_format($total) .'</td></tr>';
  if ($item_count > 0) {
    $output .= '<tr><td colspan="2" align="right">'. $view .' '. $checkout .'</td></tr>';
  }
  $output .= '</tbody></table>';
  
  return $output;
}

/**
 * Implementation of hook_exit().
 *
 * Clear the cart/view page for anonymous users from the cache.  Review. -RS
 */
function uc_cart_exit() {
  global $user;

  if (substr($_GET['q'], -4) == 'cart' && $user->uid == 0 && variable_get('cache', 0)) {
    cache_clear_all();
  }
}

/**
 * Implementation of hook_user().
 *
 * Convert guest cart to a permanent cart on login.
 */
function uc_cart_user($op, &$edit, &$user, $category = NULL) {
  switch ($op) {
    case 'login':
      // Something is screwing up here so you end up with products in a cart having 0 qty. -RS
      $items = uc_cart_get_contents($user->uid);
      db_query("UPDATE {uc_cart_products} SET cart_id = %d WHERE cart_id = '%s'", $user->uid, session_id());
      if (count($items) > 0) {
        $items = uc_cart_get_contents($user->uid, 'rebuild');
        db_query("DELETE FROM {uc_cart_products} WHERE cart_id = %d", $user->uid);
        foreach ($items as $item) {
          uc_cart_add_item($item->nid, $item->qty, $item->data, $user->uid, FALSE);
        }
      }
      break;
  }
}

/**
 * Implementation of hook_form_alter().
 *
 * Redirect shopper back to checkout page if they go to login from there.
 */
function uc_cart_form_alter($form_id, &$form) {
  if ($form_id == 'user_login' || $form_id == 'user_edit') {
    $referer = referer_uri();
    if (substr($referer, -13, 13) == 'cart/checkout') {
      $form['#action'] = url($_GET['q'], "destination=cart/checkout");
    }
    elseif (substr($referer, -22, 22) == 'cart/checkout/complete') {
      $form['#action'] = url($_GET['q'], "destination=user");
    }
  }
}


/*******************************************************************************
 * Hook Functions (TAPIr)
 ******************************************************************************/

/**
 * Implementation of hook_table_settings().
 */
function uc_cart_table_settings() {
  $tables[] = array(
    'id' => 'uc_cart_view_table',
    'description' => t("Display information on products in a customer's cart."),
    'path' => 'admin/store/settings/tables',
    'access' => 'administer store',
    'preview' => FALSE,
  );
  
  return $tables;
}


/*******************************************************************************
 * Hook Functions (Ubercart)
 ******************************************************************************/

/**
 * Implementation of hook_uc_message().
 */
function uc_cart_uc_message() {
  $messages['checkout_instructions'] = '';
  $messages['review_instructions'] = t('Please review the details of your order and click !submit if all the information is correct.  You may use the Back button to make changes to your order if necessary.', array('!submit' => variable_get('uc_checkout_submit_button', t('Submit Order'))));
  $messages['completion_message'] = t('Your order is complete!');
  $messages['completion_logged_in'] = t('Thank you for shopping at !site. While logged in, you may continue shopping or <a href="!url">click here</a> to view your current order status and order history.', array('!url' => url('user')));
  $messages['completion_existing_user'] = t('Thank you for shopping at !site. Your current order has been attached to the account we found matching your e-mail address.') .'<p>'. t('<a href="!url">Click here</a> to login and view your current order status and order history. Remember to login when you make your next purchase for a faster checkout experience!', array('!url' => url('user')));
  $messages['completion_new_user'] = t('Thank you for shopping at !site. A new account has been created for you here that you may use to view your current order status.') . t('<p><a href="!url">Click here</a> to login to your new account using the following information:', array('!url' => url('user'))) . t('<p><b>Username:</b> !new_username<br /><b>Password:</b> !new_password');
  $messages['continue_shopping'] = l(t('Click to return to the front page.'), '<front>');

  return $messages;
}

/**
 * Implementation of hook_cart_pane().
 */
function uc_cart_cart_pane($items) {
  $panes[] = array(
    'id' => 'cart_form',
    'title' => t('Default cart form'),
    'enabled' => TRUE,
    'weight' => 0,
    'body' => !is_null($items) ? drupal_get_form('uc_cart_view_form', $items) : '',
  );

  return $panes;
}

/**
 * Implementation of hook_checkout_pane().
 */
function uc_cart_checkout_pane() {
  $panes[] = array(
    'id' => 'cart',
    'callback' => 'uc_checkout_pane_cart',
    'title' => t('Cart Contents'),
    'desc' => t("Display the contents of a customer's shopping cart."),
    'weight' => 1,
    'process' => FALSE,
    'collapsible' => FALSE,
  );
  $panes[] = array(
    'id' => 'customer',
    'callback' => 'uc_checkout_pane_customer',
    'title' => t('Customer Information'),
    'desc' => t('Get the necessary information to create a customer on the site.'),
    'weight' => 2,
  );
  $panes[] = array(
    'id' => 'delivery',
    'callback' => 'uc_checkout_pane_delivery',
    'title' => t('Delivery Information'),
    'desc' => t('Get the information for where the order needs to ship.'),
    'weight' => 3,
  );
  $panes[] = array(
    'id' => 'billing',
    'callback' => 'uc_checkout_pane_billing',
    'title' => t('Billing Information'),
    'desc' => t('Get basic information needed to collect payment.'),
    'weight' => 4,
  );
  $panes[] = array(
    'id' => 'comments',
    'callback' => 'uc_checkout_pane_comments',
    'title' => t('Order Comments'),
    'desc' => t('Allow a customer to put comments on an order.'),
    'weight' => 7,
  );

  return $panes;
}

/*******************************************************************************
 * Callback Functions, Forms, and Tables
 ******************************************************************************/

function uc_cart_cart_settings_overview() {
  $sections[] = array(
    'edit' => 'admin/store/settings/cart/edit',
    'title' => t('Cart settings'),
    'items' => array(
      t('Anonymous cart duration is !duration.',
        array('!duration' => variable_get('uc_cart_anon_duration', '4') .' '
                           . variable_get('uc_cart_anon_unit', 'hours'))),
      t('Authenticated cart duration is !duration.',
        array('!duration' => variable_get('uc_cart_auth_duration', '1') .' '
                           . variable_get('uc_cart_auth_unit', 'years'))),
      t('Add item URL redirect is:<br />!url',
        array('!url' => url(variable_get('uc_add_item_redirect', 'cart'), NULL, NULL, TRUE))),
      t('Continue shopping link is:<br />!link',
        array('!link' => l(variable_get('uc_continue_shopping_text', t('Continue shopping')), variable_get('uc_cart_continue_shopping', '')))),
      t('Minimum order subtotal is !min.',
        array('!min' => uc_currency_format(variable_get('uc_minimum_subtotal', 0)))),
    ),
  );

  $panes = uc_cart_cart_pane_list(NULL);
  foreach ($panes as $pane) {
    $items[] = t('!title is !enabled.', array('!title' => $pane['title'], '!enabled' => $pane['enabled'] ? t('enabled') : t('disabled')));
  }
  $sections[] = array(
    'edit' => 'admin/store/settings/cart/edit/panes',
    'title' => t('Cart panes (in display order)'),
    'items' => $items,
  );

  if (variable_get('uc_cart_show_help_text', FALSE)) {
    $help_text = t('Help text is shown in block:') .'<br /><i>'
               . variable_get('uc_cart_help_text', t('Click title to display cart contents.')) .'</i>';
  }
  else {
    $help_text = t('Help text is not shown in block.');
  }
  $sections[] = array(
    'edit' => 'admin/store/settings/cart/edit/block',
    'title' => t('Cart block'),
    'items' => array(
      t('Cart block is !option when empty.', 
        array('!option' => variable_get('uc_cart_empty_hide', FALSE) ? t('hidden') : t('shown'))),
      t('Cart block is !option by default.', 
        array('!option' => variable_get('uc_cart_expanded', FALSE) ? t('expanded') : t('collapsed'))),
      $help_text,
    ),
  );

  $output = theme('uc_settings_overview', $sections);

  return $output;
}

function uc_cart_block_edit_info() {
  $output = t('Drupal handles all the block settings forms automatically.') .'<p>'
          . t('<a href="!url">Click here</a> to goto the shopping cart block configuration page.',
              array('!url' => url('admin/build/block/configure/uc_cart/0')));

  return $output;
}

function uc_cart_cart_settings_form() {
  $form['anonymous'] = array(
    '#type' => 'fieldset',
    '#title' => t('Anonymous cart settings'),
    '#collapsible' => FALSE,
  );
  $form['anonymous']['instructions'] = array(
    '#value' => '<div>'. t('Set the length of time products remain in the cart for customers who <b>have not</b> logged in.') .'</div>',
  );
  $form['anonymous']['table1'] = array('#value' => '<table><tbody style="border: 0px;"><tr><td>');
  $form['anonymous']['uc_cart_anon_duration'] = array(
    '#type' => 'select',
    '#title' => t('Duration'),
    '#options' => drupal_map_assoc(range(1, 24)),
    '#default_value' => variable_get('uc_cart_anon_duration', '4'),
  );
  $form['anonymous']['table2'] = array('#value' => '</td><td style="padding-left: 1em;">');
  $form['anonymous']['uc_cart_anon_unit'] = array(
    '#type' => 'select',
    '#title' => t('Unit of time'),
    '#options' => array(
      'hours' => t('hour(s)'),
      'days' => t('day(s)'),
      'weeks' => t('week(s)'),
      'years' => t('year(s)'),
    ),
    '#default_value' => variable_get('uc_cart_anon_unit', 'hours'),
  );
  $form['anonymous']['table3'] = array('#value' => '</td></tr></tbody></table>');
  $form['authenticated'] = array(
    '#type' => 'fieldset',
    '#title' => t('Authenticated cart settings'),
    '#collapsible' => FALSE,
  );  
  $form['authenticated']['instructions'] = array(
    '#value' => '<div>'. t('Set the length of time products remain in the cart for customers who <b>have</b> logged in.') .'</div>',
  );
  $form['authenticated']['table1'] = array('#value' => '<table><tbody style="border: 0px;"><tr><td>');
  $form['authenticated']['uc_cart_auth_duration'] = array(
    '#type' => 'select',
    '#title' => t('Duration'),
    '#options' => drupal_map_assoc(range(1, 24)),
    '#default_value' => variable_get('uc_cart_auth_duration', '1'),
  );
  $form['authenticated']['table2'] = array('#value' => '</td><td style="padding-left: 1em;">');
  $form['authenticated']['uc_cart_auth_unit'] = array(
    '#type' => 'select',
    '#title' => t('Unit of time'),
    '#options' => array(
      'hours' => t('hour(s)'),
      'days' => t('day(s)'),
      'weeks' => t('week(s)'),
      'years' => t('year(s)'),
    ),
    '#default_value' => variable_get('uc_cart_auth_unit', 'years'),
  );
  $form['authenticated']['table3'] = array('#value' => '</td></tr></tbody></table>');

  $form['uc_minimum_subtotal'] = array(
    '#type' => 'textfield',
    '#title' => t('Minimum order subtotal'),
    '#description' => t('Minimum allowed subtotal for a cart to proceed to checkout.'),
    '#default_value' => variable_get('uc_minimum_subtotal', 0),
    '#size' => 16,
    '#field_prefix' => variable_get('uc_sign_after_amount', FALSE) ? '' : variable_get('uc_currency_sign', '$'),
    '#field_suffix' => variable_get('uc_sign_after_amount', FALSE) ? variable_get('uc_currency_sign', '$') : '',
  );

  $form['uc_add_item_redirect'] = array(
    '#type' => 'textfield',
    '#title' => t('Add to cart redirect'),
    '#description' => t('Enter the Drupal page to redirect to when a customer adds an item to their cart.<br />Enter &lt;none&gt; for no redirect.'),
    '#default_value' => variable_get('uc_add_item_redirect', 'cart'),
    '#size' => 32,
    '#field_prefix' => url(NULL, NULL, NULL, TRUE) . (variable_get('clean_url', 0) ? '' : '?q='),
  );
  $form['uc_continue_shopping_url'] = array(
    '#type' => 'textfield',
    '#title' => t('Continue shopping link URL'),
    '#description' => t('Enter the Drupal page for the link to continue shopping from the cart view page.<br />Enter &lt;none&gt; for no link to appear.'),
    '#default_value' => variable_get('uc_continue_shopping_url', ''),
    '#size' => 32,
    '#field_prefix' => url(NULL, NULL, NULL, TRUE) . (variable_get('clean_url', 0) ? '' : '?q='),
  );
  $form['uc_continue_shopping_text'] = array(
    '#type' => 'textfield',
    '#title' => t('Continue shopping link text'),
    '#description' => t('Enter the text for the continue shopping link.'),
    '#default_value' => variable_get('uc_continue_shopping_text', t('Continue shopping')),
  );
  $form['uc_cart_breadcrumb_url'] = array(
    '#type' => 'textfield',
    '#title' => t('Default cart breadcrumb URL'),
    '#description' => t('Enter the Drupal page linked to in the default breadcrumb on the cart view page.'),
    '#default_value' => variable_get('uc_cart_breadcrumb_url', ''),
    '#size' => 32,
    '#field_prefix' => url(NULL, NULL, NULL, TRUE) . (variable_get('clean_url', 0) ? '' : '?q='),
  );
  $form['uc_cart_breadcrumb_text'] = array(
    '#type' => 'textfield',
    '#title' => t('Default cart breadcrumb text'),
    '#description' => t('Enter the text for the default breadcrumb on the cart page.'),
    '#default_value' => variable_get('uc_cart_breadcrumb_text', t('Home')),
  );

  return system_settings_form($form);
}

function uc_cart_cart_settings_form_validate($form_id, $form_values) {
  if (!is_numeric($form_values['uc_minimum_subtotal']) || $form_values['uc_minimum_subtotal'] < 0 || $form_values['uc_minimum_subtotal'] === '-0') {
    form_set_error('uc_minimum_subtotal', t('Minimum order subtotal should be a non-negative number.'));
  }
}

function uc_cart_cart_panes_form() {
  $panes = uc_cart_cart_pane_list(NULL);

  $form['panes'] = array(
    '#theme' => 'uc_pane_sort_table',
    '#pane_prefix' => 'uc_cap',
  );
  foreach($panes as $pane) {
    $form['panes'][$pane['id']]['uc_cap_'. $pane['id'] .'_enabled'] = array(
      '#type' => 'checkbox',
      '#default_value' => $pane['enabled'],
    );
    $form['panes'][$pane['id']]['title'] = array(
      '#value' => $pane['title'],
    );
    $form['panes'][$pane['id']]['uc_cap_'. $pane['id'] .'_weight'] = array(
      '#type' => 'weight',
      '#delta' => 10,
      '#default_value' => $pane['weight'],
    );
  }

  return system_settings_form($form);
}

function uc_cart_checkout_settings_overview() {
  $sections[] = array(
    'edit' => 'admin/store/settings/checkout/edit',
    'title' => t('Checkout settings'),
    'items' => array(
      t('Next buttons on checkout panes say %text.', array('%text' => variable_get('uc_checkout_next_button', t('Next')))),
      t('Review order button on checkout page says %text.', array('%text' => variable_get('uc_checkout_review_button', t('Review Order')))),
      t('Submit order button on review page says %text.', array('%text' => variable_get('uc_checkout_submit_button', t('Submit Order')))),
      t('Checkout panes are !option.', array('!option' => variable_get('uc_use_next_buttons', TRUE) ? t('collapsed with next buttons') : t('expanded by default'))),
      t('New customers !option.', array('!option' => variable_get('uc_new_customer_email', TRUE) ? t('receive an e-mail with their account details') : t('will only see their details in their initial order e-mail.'))),
      t('Anonymous checkout is !status.', array('!status' => variable_get('uc_checkout_anonymous', TRUE) ? t('enabled') : t('disabled'))),
    ),
  );

  $panes = _checkout_pane_list();
  foreach ($panes as $pane) {
    $items[] = t('!title is !enabled.', array('!title' => $pane['title'], '!enabled' => $pane['enabled'] ? t('enabled') : t('disabled')));
  }
  $sections[] = array(
    'edit' => 'admin/store/settings/checkout/edit/panes',
    'title' => t('Checkout panes (in display order)'),
    'items' => $items,
  );

  $items = array();
  $messages = array(
    'checkout_instructions' => array(
      'title' => t('Checkout instructions are'),
      'variable' => 'uc_checkout_instructions',
    ),
    'review_instructions' => array(
      'title' => t('Review instructions are'),
      'variable' => 'uc_checkout_review_instructions',
    ),
    'completion_message' => array(
      'title' => t('Completion message is'),
      'variable' => 'uc_msg_order_submit',
    ),
    'completion_logged_in' => array(
      'title' => t('Completion text for logged in users is'),
      'variable' => 'uc_msg_order_logged_in',
    ),
    'completion_existing_user' => array(
      'title' => t('Completion text for not logged in users is'),
      'variable' => 'uc_msg_order_existing_user',
    ),
    'completion_new_user' => array(
      'title' => t('Completion text for totally new users is'),
      'variable' => 'uc_msg_order_new_user',
    ),
    'continue_shopping' => array(
      'title' => t('Continue shopping text is'),
      'variable' => 'uc_msg_continue_shopping',
    ),
  );
  foreach ($messages as $message_id => $data) {
    $current = variable_get($data['variable'], uc_get_message($message_id));
    if (empty($current)) {
      $items[] = t('!title not set.', array('!title' => $data['title']));
    }
    else {
      $items[] = t('!title set.', array('!title' => $data['title']));
    }
  }
  $sections[] = array(
    'edit' => 'admin/store/settings/checkout/edit/messages',
    'title' => t('Checkout messages'),
    'items' => $items,
  );

  $output = theme('uc_settings_overview', $sections);

  return $output;
}

function uc_cart_checkout_settings_form() {
  $form['uc_checkout_next_button'] = array(
    '#type' => 'textfield',
    '#title' => t('Next Pane Button Text'),
    '#description' => t('Change the text on the checkout pane buttons to expand the next pane.'),
    '#default_value' => variable_get('uc_checkout_next_button', t('Next')),
  );
  $form['uc_checkout_review_button'] = array(
    '#type' => 'textfield',
    '#title' => t('Review Order Button Text'),
    '#description' => t('Change the text on the review order button at the bottom of the checkout screen.'),
    '#default_value' => variable_get('uc_checkout_review_button', t('Review Order')),
  );
  $form['uc_checkout_submit_button'] = array(
    '#type' => 'textfield',
    '#title' => t('Submit Order Button Text'),
    '#description' => t('Change the text on the submit order button at the bottom of the review screen.'),
    '#default_value' => variable_get('uc_checkout_submit_button', t('Submit Order')),
  );
  $form['uc_use_next_buttons'] = array(
    '#type' => 'checkbox',
    '#title' => t('Use collapsing checkout panes with next buttons during checkout.'),
    '#default_value' => variable_get('uc_use_next_buttons', TRUE),
  );
  $form['uc_new_customer_email'] = array(
    '#type' => 'checkbox',
    '#title' => t('Send new customers a separate e-mail with their account details.'),
    '#default_value' => variable_get('uc_new_customer_email', TRUE),
  );
  $form['uc_checkout_anonymous'] = array(
    '#type' => 'checkbox',
    '#title' => t('Enable anonymous checkout (users can checkout without logging in).'),
    '#default_value' => variable_get('uc_checkout_anonymous', TRUE),
  );

  return system_settings_form($form);
}

function uc_cart_checkout_panes_form() {
  $panes = _checkout_pane_list();

  $form['panes'] = array(
    '#theme' => 'uc_pane_sort_table',
    '#pane_prefix' => 'uc_pane',
  );
  foreach ($panes as $pane) {
    $form['panes'][$pane['id']]['uc_pane_'. $pane['id'] .'_enabled'] = array(
      '#type' => 'checkbox',
      '#default_value' => $pane['enabled'],
    );
    $form['panes'][$pane['id']]['title'] = array(
      '#value' => $pane['title'],
    );
    $form['panes'][$pane['id']]['uc_pane_'. $pane['id'] .'_weight'] = array(
      '#type' => 'weight',
      '#default_value' => $pane['weight'],
    );
  }

  return system_settings_form($form);
}

function uc_cart_checkout_messages_form() {
  $form['uc_checkout_instructions'] = array(
    '#type' => 'textarea',
    '#title' => t('Checkout Instructions'),
    '#description' => t('Provide instructions for customers at the top of the checkout screen.'),
    '#default_value' => variable_get('uc_checkout_instructions', ''),
    '#rows' => 3,
  );
  $form['uc_checkout_review_instructions'] = array(
    '#type' => 'textarea',
    '#title' => t('Checkout Instructions'),
    '#description' => t('Provide instructions for customers at the top of the checkout review screen.'),
    '#default_value' => variable_get('uc_checkout_review_instructions', uc_get_message('review_instructions')),
    '#rows' => 3,
  );
  $form['uc_msg_order_submit'] = array(
    '#type' => 'textarea',
    '#title' => t('Checkout Message Header'),
    '#description' => t('Header for message displayed after a user checks out.'),
    '#default_value' => variable_get('uc_msg_order_submit', uc_get_message('completion_message')),
    '#rows' => 3,
  );
  $form['template_help'] = array(
    '#value' => '<div>'. t("In the following three boxes, you may use !site to print the site name, !new_username for the username of a newly created account, and !new_password for that account's password.") .'</div>',
  );
  $form['uc_msg_order_logged_in'] = array(
    '#type' => 'textarea',
    '#title' => t('Checkout Completion for Logged-in Users'),
    '#description' => t('Message displayed upon checkout for a user who has logged in.'),
    '#default_value' => variable_get('uc_msg_order_logged_in', uc_get_message('completion_logged_in')),
    '#rows' => 3,
  );
  $form['uc_msg_order_existing_user'] = array(
    '#type' => 'textarea',
    '#title' => t('Checkout Completion for Existing Users'),
    '#description' => t("Message displayed upon checkout for a user who has an account but wasn't logged in."),
    '#default_value' => variable_get('uc_msg_order_existing_user', uc_get_message('completion_existing_user')),
    '#rows' => 3,
  );
  $form['uc_msg_order_new_user'] = array(
    '#type' => 'textarea',
    '#title' => t('Checkout Completion for New Users'),
    '#description' => t('Message displayed upon checkout for a new user whose account was just created.'),
    '#default_value' => variable_get('uc_msg_order_new_user', uc_get_message('completion_new_user')),
    '#rows' => 3,
  );
  $form['uc_msg_continue_shopping'] = array(
    '#type' => 'textarea',
    '#title' => t('Continue Shopping Message'),
    '#description' => t('Message displayed upon checkout to direct customers to another part of your site.'),
    '#default_value' => variable_get('uc_msg_continue_shopping', uc_get_message('continue_shopping')),
    '#rows' => 3,
  );

  return system_settings_form($form);
}

/**
 * The cart view page lets you view/modify the cart contents or procede to checkout.
 */
function uc_cart_view() {
  if (!is_null($_SESSION['cart_order'])) {
    unset($_SESSION['cart_order']);
  }

  $items = uc_cart_get_contents();

  if (empty($items)) {
    return '<p>'. t('There are no products in your shopping cart.') . '</p>';
  }

  $panes = uc_cart_cart_pane_list($items);
  foreach ($panes as $pane) {
    $output .= $pane['body'];
  }

  if (isset($_SESSION['last_url'])) {
    drupal_set_breadcrumb(array(l(t('Back'), check_plain($_SESSION['last_url']))));
    unset($_SESSION['last_url']);
  }
  else {
    $link = l(variable_get('uc_cart_breadcrumb_text', t('Home')), variable_get('uc_cart_breadcrumb_url', '<front>'));
    drupal_set_breadcrumb(array($link));
  }

  return $output;
}

/**
 * Display a page allowing the customer to view the contents of his or her cart.
 *
 * Handles simple or complex objects. Some cart items may have a list of products
 * that they represent. These are displayed but are not able to be changed by the
 * customer.
 */
function uc_cart_view_form($items = NULL) {
  $form['items'] = array('#tree' => TRUE);

  $i = 0;
  foreach ($items as $item) {
    $display_item = module_invoke($item->module, 'cart_display', $item);
    if (!empty($display_item)){
      $form['items'][$i] = $display_item;
      $i++;
    }
  }

  $form['update'] = array(
    '#type' => 'submit',
    '#value' => t('Update cart'),
  );
  $form['checkout'] = array(
    '#type' => 'submit',
    '#value' => t('Checkout'),
  );

  return $form;
}

function theme_uc_cart_view_form($form) {
  drupal_add_css(drupal_get_path('module', 'uc_cart') .'/uc_cart.css');

  $output = '<div class="solid-border">'
          . tapir_get_table('uc_cart_view_table', $form) .'</div>';

  if (($page = variable_get('uc_continue_shopping_url', '')) != '<none>') {
    $continue_shopping_link = l(variable_get('uc_continue_shopping_text', t('Continue shopping')), $page);
  }

  $output .= '<br /><table class="solid-border full-width"><tr><td>'
           . $continue_shopping_link .'<td><td align="right">'
           . drupal_render($form['order_id']) . drupal_render($form['form_id'])
           . drupal_render($form['form_token']) . drupal_render($form['update'])
           . drupal_render($form['checkout']) .'</td></tr></table>';

  return $output;
}

function uc_cart_view_table($op, &$form) {
  switch ($op) {
    case 'fields':
      $fields[] = array('name' => 'remove', 'title' => t('Remove'),
                        'weight' => 0, 'enabled' => TRUE, 'locked' => TRUE);
      $fields[] = array('name' => 'image', 'title' => t('Products'),
                        'weight' => 1, 'enabled' => TRUE);
      $fields[] = array('name' => 'desc', 'title' => '', 'weight' => 2,
                        'enabled' => TRUE);
      $fields[] = array('name' => 'qty', 'title' => t('Qty.'), 'weight' => 3,
                        'enabled' => TRUE);
      $fields[] = array('name' => 'total', 'title' => t('Total'), 'weight' => 4,
                        'enabled' => TRUE);
      return $fields;

    case 'data':
      foreach (element_children($form['items']) as $i){
        $nid = $form['items'][$i]['nid']['#value'];
        $subtotal += $form['items'][$i]['#total'];
        $desc = drupal_render($form['items'][$i]['title']) .'<br />';
        $desc .= drupal_render($form['items'][$i]['options']);

        $data['remove'][] = array('data' => drupal_render($form['items'][$i]['remove']), 'align' => 'center');
        $data['image'][] = array('data' => uc_product_get_picture($nid, 'cart'));
        $data['desc'][] = array('data' => $desc, 'width' => '100%');
        $data['qty'][] = array('data' => $form['items'][$i]['qty'] ? drupal_render($form['items'][$i]['qty']) : '');
        $data['total'][] = array('data' => uc_currency_format($form['items'][$i]['#total']), 'nowrap' => 'nowrap');
        $data['#attributes'][] = array('valign' => 'top');
      }
      $title = $form['check-all-items']['#title'];
      $form['check-all-items']['#title'] = NULL;
      $data['#footer'] = array(
        array('data' => drupal_render($form['check-all-items']), 'align' => 'center'),
        array('data' => '<b>'. $title .'</b>'),
        array('data' => '<strong>'. t('Subtotal:') .'</strong> '. uc_currency_format($subtotal), 'colspan' => 6, 'align' => 'right', 'nowrap' => 'nowrap')
      );
      return $data;

    case 'attributes':
      $attributes = array('width' => '100%');
      return $attributes;
  }
}

function uc_cart_view_form_submit($form_id, $form_values) {
  switch ($form_values['op']) {
    case t('Update cart'):
      cache_clear_all();
      uc_cart_update_item_object((object)$form_values);
      drupal_set_message('Your cart has been updated.');
      return 'cart';

    case t('Checkout'):
      cache_clear_all();
      uc_cart_update_item_object((object)$form_values);
      if (($min = variable_get('uc_minimum_subtotal', 0)) > 0) {
        $subtotal = 0;
        $items = uc_cart_get_contents();
        foreach ($items as $item) {
          $data = module_invoke($item->module, 'cart_display', $item);
          if (!empty($data)){
            $subtotal += $data['#total'];
          }
        }
        if ($subtotal < $min) {
          drupal_set_message(variable_get('uc_minimum_subtotal_text', t('The minimum order subtotal for checkout is !min.', array('!min' => uc_currency_format($min)))), 'error');
          return 'cart';
        }
      }
      return 'cart/checkout';
  }
}

/**
 * Display the cart checkout page built of checkout panes from enabled modules.
 */
function uc_cart_checkout() {
  global $user;
  $items = uc_cart_get_contents();

  if (count($items) == 0) {
    drupal_goto('cart');
  }

  if(!$user->uid) {
    if(!variable_get('uc_checkout_anonymous', TRUE)) {
      drupal_set_message(t('You must login before you can proceed to checkout.'));
      drupal_set_message(t('If you do not have an account, you can <a href="!base_pathuser/register">click here</a> to create one.', array('!base_path' => base_path())));
      drupal_goto('user');
    }
  }

  uc_add_base_path_js();
  $list = _line_item_list();
  foreach ($list as $line_item) {
    if (function_exists($line_item['callback'])) {
      $line_item['callback']('cart-preview', $items);
    }
  }

  $output = drupal_get_form('uc_cart_checkout_form');

  return $output;
}

function uc_cart_checkout_form() {
  if ($_POST['op'] == t('Cancel')) {
    if (intval($_SESSION['cart_order']) > 0) {
      unset($_SESSION['cart_order']);
    }
    drupal_goto('cart');
  }

  global $user;
  $referer = referer_uri();
  if (substr($referer, -20, 20) == 'cart/checkout/review'
   || substr($referer, -13, 13) == 'cart/checkout') {
    if (!($order = uc_order_load($_SESSION['cart_order']))) {
      unset($_SESSION['cart_order']);
      $order = NULL;
    }
    if ($order->order_status != 0 || ($user->uid && $user->uid != $order->uid)) {
      $order = NULL;
    }
  }
  else {
    unset($_SESSION['cart_order']);
  }

  $form['panes'] = array('#tree' => TRUE);
  $panes = _checkout_pane_list();

  foreach ($panes as $pane) {
    if (variable_get('uc_pane_'. $pane['id'] .'_enabled', TRUE)) {
      $func = $pane['callback'];
      $return = $func('view', $order, NULL);
      $form['panes'][$pane['id']] = $return->fields;
    }
  }
  unset($_SESSION['expanded_panes']);

  $form['cart_contents'] = array('#type' => 'hidden', '#value' => serialize(uc_cart_get_contents()));
  $form['cancel'] = array('#type' => 'submit', '#submit' => FALSE, '#value' => t('Cancel'));
  $form['continue'] = array('#type' => 'submit', '#value' => variable_get('uc_checkout_review_button', t('Review Order')));

  return $form;
}

function theme_uc_cart_checkout_form($form) {
  drupal_add_css(drupal_get_path('module', 'uc_cart') .'/uc_cart.css');

  $output = variable_get('uc_checkout_instructions', '') .'<p>';
  foreach (element_children($form['panes']) as $pane_id) {
    if (function_exists(($func = _checkout_pane_data($pane_id, 'callback')))) {
      /*if (substr(PHP_VERSION, 0, 1) == 4) {
        $result = $func('theme', &$form, NULL);
      }
      else {
        $result = uc_func_call($func, 'theme', $form, NULL);
      }*/
      $result = $func('theme', $form, NULL);
      if (!empty($result)) {
        $output .= $result;
        $form['panes'][$pane_id] = array();
      }
      else {
        $output .= drupal_render($form['panes'][$pane_id]);
      }
    }
    else {
      $output .= drupal_render($form['panes'][$pane_id]);
    }
  }

  $output .= '<p><table width="100%" align="center" cellpadding="5" style="border-style: solid; border-width: 1px; border-color: #bbb;">'
           . '<tr><td align="right">'. drupal_render($form) .'</td></tr></table></p>';

  return $output;
}

function uc_cart_checkout_form_submit($form_id, $form_values) {
  global $user;

  //switch ($form_values['op']) {
  //  case variable_get('uc_checkout_review_button', t('Review Order')):
      if (is_null($_SESSION['cart_order']) || $_SESSION['cart_order'] == 0) {
        $order = uc_order_new($user->uid);
        $_SESSION['cart_order'] = $order->order_id;
      }
      else {
        $order = new stdClass();
        $order->order_id = $_SESSION['cart_order'];
      }

      $valid = TRUE;
      foreach($form_values['panes'] as $key => $value) {
        $func = _checkout_pane_data($key, 'callback');
        /*if (substr(PHP_VERSION, 0, 1) == 4) {
          $isvalid = $func('process', &$order, $value);
        }
        else {
          $isvalid = uc_func_call($func, 'process', $order, $value);
        }*/
        $isvalid = $func('process', $order, $value);
        if ($isvalid === FALSE) {
          $_SESSION['expanded_panes'][] = $key;
          $valid = FALSE;
        }
      }

      $order->products = unserialize($form_values['cart_contents']);

      uc_order_save($order);

      if ($valid === FALSE) {
        return 'cart/checkout';
      }

      $_SESSION['do_review'] = TRUE;
      return 'cart/checkout/review';
  //}
}

/**
 * Allow a customer to review their order before finally submitting it.
 */
function uc_cart_checkout_review() {
  $form_output = drupal_get_form('uc_cart_checkout_review_form');

  if ($_SESSION['do_review'] !== TRUE) {
    drupal_goto('cart');
  }

  $_SESSION['do_review'] = FALSE;
  unset($_SESSION['do_review']);

  $order_id = intval($_SESSION['cart_order']);

  $order = uc_order_load($order_id);
  if ($order === FALSE) {
    $_SESSION['cart_order'] = NULL;
    unset($_SESSION['cart_order']);
    drupal_goto('cart');
  }

  drupal_add_css(drupal_get_path('module', 'uc_cart') .'/uc_cart.css');

  $output = '<p>'. variable_get('uc_checkout_review_instructions',
            t('Please review the details of your order and click !submit if all the information is correct.  You may use the Back button to make changes to your order if necessary.',
              array('!submit' => variable_get('uc_checkout_submit_button', t('Submit Order'))))) .'</p>';
  $output .= '<table class="order-review-table">';

  $panes = _checkout_pane_list();
  foreach ($panes as $pane) {
    if (variable_get('uc_pane_'. $pane['id'] .'_enabled', TRUE)) {
      $func = $pane['callback'];
      if (function_exists($func)) {
        $return = $func('review', $order, NULL);
        if (!is_null($return)) {
          $output .= '<tr class="pane-title-row"><td colspan="2">'
                   . $pane['title'] .'</td></tr>';
          if (is_array($return)) {
            foreach ($return as $row) {
              if (is_array($row)) {
                if (isset($row['border'])) {
                  $border = ' class="row-border-'. $row['border'] .'"';
                }
                else {
                  $border = '';
                }
                $output .= '<tr valign="top"'. $border .'><td class="title-col" '
                          .'nowrap>'. $row['title'] .':</td><td class="data-col">'
                         . $row['data'] .'</td></tr>';
              }
              else {
                $output .= '<tr valign="top"><td colspan="2">'. $row .'</td></tr>';
              }
            }
          }
          else {
            $output .= '<tr valign="top"><td colspan="2">'. $return .'</td></tr>';
          }
        }
      }
    }
  }

  $output .= '<tr class="review-button-row"><td colspan="2">'. $form_output .'</td></tr></table>';

  return $output;
}

function uc_cart_checkout_review_form() {
  if ($_POST['op'] == t('Back')) {
    cache_clear_all();
    drupal_goto('cart/checkout');
  }

  $form['back'] = array('#type' => 'button', '#value' => t('Back'));
  $form['submit'] = array('#type' => 'submit', '#value' => variable_get('uc_checkout_submit_button', t('Submit Order')));

  return $form;
}

function uc_cart_checkout_review_form_submit($form_id, $form_values) {
  switch ($form_values['op']) {
    case variable_get('uc_checkout_submit_button', t('Submit Order')):
      // Invoke hook_order($op = 'submit') to test to make sure the order can
      // be completed... used for auto payment in uc_credit.module.
      $pass = module_invoke_all('order', 'submit', uc_order_load($_SESSION['cart_order']), NULL);

      foreach ($pass as $result) {
        $msg_type = 'status';
        if ($result['pass'] === FALSE) {
          $error = TRUE;
          $msg_type = 'error';
        }
        if (!empty($result['message'])) {
          drupal_set_message($result['message'], $msg_type);
        }
      }

      if ($error === TRUE) {
        $_SESSION['do_review'] = TRUE;
        return 'cart/checkout/review';
      }
      else {
        $_SESSION['do_complete'] = TRUE;
        return 'cart/checkout/complete';
      }
  }
}

function uc_cart_checkout_complete() {
  if (!$_SESSION['do_complete']) {
    drupal_goto('cart');
  }

  $order = uc_order_load($_SESSION['cart_order']);

  // Logic to create new user if necessary:
  if ($order->uid == 0) {
    $result = db_query("SELECT uid FROM {users} WHERE mail = '%s'", $order->primary_email);
    if ($user = db_fetch_object($result)) {
      $order->uid = $user->uid;
      db_query("UPDATE {uc_orders} SET uid = %d WHERE order_id = %d", $order->uid, $order->order_id);
      $message_type = 'existing_user';
    }
    else {
      $fields = array(
        'name' => $order->primary_email,
        'mail' => $order->primary_email,
        'init' => $order->primary_email,
        'pass' => user_password(variable_get('uc_pwd_length', 6)),
        'roles' => array(),
        'status' => 1,
      );
      $account = user_save('', $fields);
      if (variable_get('uc_new_customer_email', TRUE)) {
        $variables = array('!username' => $fields['name'], '!site' => variable_get('site_name', 'Drupal'), '!password' => $fields['pass'], '!uri' => $base_url, '!uri_brief' => substr($base_url, strlen('http://')), '!mailto' => $fields['mail'], '!date' => format_date(time()), '!login_uri' => url('user', NULL, NULL, TRUE), '!edit_uri' => url('user/'. $account->uid .'/edit', NULL, NULL, TRUE), '!login_url' => user_pass_reset_url($account));
        $from = variable_get('uc_store_email_from', ini_get('sendmail_from'));
        $subject = _user_mail_text('welcome_subject', $variables);
        $body = _user_mail_text('welcome_body', $variables);
        drupal_mail('user-register-welcome', $order->primary_email, $subject, $body, $from);
      }
      $order->uid = $account->uid;
      $_SESSION['new_user'] = array('name' => $fields['name'], 'pass' => $fields['pass']);
      db_query("UPDATE {uc_orders} SET uid = %d WHERE order_id = %d", $order->uid, $order->order_id);
      $message_type = 'new_user';
    }
  }
  else {
    $message_type = 'logged_in';
  }

  // Move an order's status from "In Checkout" to "Pending"
  if ($order->order_status < 1) {
    uc_order_update_status($_SESSION['cart_order'], 1);
  }

  // Add a comment to let sales team know this came in through the site.
  uc_order_comment_save($_SESSION['cart_order'], 0, 'Order created through website.', 'admin');

  // Empty that cart...
  uc_cart_empty(uc_cart_get_id());

  // Clear our the session variables used to force the cart workflow.
  $_SESSION['cart_order'] = NULL;
  $_SESSION['do_complete'] = NULL;

  $output = variable_get('uc_msg_order_submit', t('Your order is complete!'));
  $show_message = variable_get('uc_msg_order_'. $message_type, uc_get_message('completion_'. $message_type));
  if ($show_message != '') {
    $variables['!site'] = variable_get('uc_store_name', t('our store'));
    $variables['!new_username'] = check_plain($_SESSION['new_user']['name']);
    $variables['!new_password'] = check_plain($_SESSION['new_user']['pass']);
    $output .= '<p>'. strtr($show_message, $variables) .'</p>';
  }
  $output .= '<p>'. variable_get('uc_msg_continue_shopping',
             l(t('Click to return to the front page.'), '<front>')) .'</p>';

  unset($_SESSION['new_user']);

  return $output;
}


/*******************************************************************************
 * Module and Helper Functions
 ******************************************************************************/

/**
 * Display the cart contents for review during checkout.
 */
function uc_checkout_pane_cart($op) {
  switch ($op) {
    case 'view':
      $pane = uc_cart_checkout_new_pane('cart', FALSE);
      $pane->fields['pane']['cart'] = array(
        '#value' => _cart_review_table(),
        '#weight' => variable_get('uc_pane_cart_field_cart_weight', 2),
        '#prefix' => '<div class="cart-table">',
        '#suffix' => '</div>',
      );
      return $pane;
    case 'review':
      $items = uc_cart_get_contents();
      $output = '<table>';
      foreach ($items as $item) {
        $rows = array();
        foreach($item->options as $option){
          $rows[] = $option['attribute'] .': '. $option['name'];
        }
        $desc = $item->title . theme('item_list', $rows, NULL, 'ul', array('class' => 'cart-options'));
        $output .= '<tr valign="top"><td>'. $item->qty .'x</td><td width="100%">'. $desc
                  .'</td><td nowrap="nowrap">'. uc_currency_format($item->price) .'</td></tr>';
      }
      $output .= '</table>';
      $review[] = $output;
      return $review;
  }
}

/**
 * Get the user's email address for login.
 */
function uc_checkout_pane_customer($op, &$arg1, $arg2) {
  global $user;

  switch ($op) {
    case 'view':
      $pane = uc_cart_checkout_new_pane('customer');
      if ($user->uid) {
        $pane->fields['pane']['description'] = uc_cart_checkout_pane_description('customer',
          t('Order information will be sent to your account email listed below.')
         .'<br />'. t('You can edit your account information <a href="!url">here</a>.', array('!url' => url('user/'. $user->uid .'/edit'))));
      }
      else {
        $pane->fields['pane']['description'] = uc_cart_checkout_pane_description('customer',
          t('Enter a valid email address for this order or <a href="!url">click here</a> to login with an existing account and return to checkout.',
            array('!url' => url('user/login'))));
      }
      $email = (is_null($arg1) || empty($arg1->primary_email)) ? $user->mail : $arg1->primary_email;
      $pane->fields['pane']['primary_email'] = uc_textfield(t('E-mail Address'), $email, TRUE, NULL, 64);
      $pane->fields['pane']['primary_email']['#disabled'] = ($user->uid) ? TRUE : FALSE;
      $pane->fields['pane']['continue'] = uc_cart_checkout_next_button('customer', $pane->next);
      return $pane;

    case 'review':
      $review[] = array('title' => t('E-mail'), 'data' => $arg1->primary_email);
      return $review;

    case 'process':
      $arg1->primary_email = $arg2['pane']['primary_email'];
      if ($user->uid) {
        $arg1->uid = $user->uid;
      }
      return TRUE;
  }
}

/**
 * Get the delivery information.
 */
function uc_checkout_pane_delivery($op, &$arg1, $arg2) {
  global $user;

  switch ($op) {
    case 'view':
      $pane = uc_cart_checkout_new_pane('delivery');
      $pane->fields['pane']['description'] = uc_cart_checkout_pane_description('delivery', t('Fill in the appropriate delivery information here:'));
      if ($user->uid) {
        $addresses = uc_select_address($user->uid, 'delivery', 'apply_address(\'delivery\', this.value);', t('Saved addresses'), TRUE);
        if (!empty($addresses)) {
          $pane->fields['pane']['delivery_address_select'] = $addresses;
        }
      }
      if (uc_address_field_enabled('first_name')) {
        $pane->fields['pane']['delivery_first_name'] = uc_textfield(uc_get_field_name('first_name'), $arg1->delivery_first_name);
      }
      if (uc_address_field_enabled('last_name')) {
        $pane->fields['pane']['delivery_last_name'] = uc_textfield(uc_get_field_name('last_name'), $arg1->delivery_last_name);
      }
      if (uc_address_field_enabled('company')) {
        $pane->fields['pane']['delivery_company'] = uc_textfield(uc_get_field_name('company'), $arg1->delivery_company, FALSE, NULL, 64);
      }
      if (uc_address_field_enabled('street1')) {
        $pane->fields['pane']['delivery_street1'] = uc_textfield(uc_get_field_name('street1'), $arg1->delivery_street1, TRUE, NULL, 64);
      }
      if (uc_address_field_enabled('street2')) {
        $pane->fields['pane']['delivery_street2'] = uc_textfield(uc_get_field_name('street2'), $arg1->delivery_street2, FALSE, NULL, 64);
      }
      if (uc_address_field_enabled('city')) {
        $pane->fields['pane']['delivery_city'] = uc_textfield(uc_get_field_name('city'), $arg1->delivery_city);
      }
      if (uc_address_field_enabled('zone')) {
        if (isset($_POST['panes']['delivery']['pane']['delivery_country'])) {
          $country_id = intval($_POST['panes']['delivery']['pane']['delivery_country']);
        }
        else {
          $country_id = $arg1->delivery_country;
        }
        $pane->fields['pane']['delivery_zone'] = uc_zone_select(uc_get_field_name('zone'), $arg1->delivery_zone, NULL, $country_id);
      }
      if (uc_address_field_enabled('country')) {
        $pane->fields['pane']['delivery_country'] = uc_country_select(uc_get_field_name('country'), $arg1->delivery_country);
      }
      if (uc_address_field_enabled('postal_code')) {
        $pane->fields['pane']['delivery_postal_code'] = uc_textfield(uc_get_field_name('postal_code'), $arg1->delivery_postal_code, TRUE, NULL, 10, 10);
      }
      if (uc_address_field_enabled('phone')) {
        $pane->fields['pane']['delivery_phone'] = uc_textfield(uc_get_field_name('phone'), $arg1->delivery_phone, TRUE, NULL, 32, 16);
      }
      $pane->fields['pane']['continue'] = uc_cart_checkout_next_button('delivery', $pane->next);
      return $pane;

    case 'theme':
      if ($arg1['panes']['delivery']['pane']['#collapsed']) {
        $collapsed = ' collapsed';
      }
      $output = '<div class="delivery-pane"><fieldset class=" collapsible'
              . $collapsed .'"><legend>'. t('Delivery Information') .'</legend>'
              . drupal_render($arg1['panes']['delivery']['pane']['description'])
              .'<table class="pane-table" cellpadding="2">';
      $req = '<span class="form-required">*</span>';

      foreach (element_children($arg1['panes']['delivery']['pane']) as $field) {
        if (substr($field, 0, 9) == 'delivery_' && $arg1['panes']['delivery']['pane'] !== NULL) {
          $title = $arg1['panes']['delivery']['pane'][$field]['#title'] .':';
          unset($arg1['panes']['delivery']['pane'][$field]['#title']);
          if (substr($field, 9) == 'street1') {
            $title = uc_get_field_name('street') .':';
          }
          elseif (substr($field, 9) == 'street2') {
            $title = ' ';
          }
          $output .= '<tr><td class="field-label">';
          if ($arg1['panes']['delivery']['pane'][$field]['#required']) {
            $output .= $req;
          }
          $output .= $title .'</td><td>'
                   . drupal_render($arg1['panes']['delivery']['pane'][$field])
                    .'</td></tr>';
        }
      }
      $output .= '</table>';

      foreach (element_children($arg1['panes']['delivery']['pane']) as $element) {
        $output .= drupal_render($arg1['panes']['delivery']['pane'][$element]);
      }
      $output .= '</fieldset></div>';
      return $output;

    case 'review':
      $review[] = array('title' => t('Address'), 'data' => uc_order_address($arg1, 'delivery', FALSE));
      $review[] = array('title' => t('Phone'), 'data' => $arg1->delivery_phone);
      return $review;

    case 'process':
      $arg1->delivery_first_name = $arg2['pane']['delivery_first_name'];
      $arg1->delivery_last_name = $arg2['pane']['delivery_last_name'];
      $arg1->delivery_company = $arg2['pane']['delivery_company'];
      $arg1->delivery_street1 = $arg2['pane']['delivery_street1'];
      $arg1->delivery_street2 = $arg2['pane']['delivery_street2'];
      $arg1->delivery_city = $arg2['pane']['delivery_city'];
      $arg1->delivery_zone = $arg2['pane']['delivery_zone'];
      $arg1->delivery_postal_code = $arg2['pane']['delivery_postal_code'];
      $arg1->delivery_country = $arg2['pane']['delivery_country'];
      $arg1->delivery_phone = $arg2['pane']['delivery_phone'];
      return TRUE;
  }
}

/**
 * Get the billing information.
 */
function uc_checkout_pane_billing($op, &$arg1, $arg2) {
  global $user;

  switch ($op) {
    case 'view':
      $pane = uc_cart_checkout_new_pane('billing');
      $pane->fields['pane']['description'] = uc_cart_checkout_pane_description('billing', t('Fill in the appropriate billing information here:'));

      drupal_add_js(drupal_get_path('module', 'uc_cart') .'/uc_cart.js');
      if ($user->uid) {
        $addresses = uc_select_address($user->uid, 'billing', 'apply_address(\'billing\', this.value);', t('Saved addresses'), TRUE);
        if (!empty($addresses)) {
          $pane->fields['pane']['billing_address_select'] = $addresses;
        }
      }
      if (uc_address_field_enabled('first_name')) {
        $pane->fields['pane']['billing_first_name'] = uc_textfield(uc_get_field_name('first_name'), $arg1->billing_first_name);
      }
      if (uc_address_field_enabled('last_name')) {
        $pane->fields['pane']['billing_last_name'] = uc_textfield(uc_get_field_name('last_name'), $arg1->billing_last_name);
      }
      if (uc_address_field_enabled('company')) {
        $pane->fields['pane']['billing_company'] = uc_textfield(uc_get_field_name('company'), $arg1->billing_company, FALSE, NULL, 64);
      }
      if (uc_address_field_enabled('street1')) {
        $pane->fields['pane']['billing_street1'] = uc_textfield(uc_get_field_name('street1'), $arg1->billing_street1, TRUE, NULL, 64);
      }
      if (uc_address_field_enabled('street2')) {
        $pane->fields['pane']['billing_street2'] = uc_textfield(uc_get_field_name('street2'), $arg1->billing_street2, FALSE, NULL, 64);
      }
      if (uc_address_field_enabled('city')) {
        $pane->fields['pane']['billing_city'] = uc_textfield(uc_get_field_name('city'), $arg1->billing_city);
      }
      if (uc_address_field_enabled('zone')) {
        if (isset($_POST['panes']['billing']['pane']['billing_country'])) {
          $country_id = intval($_POST['panes']['billing']['pane']['billing_country']);
        }
        else {
          $country_id = $arg1->billing_country;
        }
        $pane->fields['pane']['billing_zone'] = uc_zone_select(uc_get_field_name('zone'), $arg1->billing_zone, NULL, $country_id);
      }
      if (uc_address_field_enabled('country')) {
        $pane->fields['pane']['billing_country'] = uc_country_select(uc_get_field_name('country'), $arg1->billing_country);
      }
      if (uc_address_field_enabled('postal_code')) {
        $pane->fields['pane']['billing_postal_code'] = uc_textfield(uc_get_field_name('postal_code'), $arg1->billing_postal_code, TRUE, NULL, 10, 10);
      }
      if (uc_address_field_enabled('phone')) {
        $pane->fields['pane']['billing_phone'] = uc_textfield(uc_get_field_name('phone'), $arg1->billing_phone, TRUE, NULL, 32, 16);
      }
      $pane->fields['pane']['continue'] = uc_cart_checkout_next_button('billing', $pane->next);
      return $pane;

    case 'theme':
      if ($arg1['panes']['billing']['pane']['#collapsed']) {
        $collapsed = ' collapsed';
      }
      $output = '<div class="billing-pane"><fieldset class=" collapsible'
              . $collapsed .'"><legend>'. t('Billing Information') .'</legend>'
              . drupal_render($arg1['panes']['billing']['pane']['description']);
      if (variable_get('uc_pane_delivery_enabled', TRUE)) {
        $output .= '<span onclick="uc_cart_copy_delivery_to_billing(true);" '
                  .'style="cursor: pointer; font-weight: bold; color: '
                  .'rgb(0, 0, 125);"><img src="'. base_path()
                 . drupal_get_path('module', 'uc_store') .'/images/copy.gif" '
                  .'style="position: relative; top: 2px; margin-right: 2px;" /> '
                 . t('Click to copy your delivery information.') .'</span>';
      }
      $output .= '<table class="pane-table" cellpadding="2">';
      $req = '<span class="form-required">*</span>';

      foreach (element_children($arg1['panes']['billing']['pane']) as $field) {
        if (substr($field, 0, 8) == 'billing_' && $arg1['panes']['billing']['pane'] !== NULL) {
          $title = $arg1['panes']['billing']['pane'][$field]['#title'] .':';
          unset($arg1['panes']['billing']['pane'][$field]['#title']);
          if (substr($field, 8) == 'street1') {
            $title = uc_get_field_name('street') .':';
          }
          elseif (substr($field, 8) == 'street2') {
            $title = ' ';
          }
          $output .= '<tr><td class="field-label">';
          if ($arg1['panes']['billing']['pane'][$field]['#required']) {
            $output .= $req;
          }
          $output .= $title .'</td><td>'
                   . drupal_render($arg1['panes']['billing']['pane'][$field])
                    .'</td></tr>';
        }
      }
      $output .= '</table>';

      foreach (element_children($arg1['panes']['billing']['pane']) as $element) {
        $output .= drupal_render($arg1['panes']['billing']['pane'][$element]);
      }

      $output .= '</fieldset></div>';
      return $output;


    case 'review':
      $review[] = array('title' => t('Address'), 'data' => uc_order_address($arg1, 'billing', FALSE));
      $review[] = array('title' => t('Phone'), 'data' => $arg1->billing_phone);
      return $review;

    case 'process':
      $arg1->billing_first_name = $arg2['pane']['billing_first_name'];
      $arg1->billing_last_name = $arg2['pane']['billing_last_name'];
      $arg1->billing_company = $arg2['pane']['billing_company'];
      $arg1->billing_street1 = $arg2['pane']['billing_street1'];
      $arg1->billing_street2 = $arg2['pane']['billing_street2'];
      $arg1->billing_city = $arg2['pane']['billing_city'];
      $arg1->billing_zone = $arg2['pane']['billing_zone'];
      $arg1->billing_postal_code = $arg2['pane']['billing_postal_code'];
      $arg1->billing_country = $arg2['pane']['billing_country'];
      $arg1->billing_phone = $arg2['pane']['billing_phone'];
      return TRUE;
  }
}

/**
 * Allow a customer to make comments on the order.
 */
function uc_checkout_pane_comments($op, &$arg1, $arg2) {
  switch ($op) {
    case 'view':
      $pane = uc_cart_checkout_new_pane('comments');
      $pane->fields['pane']['description'] = uc_cart_checkout_pane_description('comments', t('Use this area for special instructions or questions regarding your order:'));
      $result = db_query("SELECT message FROM {uc_order_comments} WHERE "
                        ."order_id = %d", $arg1->order_id);
      if ($comment = db_fetch_object($result)) {
        $default = $comment->message;
      }
      $pane->fields['pane']['comments'] = array(
        '#type' => 'textarea',
        '#title' => t('Order Comments'),
        '#default_value' => $default,
      );
      $pane->fields['pane']['continue'] = uc_cart_checkout_next_button('delivery', $pane->next);
      return $pane;

    case 'review':
      $result = db_query("SELECT message FROM {uc_order_comments} WHERE "
                        ."order_id = %d", $arg1->order_id);
      if ($comment = db_fetch_object($result)) {
        $review[] = array('title' => t('Comment'), 'data' => $comment->message);
      }
      return $review;

    case 'process':
      if (strlen($arg2['pane']['comments']) > 0) {
        db_query("DELETE FROM {uc_order_comments} WHERE order_id = %d", $arg1->order_id);
        uc_order_comment_save($arg1->order_id, 0, $arg2['pane']['comments'], 'order', 1, TRUE);
      }
      return TRUE;
  }
}

/**
 * Pseudo OOP constructor - create a new pane object...
 */
function uc_cart_checkout_new_pane($pane_id, $collapsed = NULL) {
  $pane->prev = _uc_cart_checkout_prev_pane($pane_id);
  $pane->next = _uc_cart_checkout_next_pane($pane_id);

  if (is_null($collapsed)) {
    $collapsed = ($pane->prev === FALSE) ? FALSE : TRUE;
  }
  if (isset($_SESSION['expanded_panes'])) {
    if (is_array($_SESSION['expanded_panes']) &&
        in_array($pane_id, $_SESSION['expanded_panes'])) {
      $collapsed = FALSE;
    }
  }

  $pane->fields['pane'] = array(
    '#type' => 'fieldset',
    '#title' => _checkout_pane_data($pane_id, 'title'),
    '#collapsible' => _checkout_pane_data($pane_id, 'collapsible'),
    '#collapsed' => (variable_get('uc_use_next_buttons', TRUE) ? $collapsed : FALSE),
    '#prefix' => '<div class="'. $pane_id .'-pane">',
    '#suffix' => '</div>'
  );

  return $pane;
}

/**
 * Add a description to a pane.
 */
function uc_cart_checkout_pane_description($pane_id, $desc) {
  $element = array(
    '#value' => variable_get('uc_pane_'. $pane_id .'_field_description', $desc),
    '#weight' => 0,
    '#prefix' => '<div class="pane-description">',
    '#suffix' => '</div>'
  );

  return $element;
}

/**
 * Adds a continue button to a pane.
 */
function uc_cart_checkout_next_button($pane_id, $next) {
  if ($next === FALSE || variable_get('uc_use_next_buttons', TRUE) == FALSE) {
    return NULL;
  }

  $element = array(
    '#type' => 'button',
    '#value' => variable_get('uc_checkout_next_button', t('Next')),
    '#weight' => variable_get("uc_pane_{$pane_id}_field_button_weight", 20),
    '#attributes' => array('onclick' => "return uc_cart_continue_click(this, '$next');"),
    '#prefix' => '<div class="continue-button show-onload">',
    '#suffix' => '</div>'
  );

  return $element;
}

/**
 * Find the pane that displays above the pane with an ID of $pane_id.
 */
function _uc_cart_checkout_prev_pane($pane_id = NULL) {
  if (is_null($pane_id)) {
    return FALSE;
  }

  $panes = _checkout_pane_list();

  $prev = FALSE;
  foreach ($panes as $target) {
    if ($target['id'] == $pane_id) {
      return $prev;
    }
    if ($target['collapsible'] && variable_get('uc_pane_'. $target['id'] .'_enabled', TRUE)) {
      $prev = $target['id'];
    }
  }

  return FALSE;
}

/**
 * Find the pane that displays below the pane with an ID of $pane_id.
 */
function _uc_cart_checkout_next_pane($pane_id = NULL) {
  if (is_null($pane_id)) {
    return FALSE;
  }

  $panes = _checkout_pane_list();

  $next = FALSE;
  foreach ($panes as $target) {
    if ($next) {
      if ($target['collapsible'] && variable_get('uc_pane_'. $target['id'] .'_enabled', TRUE)) {
        return $target['id'];
      }
    }
    if ($target['id'] == $pane_id) {
      $next = TRUE;
    }
  }

  return FALSE;
}

/**
 * Build a list of checkout panes defined in the enabled modules.
 */
function _checkout_pane_list($action = NULL) {
  static $panes;

  if (count($panes) > 0 && $action !== 'rebuild') {
    return $panes;
  }

  $panes = module_invoke_all('checkout_pane', NULL);
  for ($i = 0; $i < count($panes); $i++) {
    $panes[$i]['enabled'] = variable_get('uc_pane_'. $panes[$i]['id'] .'_enabled', (!isset($panes[$i]['enabled']) ? TRUE : $panes[$i]['enabled']));
    $panes[$i]['weight'] = variable_get('uc_pane_'. $panes[$i]['id'] .'_weight', (!isset($panes[$i]['weight']) ? 0 : $panes[$i]['weight']));
    $panes[$i]['review'] = !isset($panes[$i]['review']) ? TRUE : $panes[$i]['review'];
    $panes[$i]['process'] = !isset($panes[$i]['process']) ? TRUE : $panes[$i]['process'];
    $panes[$i]['collapsible'] = !isset($panes[$i]['collapsible']) ? TRUE : $panes[$i]['collapsible'];
  }
  usort($panes, 'uc_weight_sort');

  return $panes;
}

/**
 * Return data from a checkout pane by pane ID and the array key.
 */
function _checkout_pane_data($pane_id, $key) {
  $panes = _checkout_pane_list();
  foreach ($panes as $pane) {
    if ($pane['id'] == $pane_id) {
      return $pane[$key];
    }
  }
}

function _cart_review_table() {
  $items = uc_cart_get_contents();

  $subtotal = 0;
  $output = '<table align="center" cellpadding="3">'
           .'<tr class="header">'
           .'<td align="center">'. t('Qty.') .'</td>'
           .'<td>'. t('Products') .'</td>'
           .'<td align="right">'. t('Price') .'</td></tr>';

  foreach ($items as $item) {
    $rows = array();
    foreach($item->options as $option){
      $rows[] = $option['attribute'] .': '. $option['name'];
    }

    $desc = $item->title . theme('item_list', $rows, NULL, 'ul', array('class' => 'cart-options'));
    $total = ($item->qty) ? $item->qty * $item->price : $item->price;
    $subtotal += $total;
    $qty = ($item->qty) ? $item->qty : '';

    $output .= '<tr valign="top"><td align="center">'. $qty .'x</td>'
              .'<td width="100%">'. $desc .'</td><td align="right" nowrap="nowrap">'
             . uc_currency_format($total) .'</td></tr>';
  }
  $output .= '<tr><td align="right" colspan="4"><strong>'. t('Subtotal:')
            .'</strong> '. uc_currency_format($subtotal) .'</td></tr></table>';

  return $output;
}

/**
 * Return the unique cart_id of the user, sid for anonymous and uid for logged in users.
 */
function uc_cart_get_id() {
  global $user;
  if ($user->uid) {
    return $user->uid;
  }
  elseif ($sid = session_id()) {
    return $sid;
  }
  // What to do if neither of these work? -RS
}

/**
 * Grab the items in a shopping cart for a user.
 *
 * If $cid is not passed in, this function uses the uid of the person currently
 * accessing this function.
 */
function uc_cart_get_contents($cid = NULL, $action = NULL) {
  static $items = array();
  $cid = $cid ? $cid : uc_cart_get_id();

  if (!module_exists('uc_product'))
    return array();

  if ($action == 'rebuild') {
    $items = array();
  }

  if ($items[$cid] === NULL) {
    $result = db_query("SELECT c.*, n.title, n.vid FROM {node} n INNER JOIN {uc_cart_products} c ON n.nid = c.nid WHERE c.cart_id = '%s'", $cid);

    while ($item = db_fetch_object($result)) {
      for ($i = 0; $i < count($items[$cid]); $i++) {
        if ($items[$cid][$i]->nid == $item->nid && $items[$cid][$i]->data == $item->data) {
          $items[$cid][$i]->qty += $item->qty;
          continue 2;
        }
      }
      $product = node_load($item->nid);
      $item->cost = $product->cost;
      $item->price = $product->sell_price;
      $item->weight = $product->weight;
      $item->data = unserialize($item->data);
      $item->module = $item->data['module'];
      if (module_exists('uc_attribute')){
        $item->options = _uc_cart_product_get_options($item);
        $op_costs = 0;
        $op_prices = 0;
        $op_weight = 0;
        foreach ($item->options as $option){
          $op_costs += $option['cost'];
          $op_prices += $option['price'];
          $op_weight += $option['weight'];
        }
        $item->cost += $op_costs;
        $item->price += $op_prices;
        $item->weight += $op_weight;
        if ($item->data['model']){
          $item->model = $item->data['model'];
        }
        else{
          $item->model = $product->model;
        }
      }
      else{
        $item->options = array();
        $item->model = $product->model;
      }
      if (module_exists('uc_manufacturer')){
        $term = array_shift(taxonomy_node_get_terms_by_vocabulary($item->nid, variable_get('uc_manufacturer_vid', 0)));
        $item->manufacturer = $term->name;
      }
      
      $items[$cid][] = $item;
    }
  }

  return $items[$cid];
}



/**
 * Adds an item to a user's cart.
 */
function uc_cart_add_item($nid, $qty = 1, $data = array('module' => 'uc_product'), $cid = NULL, $msg = TRUE) {
  $cid = $cid ? $cid : uc_cart_get_id();
  $node = node_load($nid);

  if (!in_array($node->type, array_keys(uc_product_node_info()))) {
    drupal_set_message(t('!title is not a product. Unable to add to cart.', array('!title' => $node->title)), 'error');
    return;
  }

  $result = module_invoke_all('add_to_cart', $nid, $qty, $data);
  if (is_array($result) && !empty($result)) {
    foreach ($result as $row) {
      if ($row['success'] === FALSE) {
        if (isset($row['message']) && !empty($row['message'])) {
          $message = $row['message'];
        }
        else {
          $message = t('Sorry, that item is not available for purchase at this time.');
        }
        drupal_set_message($message, 'error');
        return;
      }
    }
  }

  $item = db_fetch_object(db_query("SELECT * FROM {uc_cart_products} WHERE cart_id = '%s' AND nid = %d AND data = '%s'", $cid, $node->nid, serialize($data)));

  /* If the item isn't in the cart yet, add it. */
  if (is_null($item) || $item === FALSE) {
    db_query("INSERT INTO {uc_cart_products} (cart_id, nid, qty, changed, data) VALUES ('%s', %d, %d, %d, '%s')", $cid, $node->nid, $qty, time(), serialize($data));
    if ($msg) {
      drupal_set_message(t('<strong>!product-title</strong> added to !cart_view.', array('!cart_view' => l(t('your shopping cart'), 'cart'), '!product-title' => $node->title)));
    }
  }
  else {
    /* Update the item instead. */
    if ($msg) {
      drupal_set_message(t('Your item(s) have been updated.'));
    }
    module_invoke($data['module'], 'update_cart_item', $node->nid, $data, $item->qty + $qty, $cid);
  }

  cache_clear_all();

  if (isset($_GET['destination'])) {
    drupal_goto();
  }

  $redirect = variable_get('uc_add_item_redirect', 'cart');
  if ($redirect != '<none>') {
    $_SESSION['last_url'] = referer_uri();
    return $redirect;
  }
}

/**
 * Remove an item from the cart
 */
function uc_cart_remove_item($nid, $cid = NULL, $data = array()) {
  if (empty($nid)) return;
  $cart_id = !(is_null($cid) || empty($cid)) ? $cid : uc_cart_get_id();
  db_query("DELETE FROM {uc_cart_products} WHERE cart_id = '%s' AND nid = %d AND data = '%s'", $cart_id, $nid, serialize($data));
  cache_clear_all();
}

/**
 * Updates the quantity of all the items in a cart object
 */
function uc_cart_update_item_object($cart) {
  if (is_object($cart)) {
    foreach ($cart->items as $item){
      if ($item['remove']) {
        module_invoke($item['module'], 'update_cart_item', $item['nid'], unserialize($item['data']), 0);
      }
      else {
        module_invoke($item['module'], 'update_cart_item', $item['nid'], unserialize($item['data']), $item['qty']);
      }
    }
  }
}

/**
 * Empties a cart of its contents.
 */
function uc_cart_empty($cart_id) {
  if (is_null($cart_id) || empty($cart_id))
    return;

  db_query("DELETE FROM {uc_cart_products} WHERE cart_id = '%s'", $cart_id);
}

function uc_cart_cart_pane_list($items, $action = NULL) {
  static $panes;

  if (count($panes) > 0 && $action !== 'rebuild') {
    return $panes;
  }

  $panes = module_invoke_all('cart_pane', $items);
  if (!is_array($panes) || count($panes) == 0) {
    return array();
  }
  for ($i = 0; $i < count($panes); $i++) {
    $panes[$i]['enabled'] = variable_get('uc_cap_'. $panes[$i]['id'] .'_enabled', (!isset($panes[$i]['enabled']) ? TRUE : $panes[$i]['enabled']));
    $panes[$i]['weight'] = variable_get('uc_cap_'. $panes[$i]['id'] .'_weight', (!isset($panes[$i]['weight']) ? 0 : $panes[$i]['weight']));
  }
  usort($panes, 'uc_weight_sort');

  return $panes;
}
