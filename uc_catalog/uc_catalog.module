<?php
// $Id: uc_catalog.module,v 1.12 2007-10-04 14:48:25 rszrama Exp $

/**
 * @file
 * Ãœbercart Catalog module.
 * 
 * Provides classification and navigation product nodes using taxonomy. When 
 * installed, this module creates a vocabulary named "Product Catalog" and stores
 * the vocabulary id for future use. The user is responsible for maintaining the
 * terms in the taxonomy, though the Catalog will find products not listed in it.
 * 
 * Coded by Lyle Mantooth
 */

/**
 * Data structure to mimic Drupal's menu system.
 */
class uc_treeNode {
  var $tid = 0;
  var $name = 'Catalog';
  var $children = array();
  var $depth = -1;
  var $sequence = 0;
  
  function uc_treeNode($term = null){
    if ($term){
      $this->tid = $term->tid;
      $this->name = $term->name;
      $this->depth = $term->depth;
      $this->sequence = $term->sequence;
    }
  }
  
  /**
   * Determines if new child is an immediate descendant or not.
   *
   * This function is completely dependent on the structure of the array returned 
   * by taxonomy_get_tree(). Each element in the array knows it's depth in the tree
   * and the array is a preorder iteration of the logical tree structure. Therefore,
   * if the parameter is more than one level deeper than $this, it should be passed
   * to the last child of $this.
   */
  function add_child(&$child){
    if ($child->depth - $this->depth == 1){
      $this->children[] = $child;
    }
    else{
      $last_child =&$this->children[count($this->children)-1];
      $last_child->add_child($child);
    }
  }
}

/******************************************************************************
 * Drupal Hooks                                                               *
 ******************************************************************************/

/**
 * Implementation of hook_menu().
 */
function uc_catalog_menu($may_cache){
  global $user;
  $items = array();

  if ($may_cache){
    $items[] = array(
      'path' => variable_get('uc_catalog_url', 'catalog'),
      'access' => TRUE,
      'title' => variable_get('uc_catalog_name', t('Catalog')),
      'callback' => 'theme',
      'callback arguments' => array('uc_catalog_browse'),
      'type' => MENU_NORMAL_ITEM,
    );
    $items[] = array('path' => 'admin/store/settings/catalog',
      'access' => user_access('administer catalog'),
      'title' => t('Catalog settings'),
      'callback' => 'uc_catalog_settings_overview',
      'type' => MENU_NORMAL_ITEM,
    );
    $items[] = array('path' => 'admin/store/settings/catalog/overview',
      'title' => t('Overview'),
      'weight' => -10,
      'type' => MENU_DEFAULT_LOCAL_TASK,
    );
    $items[] = array('path' => 'admin/store/settings/catalog/edit',
      'access' => user_access('administer catalog'),
      'title' => t('Edit'),
      'callback' => 'uc_catalog_admin_settings',
      'weight' => -5,
      'type' => MENU_LOCAL_TASK,
    );
    $items[] = array('path' => 'admin/store/products/orphans',
      'title' => t('Find orphaned products'),
      'access' => user_access('administer catalog'),
      'callback' => 'uc_catalog_orphaned_products',
      'description' => t('Find products that have not been categorized.'),
      'type' => MENU_NORMAL_ITEM,
      'weight' => -4
    );
    if (module_exists('ubrowser')){
      $items[] = array('path' => 'admin/store/products/categories',
        'access' => user_access('administer catalog'),
        'title' => t('Move products'),
        'callback' => 'drupal_get_form',
        'callback arguments' => 'uc_catalog_set_category_form',
        'type' => MENU_NORMAL_ITEM,
        'weight' => -6,
      );
    }
  }
  
  return $items;
}

/**
 * Implementation of hook_perm().
 */
function uc_catalog_perm(){
  return array('administer catalog');
}

function uc_catalog_enable(){
  if (module_exists('imagecache')){
    $result = db_query("SELECT presetid FROM {imagecache_preset} WHERE presetname = 'category'");
    if (!db_fetch_object($result)){
      $id = db_next_id('{imagecache_preset}_presetid');
      db_query("INSERT INTO {imagecache_preset} (presetid, presetname) VALUES (%d, 'category')", $id);
      db_query("INSERT INTO {imagecache_action} (actionid, presetid, weight, data) VALUES (%d, %d, 0, '%s')", db_next_id('{imagecache_action}_actionid'), $id, 'a:4:{s:8:"function";s:5:"scale";s:3:"fit";s:6:"inside";s:5:"width";s:2:"96";s:6:"height";s:2:"96";}');
    }
  }
}

/**
 * Implementation of hook_nodeapi().
 */
function uc_catalog_nodeapi(&$node, $op, $a3 = null, $a4 = null){
  static $parents = array();
  
  if (in_array($node->type, array_keys(uc_product_node_info()))){
    switch($op){
      case 'view':
        if ($a4 == true && variable_get('uc_catalog_breadcrumb', true)){
          $crumbs = array();
          $terms = taxonomy_node_get_terms_by_vocabulary($node->nid, variable_get('uc_catalog_vid', 0));
          if (count($terms)){
            $crumbs = array(l(variable_get('uc_catalog_name', t('Catalog')), variable_get('uc_catalog_url','catalog')));
            $used_tids = array();
            foreach ($terms as $term){
              if (!isset($parents[$term->tid])){
                $parents[$term->tid] = taxonomy_get_parents_all($term->tid);
              }
              //drupal_set_message('<pre>'. print_r($parents[$term->tid], true) .'</pre>');
              foreach (array_reverse($parents[$term->tid]) as $parent){
                if (!in_array($parent->tid, $used_tids)){
                  $crumbs[] = l($parent->name, uc_catalog_term_path($parent));
                  $used_tids[] = $parent->tid;
                }
              }
            }
          }
          drupal_set_breadcrumb($crumbs);
        }
      break;
    }
  }
}

/**
 * Performs garbage collection when the module's vocabulary is deleted.
 */
function uc_catalog_taxonomy($op, $type, $object = null){
  switch($type){
    case 'vocabulary':
      if ($object['vid'] == variable_get('uc_catalog_vid', 0)){
        switch($op){
          case 'delete':
            variable_del('uc_catalog_vid');
            variable_del('uc_catalog_name');
            variable_del('uc_catalog_description');
          break;
          case 'update':
            variable_set('uc_catalog_name', $object['name']);
            variable_set('uc_catalog_description', $object['description']);
          break;
        }
      }
    break;
    case 'term':
      switch($op){
        case 'insert':
          $field_name = 'image';
          if ($file = file_check_upload($field_name)) {
            $file->filepath = str_replace('\\', '/', $file->filepath);
            $file = file_save_upload($field_name, file_create_path('ubercart_images') .'/'. $file->filename);
            if ($file) {
              if (image_get_info($file->filepath)) {
                db_query("INSERT INTO {uc_catalog_images} (fid, tid, filename, filepath, filemime, filesize) VALUES (%d, %d, '%s', '%s', '%s', %d)",
                  db_next_id('{files}_fid'), $object['tid'], $file->filename, $file->filepath, $file->filemime, $file->filesize
                );
              }
              else{
                form_set_error($field_name, t('Uploaded file is not a valid image'));
                file_delete($file->filepath);
              }
            }
          }
        break;
        case 'update':
          $field_name = 'image';
          if ($object['remove']){
            db_query("DELETE FROM {uc_catalog_images} WHERE tid = %d", $object['tid']);
          }
          else if ($file = file_check_upload($field_name)) {
            $file->filepath = str_replace('\\', '/', $file->filepath);
            $file = file_save_upload($field_name, file_create_path('ubercart_images') .'/'. $file->filename);
            if ($file) {
              if (image_get_info($file->filepath)) {
                db_query("DELETE FROM {uc_catalog_images} WHERE tid = %d", $object['tid']);
                db_query("INSERT INTO {uc_catalog_images} (fid, tid, filename, filepath, filemime, filesize) VALUES (%d, %d, '%s', '%s', '%s', %d)",
                  db_next_id('{files}_fid'), $object['tid'], $file->filename, $file->filepath, $file->filemime, $file->filesize
                );
              }
              else{
                form_set_error($field_name, t('Uploaded file is not a valid image'));
                file_delete($file->filepath);
              }
            }
          }
        break;
      }
    break;
  }
}

function uc_catalog_form_alter($form_id, &$form){
  if ($form_id == 'taxonomy_form_term' && $form['vid']['#value'] == variable_get('uc_catalog_vid', 0)){
    $form['#attributes'] = array("enctype" => "multipart/form-data");
    
    $form['name']['#weight'] = -1;
    $form['image']['#weight'] = 0;
    $form['image']['image'] = array('#type' => 'file',
      '#title' => t('Image'),
      '#weight' => 0,
    );
    $image = uc_catalog_image_load($form['tid']['#value']);
    if ($image){
      if (module_exists('imagecache')){
        $image_display = theme('imagecache', 'category', $image->filepath);
      }
      else{
        $image_display = theme('placeholder', $image->filename);
      }
      $form['image']['remove'] = array('#type' => 'checkbox',
        '#title' => t('Remove category image: !image', array('!image' => $image_display)),
        '#weigt' => 1,
      );
    }
  }
}

/**
 * Implementation of hook_term_path().
 *
 * This hook rewrites taxonomy term links to point to the return value.
 */
function uc_catalog_term_path($term){
  if (function_exists('iconv')){
    return variable_get('uc_catalog_url', 'catalog') .'/'. $term->tid .'/'. iconv('UTF-8', 'ASCII//TRANSLIT', preg_replace(array('/ /', '/\W[_ ]?/'), array('_', ''), strtolower($term->name)));
  }
  else{
    return variable_get('uc_catalog_url', 'catalog') .'/'. $term->tid .'/'. preg_replace(array('/ /', '/\W[_ ]?/'), array('_', ''), strtolower($term->name));
  }
}

/**
 * Displays a menu for navigating the "Product Catalog"
 */
function uc_catalog_block($op = 'list', $delta = 0, $edit = array()){
  switch($op){
    case 'list':
      return array(array('info' => variable_get('uc_catalog_name', t('Catalog'))));
    case 'view':
      // Get the vocabulary tree information.
      $vid = variable_get('uc_catalog_vid', 0);
      $tree = taxonomy_get_tree($vid);
      // Then convert it into an actual tree structure.
      $seq = 0;
      $menu_tree = new uc_treeNode();
      $level = array();
      $curr_depth = -1;
      foreach ($tree as $knot){
        $seq++;
        $knot->sequence = $seq;
        $knothole = new uc_treeNode($knot);
        // Begin at the root of the tree and find the proper place.
        $menu_tree->add_child($knothole);
      }
      // Now, create a structured menu, separate from Drupal's menu.
      $content .= theme("uc_catalog_block_start");
      foreach ($menu_tree->children as $branch){
        list($inpath, $html) = _uc_catalog_navigation($branch);
        $content .= $html;
      }
      $content .= theme("uc_catalog_block_end");
      $block = array('subject' => l(variable_get('uc_catalog_name', t('Catalog')), variable_get('uc_catalog_url', 'catalog')), 'content' => $content);
      return $block;
  }
}

function theme_uc_catalog_block_start(){
  return '<ul class="menu">';
}

function theme_uc_catalog_block_end(){
  return '</ul>';
}

/******************************************************************************
 * Ãœbercart Hooks                                                             *
 ******************************************************************************/

/**
 * Implementation of Ãœbercart's hook_store_status().
 * 
 * Provides status information about the "Product Catalog" and products not listed in the catalog.
 */
function uc_catalog_store_status(){
  $statuses = array();
  $cat_id = variable_get('uc_catalog_vid', 0);
  $catalog = taxonomy_get_vocabulary($cat_id);
  if ($catalog){
    $statuses[] = array('status' => 'ok', 'title' => t('Catalog vocabulary'),
      'desc' => t('Vocabulary !name has been identified as the !uber catalog.', array('!name' => l($catalog->name, 'admin/content/taxonomy/'. $catalog->vid), '!uber' => '&Uuml;bercart'))
    );

    $excluded = 0;
    $result = db_query("SELECT DISTINCT * FROM {node} AS n LEFT JOIN {term_node} AS tn ON n.nid = tn.nid LEFT JOIN {vocabulary_node_types} AS vnt ON n.type = vnt.type WHERE n.type != 'image' AND tn.tid IS NULL AND vnt.vid = %d", $cat_id);
    $excluded = db_num_rows($result);
    if ($excluded){
      $statuses[] = array('status' => 'warning', 'title' => t('Unlisted Products'),
        'desc' => format_plural($excluded, 'There is 1 product not listed in the catalog.', 'There are @count products not listed in the catalog.')
          . t(' Products are listed by assigning a category from the Product Catalog vocabulary to them. ')
          . l(t('Find orphaned products here.'), 'admin/store/products/orphans'),
      );
    }
    else{
      $statuses[] = array('status' => 'ok', 'title' => t('Unlisted Products'),
        'desc' => t('All products are currently listed in the catalog.'),
      );
    }
  }
  else{
    $statuses[] = array('status' => 'error',
      'title' => t('Catalog vocabulary'),
      'desc' => t('No vocabulary has been recognized as the !uber catalog. Click ', array('!uber' => '&Uuml;bercart'))
        . l(t('here'), 'admin/store/catalog/setup'). t(' to set one up')
    );
  }
  return $statuses;
}

function uc_catalog_product_class($type, $op){
  $vid = variable_get('uc_catalog_vid', 0);
  switch($op){
    case 'insert':
      if ($vid){
        db_query("INSERT INTO {vocabulary_node_types} (vid, type) VALUES (%d, '%s')", $vid, $type);
      }
    break;
    case 'delete':
      if ($vid){
        db_query("DELETE FROM {vocabulary_node_types} WHERE vid = %d AND type = '%s'", $vid, $type);
      }
    break;
  }
}

/******************************************************************************
 * Menu Callbacks                                                             *
 ******************************************************************************/

function uc_catalog_settings_overview(){
  $sections = array();
  
  $sections[] = array(
    'edit' => 'admin/store/settings/catalog/edit',
    'title' => t('Catalog settings'),
    'items' => array(
      t('The catalog vocabulary id is !vid.',
        array('!vid' => variable_get('uc_catalog_vid', 0))),
      t('The base URL pointing to the catalog is !url.',
        array('!url' => variable_get('uc_catalog_url', 'catalog'))),
      variable_get('uc_catalog_breadcrumb', true) ?
        t('The catalog breadcrumb will be shown.') :
        t('The catalog breadcrumb will not be shown.'),
      variable_get('uc_catalog_block_nodecount', true) ?
        t('The number of nodes in a category will be shown in the catalog block.') :
        t('The number of nodes in a category will not be shown in the catalog block.'),
      variable_get('uc_catalog_breadcrumb_nodecount', true) ?
        t('The number of nodes in a category will be shown in the catalog breadcrumb.') :
        t('The number of nodes in a category will not be shown in the catalog breadcrumb.'),
      variable_get('uc_catalog_show_subcategories', true) ?
        t('Subcategories with no products to display will be shown on category pages.') :
        t('Subcategories with no products to display will not be shown on category pages.'),
      variable_get('uc_catalog_expand_categories', false) ?
        t('Categories in the catalog block will always be expanded.') :
        t('Categories in the catalog block will be expanded if selected.'),
      t('Subcategores will be displayed in %num columns.', array('%num' => variable_get('uc_catalog_category_columns', 3))),
    ),
  );
  
  $output = theme('uc_settings_overview', $sections);
  return $output;
}

/**
 * Determines if the "Product Catalog" vocabulary has been set up.
 */
function uc_catalog_admin_settings(){
  $output = '';
  $vid = variable_get('uc_catalog_vid', null);
  if ($vid){
    $catalog = taxonomy_get_vocabulary($vid);
    $output .= t('Vocabulary %name is set as the product catalog. ', array('%name' => $catalog->name));
    //$output .= l(t('Build a term hierarchy for products there.'), 'admin/content/taxonomy/'. $vid .'/add/term');
    //drupal_set_message($output);
    $output .= l(t('View the catalog here.'), 'admin/content/taxonomy/'. $vid);
  }
  
  $output .= drupal_get_form('uc_catalog_admin_form');
  
  return $output;
}

/**
 * Form to change the category of many nodes at once.
 */
function uc_catalog_set_category_form(){
  drupal_add_css(drupal_get_path('module', 'uc_catalog') .'/uc_catalog.css');
  drupal_add_css(drupal_get_path('module', 'uc_product') .'/uc_product.css');
  $settings = array(
    'div' => '#category-selector',
    'vid' => variable_get('uc_catalog_vid', 0),
    'filter' => implode(',', array_keys(uc_product_node_info())),
    'search' => 'true',
    'nids' => 'true',
    'nodesg' => 'product',
    'nodepl' => 'products',
    'multi' => 'true',
    'close' => 'false',
    'select' => 'buffer_products("'. base_path() .'","'. file_create_url('') .'")',
  );
  $form['selector'] = array('#type' => 'markup',
    '#value' => ubrowser($settings, 'category-selector'),
  );
  $form['buffer'] = uc_product_buffer_form(func_get_args());
  $form['buffer']['#prefix'] = '<div class="product-buffer">';
  $form['buffer']['#suffix'] = '</div>';
  unset($form['buffer']['submit']);
  
  drupal_add_js(drupal_get_path('module', 'uc_product') .'/uc_product.js', 'module');

  $form['categories'] = taxonomy_form(variable_get('uc_catalog_vid', 0));
  $form['categories']['#title'] = t('New Category');
  unset($form['categories']['#weight']);
  $form['move'] = array('#type' => 'submit',
    '#value' => t('Move'),
  );
  $form['copy'] = array('#type' => 'submit',
    '#value' => t('Copy'),
  );
  
  return $form;
}

/**
 * Submit function for uc_catalog_set_category_form().
 */
function uc_catalog_set_category_form_submit($form_id, $form_values){
  $categories = $form_values['categories'];
  $catalog_vid = variable_get('uc_catalog_vid', 0);
  foreach(array_filter(explode('/', $form_values['products'])) as $nid){
    // Preserve terms already associated with this product.
    $terms = taxonomy_node_get_terms($nid);
    foreach ($terms as $term){
      // Don't preserve those from the catalog if products are being moved.
      if ($form_values['op'] == t('Move') && $term->vid == $catalog_vid){
        continue;
      }
      $categories[] = $term->tid;
    }
    taxonomy_node_save($nid, array_unique($categories));
  }
}

/**
 * Catalog taxonomy browser.
 *
 * URL is of the form 'catalog/category_name'.
 * The breadcrumb provides links to all ancestry paths to the current term.
 * A table of links provides access to the immediate children and grandchildren.
 * 
 * Inspired by taxonomy_term_page().
 *
 * @return
 *   A Drupal page providing links to products in this category, and nearby categories.
 */
function uc_catalog_get_page($tid){
  $catalog = new stdClass();
  $vid = variable_get('uc_catalog_vid', 0);
  
  if ($tid){
    $term = taxonomy_get_term($tid);
    $name = $term->name;
    $description = $term->description;
  }
  else{
    $tid = 0;
    $name = variable_get('uc_catalog_name', t('Catalog'));
    $description = variable_get('uc_catalog_description', '');
  }
  $catalog->tid = $tid;
  $catalog->vid = $vid;
  $catalog->name = $name;
  $catalog->description = $description;
  $catalog->children = array();
  if ($file = uc_catalog_image_load($catalog->tid)){
    if (module_exists('imagecache')){
      $file_path =  file_create_url(file_directory_path() .'/imagecache/category/'. $file->filepath);
    }
    else{
      $file_path = $file->filepath;
    }
    $info = image_get_info($file_path);
    $catalog->image = $info;
    $catalog->image['filepath'] = $file->filepath;
  }
  $types = array_keys(uc_product_node_info());
  $links = array();
  $child_list = array();
  $children = taxonomy_get_children($tid, $vid);
  foreach ($children as $child){
    $n = 0;
    foreach ($types as $type){
      $n += taxonomy_term_count_nodes($child->tid, $type);
    }
    $child->nodes = $n;
    // Display child category's image.
    if (module_exists('imagecache') && $file = uc_catalog_image_load($child->tid)){
      $imagecache_path =  file_create_url(file_directory_path() .'/imagecache/category/'. $file->filepath);
      $info = image_get_info($imagecache_path);
      $child->image = $info;
      $child->image['filepath'] = $file->filepath;
    }
    // Display list of child category's children categories.
    // If more than $max_gc_display, show "More..." link to child.
    $grandchildren_list = taxonomy_get_children($child->tid, $vid);
    $child->children = $grandchildren_list;
    $catalog->children[] = $child;
  }
  //$node_resource = taxonomy_select_nodes(array($tid));
  return $catalog;
}

function theme_uc_catalog_browse($tid = 0){
  drupal_add_css(drupal_get_path('module', 'uc_catalog') .'/uc_catalog.css');
  
  //$args = func_get_args();
  //drupal_set_message('<pre>'. print_r($args, true) .'</pre>');
  $output = '';
  $catalog = uc_catalog_get_page((int)$tid);
  if ($catalog->name != variable_get('uc_catalog_name', t('Catalog'))) {
    drupal_set_title($catalog->name);
  }
  drupal_set_breadcrumb(uc_catalog_set_breadcrumb($catalog->tid));
  $types = array_keys(uc_product_node_info());
  $links = array();
  $child_list = array();
  foreach ($catalog->children as $child){
    if ($child->nodes){
      $links[] = array('title' => $child->name . (variable_get('uc_catalog_breadcrumb_nodecount', true) ? ' ('. $child->nodes .')' : ''), 'href' => uc_catalog_term_path($child),
        'attributes' => array('rel' => 'tag'),
      );
    }
    if ($child->image){
      $image = '<div>';
      $image .= l(theme('imagecache', 'category', $child->image['filepath']), uc_catalog_term_path($child), array(), null, null, false, true);
      $image .= '</div>';
    }
    else{
      $image = '<div></div>';
    }
    $grandchildren = array();
    $j = 0;
    $max_gc_display = 3;
    foreach ($child->children as $i => $grandchild){
      if ($j > $max_gc_display){
        break;
      }
      $g_child_nodes = 0;
      foreach ($types as $type){
        $g_child_nodes += taxonomy_term_count_nodes($grandchild->tid, $type);
      }
      if ($g_child_nodes){
        $grandchildren[$i] = l($grandchild->name, uc_catalog_term_path($grandchild), array('class' => 'subcategory'));
        $j++;
      }
    }
    //$grandchildren = array_slice($grandchildren, 0, intval(count($grandchildren) / 2) + 1, true);
    if ($j > $max_gc_display){
      array_push($grandchildren, l('More...', uc_catalog_term_path($child), array('class' => 'subcategory')));
    }
    if ($child->nodes){
      $cell_link = $image .'<strong>'. l($child->name, uc_catalog_term_path($child)) .'</strong>';
      if (variable_get('uc_catalog_show_subcategories', true)){
        $cell_link .= "<br/><span>". implode(', ', $grandchildren) ."</span>\n";
      }
      $child_list[] = $cell_link;
    }
  }
  if ($catalog->image){
    $output .= theme('imagecache', 'thumbnail', $catalog->image['filepath'], $catalog->name, $catalog->name, array('class' => 'category'));
  }
  $header = tapir_get_header('uc_product_table', array());
  $order = substr(tablesort_sql($header), 10);
  if (empty($order)){
    $order = 'p.ordering, n.title';
  }
  $product_types = array_keys(uc_product_node_info());
  $sql = 'SELECT DISTINCT(n.nid), n.sticky, n.title, n.created FROM {node} n INNER JOIN {term_node} tn ON n.nid = tn.nid INNER JOIN {uc_products} AS p ON n.nid = p.nid WHERE tn.tid = %d AND n.status = 1 AND n.type IN ("'. implode('","', $product_types) .'") ORDER BY '. $order;
  $sql_count = 'SELECT COUNT(DISTINCT(n.nid)) FROM {node} n INNER JOIN {term_node} tn ON n.nid = tn.nid INNER JOIN {uc_products} AS p ON n.nid = p.nid WHERE tn.tid = %d AND n.status = 1 AND n.type IN ("'. implode('","', $product_types) .'")';
  $sql = db_rewrite_sql($sql);
  $sql_count = db_rewrite_sql($sql_count);
  $catalog->products = array();
  $result = pager_query($sql, variable_get('uc_product_nodes_per_page', 10), 0, $sql_count, $catalog->tid);
  while ($node = db_fetch_object($result)){
    $catalog->products[] = $node->nid;
  }
  if (count($catalog->products)){
    if (count($links)){
      $output .= theme('links', $links, array('class' => 'links inline')) ."<br />\n";
    }
    $output .= $catalog->description;
    $output .= theme('uc_catalog_products', $catalog->products);
    $output .= theme('pager');
  }
  else{
    // Display table of child categories similar to an osCommerce site's front page.
    $columns = variable_get('uc_catalog_category_columns', 3); // could extract this number to a user-defined field
    $cat_rows = array();
    $row = array();
    $i = 1;
    foreach ($child_list as $cell){
      $row[] = array('data' => $cell, 'class' => 'category width_'. $columns);
      if ($i % $columns == 0){
        $cat_rows[] = $row;
        $row = array();
      }
      $i++;
    }
    if (count($row) > 0 && count($row) < $columns){
      if (count($cat_rows) >= 1){
        $row = array_merge($row, array_fill(count($row), $columns - count($row), array('data' => '&nbsp;', 'class' => 'category width_'. $columns)));
      }
      $cat_rows[] = $row;
    }
    $output .= $catalog->description;
    $output .= theme('table', array(), $cat_rows, array('class' => 'category'));
  }
  
  return $output;
}

function theme_uc_catalog_products($products){
  $table_args = array('nids' => $products, 'attributes' => array('id' => 'category-products'));
  $product_table = tapir_get_table('uc_product_table', $table_args);
  return $product_table;
}

/******************************************************************************
 * Module Functions                                                           *
 ******************************************************************************/

/**
 * Catalog settings form.
 *
 * Configures the display of the catalog breadcrumb.
 */
function uc_catalog_admin_form(){
  $form = array();
  
  $vocabs = array();
  $vocabularies = taxonomy_get_vocabularies();
  foreach ($vocabularies as $vid => $vocabulary){
    $vocabs[$vid] = $vocabulary->name;
  }
  
  $form['uc_catalog_vid'] = array('#type' => 'select',
    '#title' => t('Catalog Vocabulary'),
    '#description' => t("The taxonomy vocabulary that will be considered the product catalog."),
    '#default_value' => variable_get('uc_catalog_vid', 0),
    '#options' => $vocabs,
  );
  
  $form['uc_catalog_url'] = array('#type' => 'textfield',
    '#title' => t('Catalog URL'),
    '#description' => t("The path to the root of the catalog vocabulary. Do not include a trailing slash."),
    '#default_value' => variable_get('uc_catalog_url', 'catalog'),
  );
  
  $form['uc_catalog_breadcrumb'] = array('#type' => 'checkbox',
    '#title' => t('Display catalog breadcrumb'),
    '#default_value' => variable_get('uc_catalog_breadcrumb', true),
  );
  
  $form['uc_catalog_block_nodecount'] = array('#type' => 'checkbox',
    '#title' => t('Display node counts in Catalog Block'),
    '#default_value' => variable_get('uc_catalog_block_nodecount', true),
  );
  
  $form['uc_catalog_breadcrumb_nodecount'] = array('#type' => 'checkbox',
    '#title' => t('Display node counts in Catalog Breadcrumb'),
    '#default_value' => variable_get('uc_catalog_breadcrumb_nodecount', false),
  );
  
  $form['uc_catalog_show_subcategories'] = array('#type' => 'checkbox',
    '#title' => t('Display subcategories in catalog view'),
    '#default_value' => variable_get('uc_catalog_show_subcategories', true),
  );
  $form['uc_catalog_expand_categories'] = array('#type' => 'checkbox',
    '#title' => t('Always expand categories in catalog block'),
    '#default_value' => variable_get('uc_catalog_expand_categories', false),
  );
  $form['uc_catalog_category_columns'] = array('#type' => 'select',
    '#title' => t('Number of columns in the grid of categories'),
    '#default_value' => variable_get('uc_catalog_category_columns', 3),
    '#options' => drupal_map_assoc(uc_range(1, 5)),
  );
  
  return system_settings_form($form);
}

/**
 * Formats the breadcrumb to the current term's ancestry.
 */
function uc_catalog_set_breadcrumb($tid, $is_node = false){
  static $breadcrumbs = array();
  static $terms = array();
  if (variable_get('uc_catalog_breadcrumb', true)){
    if (empty($breadcrumbs)){
      if ($tid != 0){
        $breadcrumbs[] = l(variable_get('uc_catalog_name', t('Catalog')), variable_get('uc_catalog_url', 'catalog'));
      }
      /* else{
        $breadcrumbs[] = l(t('Home'), '');
      } */
    }
    $parents = taxonomy_get_parents_all($tid);
    if (!$is_node){
      array_shift($parents);
    }
    while (count($parents)){
      $current = array_pop($parents);
      if (!in_array($current->tid, $terms)){
        $breadcrumbs[] = l($current->name, uc_catalog_term_path($current));
        $terms[] = $current->tid;
      }
    }
    //print '<pre>'. print_r($breadcrumbs, true) .'</pre>';
    return $breadcrumbs;
  }
  else{
    return null;
  }
}

/**
 * Displays links to all products that have not been categorized.
 */
function uc_catalog_orphaned_products() {
  $output = '<p>'. t('Orphaned products are products that you have created but 
     not yet assigned to a category in your product catalog. All such 
     products will appear as links below that you can follow to edit 
     the product listings to assign them to categories.') .'</p>';

  $query = "SELECT DISTINCT n.nid, n.title FROM {node} AS n LEFT JOIN {term_node} AS tn ON n.nid = tn.nid LEFT JOIN {vocabulary_node_types} AS vnt ON n.type = vnt.type WHERE n.type != 'image' AND tn.tid IS NULL AND vnt.vid = %d";
  $vid = variable_get('uc_catalog_vid', 0);
  $result = db_query($query, $vid);

  $rows = array();
  while ($node = db_fetch_object($result)) {
    $rows[] = l($node->title, 'node/'. $node->nid .'/edit');
  }

  if (count($rows) > 0) {
    $output .= theme('item_list', $rows);
  }
  else{
    $output .= '<p>'. t('All products are currently listed in the catalog.') .'</p>';
  }

  return $output;
}

/**
 * Emulates Drupal's menu system, but based soley on the structure of "Product Catalog".
 *
 * @param $branch
 *   A treeNode as defined in uc_catalog_block. Determines if the URL points to itself,
 *   or possibly one of it's children, if present.
 *
 *   If the URL points to itself or one of it's products, it displays it's name, and
 *   expands to show it's children, otherwise displays a link and a count of the products in it.
 *   If the URL points to one of it's children, it still displays a link and product count,
 *   but must still be expanded.
 *   Otherwise, it is collapsed and a link.
 * @return
 *   An array whose first element is true if the treeNode is in hierarchy of the URL path.
 *   The second element is the HTML of the list item of itself and it's children.
 */
function _uc_catalog_navigation($branch){
  static $terms;
  static $breadcrumb;
  
  
  $branch_path = uc_catalog_term_path($branch);
  if (!isset($breadcrumb)){
    $breadcrumb = drupal_get_breadcrumb();
  }
  $vid = variable_get('uc_catalog_vid', 0);
  if ($_GET['q'] ==  $branch_path){
    // The URL points to this term.
    $here = true;
  }
  else{
    $here = false;
  }
  if (!isset($terms)){
    $terms = taxonomy_node_get_terms_by_vocabulary(arg(1), $vid);
  }
  // Determine whether to expand menu item.
  if ((arg(0) == 'node' && array_key_exists($branch->tid, $terms))){
    $inpath = false;
    foreach ($breadcrumb as $link){
      if (strpos($link, $branch_path) !== false){
        $inpath = true;
      }
    }
  }
  else{
    $inpath = $here;
  }
  
  $num = taxonomy_term_count_nodes($branch->tid);
  
  // Checks to see if node counts are desired in navigation
  $num_text = '';
  if(variable_get('uc_catalog_block_nodecount',TRUE)) {
    $num_text = ' ('.$num.')';
  }

  if (!$num){ // No nodes in category or descendants. Not in path and display nothing.
    return array(false, '');
  }

  $expand = variable_get('uc_catalog_expand_categories', false);
  $link = l($branch->name . $num_text, $branch_path);
  $active_link = l($branch->name .$num_text, $branch_path, array('class' => 'active'));
  if ($expand || count($branch->children)){
    $lis = array();
    foreach($branch->children as $twig){
      // Expand if children are in the menu path. Capture their output.
      list($child_in_path, $lis[]) = _uc_catalog_navigation($twig);
      if ($child_in_path){
        $inpath = $child_in_path;
      }
    }
  }
  $output = theme("uc_catalog_item", $here, $active_link, $lis, $expand, $inpath, $link, count($branch->children));

  // Tell parent category your status, and pass on output.
  return array($inpath, $output);
}

function theme_uc_catalog_item($here, $active_link = '', $lis, $expand, $inpath, $link, $count_children ){
  $output='';
  
  if ($expand || $count_children){
    if ($here){
      $output = '<li class="expanded"><strong>'. $active_link ."</strong>\n";
      if (count($lis)){
        $output .= '<ul class="menu">';
        foreach ($lis as $li){
          $output .= $li ."\n";
        }
        $output .= "</ul>\n";
      }
      $output .= "</li>";
    }
    elseif ($expand || $inpath){
      $output = '<li class="expanded">'. ($referer == $branch_path ? '<strong>' : '') . $link . ($referer == $branch_path ? '</strong>' : '') ."\n";
      if (count($lis)){
        $output .= '<ul class="menu">';
        foreach ($lis as $li){
          $output .= $li;
        }
        $output .= "</ul>\n";
      }
      $output .= "</li>";
    }
    else{
      $output = '<li class="collapsed">'. $link ."</li>\n";
    }
  }
  else{
    $output = '<li class="leaf">'. ($inpath ? '<strong>' : '') . ($here ? $active_link : $link) . ($inpath ? '</strong>' : '') .'</li>'. "\n";
  }

  return $output;
}

function uc_catalog_image_load($term){
  if (is_object($term)){
    $tid = $term->tid;
  }
  else if (is_array($term)){
    $tid = $term['tid'];
  }
  else{
    $tid = $term;
  }
  
  $file = db_fetch_object(db_query("SELECT * FROM {uc_catalog_images} WHERE tid = %d", $tid));
  
  return $file;
}
