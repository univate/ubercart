<?php
// $Id: uc_file.module,v 1.1 2007-11-05 20:31:58 rszrama Exp $

/**
 * @file
 * Allows products to be associated with downloadable files.
 *
 * The uc_file allows ubercart products to have associated downloadable files.
 * Optionally, after a customer purchases such a product they will be sent a 
 * download link via email. Additionally, after logging on a customer can 
 * download files via their account page. Optionally, an admininstrator can set
 * restrictions on how and when files are downloaded.
 *
 * Development sponsored by the Ubercart project.  http://www.ubercart.org
 */
 
define('UC_FILE_PAGER_SIZE',50);
define('UC_FILE_REQUEST_LIMIT',50);
define('UC_FILE_BYTE_SIZE',1024);
define('UC_FILE_RETRO_ORDER_LIMIT',1000);
define('UC_FILE_RETRO_INCOMPLETE',-1);

 /******************************************************************************
 * Hook Functions (Drupal)
 ******************************************************************************/
 
/**
 * Implementation of hook_cron().
 */
function uc_file_cron() {
	$queue = variable_get('uc_file_grant_queue',array());
	
	//Check queued orders for retroactive download purchases
	if (!empty($queue)) {
		$ids = array('fid' => $queue[0]['fid'], 'nid' => $queue[0]['nid'], 'pfid' => $queue[0]['pfid']);
		$order_ids = _user_table_action('allow_retroactive',$ids,$queue[0]['checked'],$queue[0]['remain']);
		$last = ($queue[0]['remain'] > UC_FILE_RETRO_ORDER_LIMIT) ? FALSE : TRUE;
		
		foreach ($order_ids as $index => $order_id) {
			if ($order_id != UC_FILE_RETRO_INCOMPLETE) {
				uc_order_comment_save($order_id, $queue[0]['uid'],$queue[0]['message']);
			}
			else {
				$queue[0]['checked'] += UC_FILE_RETRO_ORDER_LIMIT;
				$queue[0]['remain'] -= UC_FILE_RETRO_ORDER_LIMIT;
			}
		}
		if ($last) {
			array_shift($queue);
		}
		variable_set('uc_file_grant_queue',$queue);
	}
}
 
/**
 * Implementation of hook_form_alter().
 */
function uc_file_form_alter($form_id, &$form) {
	if ($form_id == "uc_product_feature_settings_form") {
		$form['#submit']['uc_file_feature_settings_submit'] = array();
		$form['#validate']['uc_file_feature_settings_validate'] = array();
	}
}

/**
 * Implementation of hook_menu().
 */
function uc_file_menu($may_cache) {
  global $user;
  $items = array();
  
	if ($may_cache) {
		$items[] = array(
	 		'path' => '_autocomplete_file',
			'callback' => '_autocomplete_filename',
			'access' => user_access('administer products'),
			'type' => MENU_CALLBACK,
		);
		$items[] = array(
	 		'path' => 'admin/store/products/files',
			'callback' => 'uc_file_files_admin',
      'title' => t('View file downloads'),
      'description' => t('View all file download features on products.'),
			'access' => user_access('administer products'),
			'type' => MENU_NORMAL_ITEM,
		);
	}
	else {
		if (db_result(db_query("SELECT status FROM {system} WHERE name = 'uc_notify'")) == 1) {
			$items[] = array(
				'path' => 'admin/store/settings/notify/edit/file',
				'title' => t('File download'),
				'access' => user_access('administer store'),
				'callback' => 'drupal_get_form',
				'callback arguments' => array('uc_file_notify_settings'),
				'description' => t('Edit the notification settings for purchased file downloads.'),
				'type' => MENU_LOCAL_TASK,
			);
		}
    $items[] = array(
      'path' => 'user/'. arg(1) .'/files',
      'title' => t('Files'),
      'description' => t('View your purchased files.'),
      'callback' => 'uc_file_user_downloads',
      'callback arguments' => array(arg(1)),
      'access' => (user_access('administer users') || $user->uid == arg(1)) && $user->uid,
      'type' => MENU_LOCAL_TASK,
    );
		$items[] = array(
	 		'path' => 'download/'.arg(1).'/'.arg(2),
			'callback' => '_file_download',
			'callback arguments' => array(arg(1),arg(2)),
			'access' => user_access('download file'),
			'type' => MENU_CALLBACK,
		);
		drupal_add_css(drupal_get_path('module', 'uc_file') .'/uc_file.css');
	}
	
	return $items;
}

/**
 * Implementation of hook_perm().
 */
function uc_file_perm() {
  return array('download file');
}

/**
 * Implementation of hook_user().
 */
function uc_file_user($op, &$edit, &$account, $category = NULL) {
	switch ($op) {
		case 'delete':
			_user_table_action('remove',NULL,$account->uid);
			break;
		case 'form': 
			if (user_access('administer users')) {
				$file_downloads = db_query("SELECT * FROM {uc_file_users} as u INNER JOIN {uc_files} as f ON u.fid = f.fid WHERE `uid` = %d",$account->uid);
				$options = array();
				while ($file_download = db_fetch_object($file_downloads)) {
					$options[$file_download->key] = $file_download->filename;
				}
				$form['file'] = array(
					'#type' => 'fieldset',
					'#title' => t('File downloads'),
					'#collapsible' => TRUE,
					'#collapsed' => TRUE,
					'#weight' => 10
				);
				$form['file']['remove_file'] = array(
					'#type' => 'select',
					'#title' => t('Remove file'),
					'#multiple' => TRUE,
					'#description' => t('Select a file to remove as a download. Hold Ctrl to select or unselect multiple files.'),
					'#options' => $options,
				);
				$form['file']['add_file'] = array(
					'#type' => 'textfield',
					'#title' => t('Add file'),
					'#autocomplete_path' => '_autocomplete_file',
					'#description' => t('Enter the file for the user to download. Entering a directory will allow all files in that directory to be downloadable.'),
				);
			}
			return $form;
			break;
		case 'submit':
			if (!empty($edit['remove_file'])) {
				foreach ($edit['remove_file'] as $hash_key) {
					if (!is_null($hash_key)) {
						_user_table_action('remove',NULL,$account->uid,$hash_key);
					}
				}
			}
			if (!empty($edit['add_file'])) {
				$fid = db_result(db_query("SELECT fid FROM {uc_files} WHERE filename = '%s'",$edit['add_file']));
				_user_table_action('allow',$fid,$account->uid);
			}
			break;
    case 'validate':
			if (!empty($edit['add_file']) && !db_result(db_query("SELECT fid FROM {uc_files} WHERE filename = '%s'",$edit['add_file']))) {
				form_set_error('add_file',t('%file is not a valid file or directory inside file download directory.',array('%file' => $edit['add_file'])));
			}
			break;
    case 'view':
			if (db_result(db_query("SELECT fid FROM {uc_file_users} WHERE uid = %d",$account->uid))) {
				$items['uc_file_download'] = array(
					'value' => l(t("Click here to view your file downloads."),'user/'.$account->uid.'/files'),
					'class' => 'member',
				);
				return array(t('File downloads') => $items);
			}
			break;
		default:
			break;
	}
}
 /******************************************************************************
 * Ãœbercart Hooks                                                             *
 ******************************************************************************/
 
/**
 * Implementation of hook_cart_item().
 */
function uc_file_cart_item($op, &$item) {
	switch ($op) {
		case 'can_ship':
			$files = db_query("SELECT shippable, model FROM {uc_file_products} as fp INNER JOIN {uc_product_features} as pf ON pf.pfid = fp.pfid WHERE nid = %d",$item->nid);
			while ($file = db_fetch_object($files)) {
				$sku = (empty($item->data['model'])) ? $item->model : $item->data['model'];
				if ($sku == $file->model || empty($file->model)) {
					return ($file->shippable) ? TRUE : FALSE;
				}
			}
			break;
	}
}

/**
 * Implementation of hook_order().
 */
function uc_file_order($op, $order, $status) {
	global $user;
	
  switch ($op) {
    case 'update':
			if (($order->uid > 0) && ($order_user = user_load(array('uid' => $order->uid))) !== FALSE) {
				foreach ($order->products as $product) {
					$files = db_query("SELECT fp.fid, fp.pfid, model, f.filename FROM {uc_file_products} AS fp INNER JOIN {uc_product_features} AS pf ON pf.pfid = fp.pfid INNER JOIN {uc_files} as f ON f.fid = fp.fid WHERE nid = %d",$product->nid);
					while ($file = db_fetch_object($files)) {
						if (($file->model == $product->model || empty($file->model)) && $status == variable_get('uc_file_default_order_status','completed')) {
							$downloads = _user_table_action('allow',$file->fid,$order_user->uid,$file->pfid);
							$user_downloads = (!empty($user_downloads)) ? array_merge($user_downloads,$downloads) : $downloads ;
							$comment = (_get_dir_file_ids($file->fid)) ? t('User can now download files in the directory %dir', array('%dir' => $file->filename)) : t('User can now download the file %file', array('%file' => basename($file->filename)));
							uc_order_comment_save($order->order_id, $user->uid, $comment);
						}
					}
				}
				if (!is_null($user_downloads)) {
					_email_file_download($order_user,$order,$user_downloads);
				}
			}
			break;
		default:
			break;
	}
}

/**
 * Implementation of hook_product_feature().
 */
function uc_file_product_feature() {
  $features[] = array(
    'id' => 'file',
    'title' => t('File download'),
    'callback' => 'uc_file_feature_form',
		'delete' => 'uc_file_feature_delete',
    'settings' => 'uc_file_feature_settings',
  );
	
	return $features;
}

/**
 * Implementation of hook_token_list().
 */
function uc_file_token_list($type = 'all') {
  if ($type == 'uc_file' || $type == 'ubercart' || $type == 'all') {
		$tokens['uc_file']['file-downloads'] = t('The list of file download links (if any) associated with an order');
  }
	
  return $tokens;
}

/**
 * Implementation of hook_token_values().
 */
function uc_file_token_values($type, $object = NULL) {
  switch ($type) {
    case 'uc_file':
			$output_file_downloads = '';
			if (!empty($object)) {
				foreach ($object as $file_download) {
					$filename = basename(db_result(db_query("SELECT filename FROM {uc_files} WHERE `fid` = %d",$file_download->fid)));
					$download_url = url('download/'.$file_download->fid.'/'.$file_download->key,NULL,NULL,TRUE);
					$output_file_downloads .= '<a href="'.$download_url.'">'.$download_url.'</a>'."\n";
				}
			}
			$values['file-downloads'] = $output_file_downloads;
      break;
  }
	
  return $values;
}

/**
 * Implementation of hook_uc_message().
 */
function uc_file_uc_message() {
	$messages['uc_file_download_subject'] = t("File Downloads for Order# [order-id]");
	$messages['uc_file_download_message'] = t("Your order (order# [order-link]) at [store-name] included file download(s). You may access them with the following link(s):\n\n[file-downloads]\n\nAfter downloading these files these links will have expired. If you need to download the files again, you can login at [site-login] and visit the \"My Account\" section of the site.\n\nThanks again,\n\n[store-name]\n[site-slogan]");
	
	return $messages;
}

 /******************************************************************************
 * Callback Functions, Forms, and Tables
 ******************************************************************************/
 
/**
 * product_feature delete function
 */ 
function uc_file_feature_delete($feature) {
	db_query("DELETE FROM {uc_file_products} WHERE pfid = %d",$feature['pfid']);
}

/**
 * Form builder for hook_product_feature
 */ 
function uc_file_feature_form($node, $feature) {
	_file_table_action('insert');
	$models = (!_get_adjustment_models($node->nid)) ? array(NULL => 'Any', $node->model => $node->model) : array(NULL => 'Any', $node->model => $node->model) + _get_adjustment_models($node->nid);
	
	if (!empty($feature)) {
		$file_product = db_fetch_object(db_query("SELECT * FROM {uc_file_products} as p INNER JOIN {uc_files} as f ON p.fid = f.fid WHERE pfid = %d",$feature['pfid']));
		$default_feature = $feature['pfid'];
		$default_model = $file_product->model;
		$default_filename = $file_product->filename;
		$default_description = $file_product->description;
		$default_shippable = $file_product->shippable;
	}
	else {
		$default_shippable = $node->shippable;
	}
	
	$form['nid'] = array(
			'#type' => 'value',
			'#value' => $node->nid,
	);
	$form['pfid'] = array(
		'#type' => 'value',
		'#value' => $default_feature,
	);
	$form['uc_file_model'] = array(
		'#type' => 'select',
		'#title' => t('Model/SKU'),
		'#default_value' => $default_model,
		'#description' => t('This is the model/SKU that will need to be purchased to obtain the file download.'),
		'#options' => $models,
	);
	$form['uc_file_filename'] = array(
		'#type' => 'textfield',
		'#title' => t('File download'),
		'#default_value' => $default_filename,
		'#autocomplete_path' => '_autocomplete_file',
		'#description' => t('The file that can be downloaded when product is purchased. Entering a directory will allow all files in that directory to be downloadable.'),
	);
	$form['uc_file_description'] = array(
		'#type' => 'textfield',
		'#title' => t('Description'),
		'#default_value' => $default_description,
		'#maxlength' => 255,
		'#description' => t('A description of the download associated with the product.'),
	);
	$form['uc_file_shippable'] = array (
		'#type' => 'checkbox', 
		'#title' => t('Shippable product'),
		'#default_value' => $default_shippable,
		'#description' => t('Check if this product model/SKU file download is also associated with a shippable product.'),
	);
	$form['uc_file_retroactive'] = array (
		'#type' => 'checkbox', 
		'#title' => t('Retroactive purchase'),
		'#description' => t('Enable the download for customers who have previously purchased this product model/SKU.'),
	);
	
	return uc_product_feature_form($form);
}
function uc_file_feature_form_validate($form_id, $form_values) {
	if (!db_result(db_query("SELECT fid FROM {uc_files} WHERE filename = '%s'",$form_values['uc_file_filename']))) {
		form_set_error('uc_file_filename',t('%file is not a valid file or directory inside file download directory.',array('%file' => $form_values['uc_file_filename'])));
	}
}
function uc_file_feature_form_submit($form_id, $form_values) {
	global $user;
	
	//Build product feature descriptions
	$description = (empty($form_values['uc_file_model'])) ? t('When product ') : t('When product model !sku ',array('!sku' => $form_values['uc_file_model']));
	$description .= t(' is purchased customer can download ');
	if (is_dir(variable_get('uc_file_base_dir', NULL)."/".$form_values['uc_file_filename'])) {
		$download = t('the files inside the !dir directory.', array('!dir' => $form_values['uc_file_filename']));
		$description .= $download;
		$dir = (substr($form_values['uc_file_filename'],-1) != "/") ? $form_values['uc_file_filename'].'/' : $form_values['uc_file_filename'];
		$fid = db_result(db_query("SELECT fid FROM {uc_files} WHERE filename = '%s'",$dir));
	}
	else {
		$download = t('the file !file.', array('!file' => basename($form_values['uc_file_filename'])));
		$description .= $download;
		$fid = db_result(db_query("SELECT fid FROM {uc_files} WHERE filename = '%s'",$form_values['uc_file_filename']));
	}
	$description .= ($form_values['uc_file_shippable']) ? t(' (Shippable: Yes)') : t(' (Shippable: No)');
	$shippable = ($form_values['uc_file_shippable']) ? 1 : 0;
	
	//Insert or update uc_file_product table
	if (empty($form_values['pfid'])) {
		$pfid = db_next_id('{uc_product_features}_pfid') + 1;
	}
	else {
		$pfid = $form_values['pfid'];
		db_query("DELETE FROM {uc_file_products} WHERE pfid = %d",$pfid);
	}
	db_query("INSERT INTO {uc_file_products} (pfid, fid, model, description, shippable) VALUES (%d, %d, '%s', '%s', %d)",$pfid,$fid,$form_values['uc_file_model'],$form_values['uc_file_description'],$shippable);
	
	//If chosen, check for users that have purchased this product sku and enable the download
	if ($form_values['uc_file_retroactive']) {
		$order_ids = _user_table_action('allow_retroactive', array('fid' => $fid, 'nid' => $form_values['nid'], 'pfid' => $pfid));
		$message = t('User has been retroactively allowed to download ').$download;
		
		foreach ($order_ids as $index => $order_id) {
			if ($order_id != UC_FILE_RETRO_INCOMPLETE) {
				uc_order_comment_save($order_id, $user->uid,$message);
			}
			else {
				drupal_set_message('Not all orders have been checked for purchases of this product. Ubercart will periodically check orders via cron until it has searched all existing orders.');
				$queue = variable_get('uc_file_grant_queue',array());
				$queue[] = array('submitted' => time(), 'fid' => $fid, 'pfid' => $pfid, 'uid' => $user->uid, 'nid' => $form_values['nid'], 'message' => $message, 'checked' => UC_FILE_RETRO_ORDER_LIMIT, 'remain' => $order_ids[$index+1]);
				variable_set('uc_file_grant_queue',$queue);
				break;
			}
		}
	}
	
	$data = array(
		'pfid' => $pfid,
		'nid' => $form_values['nid'],
		'fid' => 'file',
		'description' => $description,
	);
	
  return uc_product_feature_save($data);
}

/**
 * Form builder for file settings
 */ 
function uc_file_feature_settings() {
	drupal_add_js('$(document).ready(function() { if (document.getElementById("edit-uc-file-download-limit-duration-granularity").value == "never") {document.getElementById("edit-uc-file-download-limit-duration-qty").disabled = true;} });', 'inline');
	$statuses = array();
	foreach (uc_order_status_list('general') as $status) {
    $statuses[$status['id']] = $status['title'];
  }
	
	$form['uc_file_default_order_status'] = array(
		'#type' => 'select',
		'#title' => t('Order status'),
		'#default_value' => variable_get('uc_file_default_order_status','completed'),
		'#description' => t('Where in the order status the user will be given the file download.'),
		'#options' => $statuses,
	);
	$form['uc_file_base_dir'] = array(
		'#type' => 'textfield',
		'#title' => t('Files path'),
		'#description' => t('The absolute path where files used for file downloads are located. For security reasons, it is reccommended to choose a path outside the web root.'),
		'#default_value' => variable_get('uc_file_base_dir', NULL),
	);
	$form['uc_file_file_mask'] = array(
		'#type' => 'textfield',
		'#title' => t('Files mask'),
		'#description' => t("The regular expression used for masking files in files directory. Don't change unless you know what you're doing."),
		'#default_value' => variable_get('uc_file_file_mask',".*"),
	);
  $form['uc_file_download_limit'] = array(
    '#type' => 'fieldset',
    '#title' => t('Download limits'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
  );
	$form['uc_file_download_limit']['uc_file_download_limit_number'] = array(
		'#type' => 'textfield',
		'#title' => t('Downloads'),
		'#description' => t("The number of times a file can be downloaded. Leave empty to set no limit."),
		'#default_value' => variable_get('uc_file_download_limit_number',NULL),
		'#maxlength' => 4,
		'#size' => 4,
	);
	$form['uc_file_download_limit']['uc_file_download_limit_addresses'] = array(
		'#type' => 'textfield',
		'#title' => t('IP addresses'),
		'#description' => t("The number of unique IPs that a file can be downloaded from. Leave empty to set no limit."),
		'#default_value' => variable_get('uc_file_download_limit_addresses',NULL),
		'#maxlength' => 4,
		'#size' => 4,
	);
	$form['uc_file_download_limit']['uc_file_download_limit_duration_qty'] = array(
		'#type' => 'textfield',
		'#title' => t('Time'),
		'#default_value' => (variable_get('uc_file_download_limit_duration_granularity','never') == 'never') ? NULL : variable_get('uc_file_download_limit_duration_qty',NULL),
		'#size' => 4,
		'#maxlength' => 4,
		'#prefix' => '<div class="duration">',
		'#suffix' => '</div>',
	);
	$form['uc_file_download_limit']['uc_file_download_limit_duration_granularity'] = array(
		'#type' => 'select',
		'#options' => array(
			'never' => t('never'),
			'day' => t('day(s)'),
			'week' => t('week(s)'),
			'month' => t('month(s)'),
			'year' => t('year(s)')
		),
		'#default_value' => variable_get('uc_file_download_limit_duration_granularity','never'),
		'#attributes' => array(
			'onchange' => 
			'if (this.value == "never") {
				document.getElementById("edit-uc-file-download-limit-duration-qty").disabled = true; 
			}
			else {
				document.getElementById("edit-uc-file-download-limit-duration-qty").disabled = false; 
			}'
		),
		'#description' => t('How long after a product has been purchased until its file download expires.'),
		'#prefix' => '<div class="duration">',
		'#suffix' => '</div>',
	);
	return $form;
}
function uc_file_feature_settings_validate($form_id, $form_values) {
	if (!empty($form_values['uc_file_base_dir']) && $form_values['op'] == 'Save configuration' && 
			!is_dir($form_values['uc_file_base_dir'])) {
		form_set_error('uc_file_base_dir', t('%dir is not a valid file or directory',array('%dir' => $form_values['uc_file_base_dir'])));
	}
}
function uc_file_feature_settings_submit($form_id, $form_values) {
	$action = (empty($form_values['uc_file_base_dir'])) ? 'empty' : 'insert';
	_file_table_action($action);
	_file_table_action('refresh');
}

/**
 * Page builder for file products admin
 */ 
function uc_file_files_admin() {
	_file_table_action('insert');
	return drupal_get_form('uc_file_files_form');
}

/**
 * implementation of theme_form($form)
 */
function theme_uc_file_files_form($form) {
	$output = '';
	
	//Only display files on 1st form step
	if ($form['step']['#value'] == 1) {
		$files = array();
		$args = array('form' => $form);
		$header = tablesort_sql(tapir_get_header('uc_file_files_table', array()));
		$order = (empty($header)) ? "ORDER BY f.filename ASC" : $header.",f.filename ASC";
		$query = pager_query(db_rewrite_sql("SELECT f.filename, n.title, fp.model, f.fid, pf.pfid, n.nid FROM {uc_files} as f LEFT JOIN {uc_file_products} as fp ON (f.fid = fp.fid) LEFT JOIN {uc_product_features} as pf ON (fp.pfid = pf.pfid) LEFT JOIN {node} as n ON (pf.nid = n.nid) ". $order), UC_FILE_PAGER_SIZE, 0, NULL);
		while ($file = db_fetch_object($query)) {
			$files[] = $file;
		}
		$args['files'] = $files;
		
		$output .= '<p>'.t("File downloads can be attached to any &Uuml;bercart product as a product feature. For security reasons the ").l(t("file downloads directory"),"admin/store/settings/products/edit/features").t(" is seperated from ").l(t("Drupal's file system"),"admin/settings/file-system").t(". Here are the list of files (and their associated &Uuml;bercart products) that can be used for file downloads.").'</p>';
		$output .= drupal_render($form['uc_file_action']);
		$output .= tapir_get_table('uc_file_files_table', $args);
		$output .= theme('pager', NULL, UC_FILE_PAGER_SIZE, 0);
	}
	
	//Checkboxes already rendered in uc_file_files_table
	foreach ($form as $form_element => $form_data) {
		if (strpos($form_element,'file_select_') !== FALSE) {
			unset($form[$form_element]);
		}
	}
	$output .= drupal_render($form);
	
	return $output;
}

/**
 * Form builder for file products admin
 */ 
function uc_file_files_form($form_values = NULL) {
  $form['step'] = array(
    '#type' => 'hidden',
    '#value' => (!isset($form_values)) ? 1 : $form_values['step'] + 1,
  );
	
	switch ($form['step']['#value']) {
		case 1:	//Display File Options and File checkboxes
			$files = db_query("SELECT * FROM {uc_files}");
			$file_actions = array('uc_file_delete' => t('Delete file(s)'),'uc_file_upload' => t('Upload file'));
			
			//Check any if any hook_file_action('info',$args) are implemented
			foreach (module_implements('file_action') as $module) {
				$name = $module .'_file_action';
				$result = $name('info', NULL);
				if (is_array($result)) {
					foreach ($result as $key => $action) {
						if ($key != 'uc_file_delete' && $key != 'uc_file_upload') {
							$file_actions[$key] = $action;
						}
					}
				}
			}
			
			while ($file = db_fetch_object($files)) {
				$form['file_select_'.$file->fid] = array ('#type' => 'checkbox');
			}
			$form['uc_file_action'] = array(
				'#type' => 'fieldset',
				'#title' => t('File options'),
				'#collapsible' => FALSE,
				'#collapsed' => FALSE,
			);
			$form['uc_file_action']['action'] = array(
				'#type' => 'select',
				'#title' => t('Action'), 
				'#options' => $file_actions,
				'#prefix' => '<div class="duration">',
				'#suffix' => '</div>',
			);
			$form['uc_file_action']['submit'] = array(
				'#type' => 'submit', 
				'#value' => t('Perform action'),
				'#prefix' => '<div class="duration">',
				'#suffix' => '</div>',
			);
			break;
		case 2: //Perform File Action (Upload, Delete, hooked in actions)
			$file_ids = array();
			foreach ($form_values as $name => $form_value) {
				if (strpos($name,'file_select_') !== FALSE) {
					$file_ids[] = intval(str_replace('file_select_','',$name));
				}
			}
			$form['file_ids'] = array('#type' => 'value','#value' => $file_ids);
			$form['action'] = array('#type' => 'value','#value' => $form_values['action']);
			
			//Switch to an action to perform
			switch ($form_values['action']) {
				case 'uc_file_delete': //Delete selected files
					foreach ($file_ids as $file_id) {
						$filename = db_result(db_query("SELECT filename FROM {uc_files} WHERE `fid` = %d",$file_id));
						$filename = (substr($filename,-1) == "/") ? $filename.' ('.t('directory').')' : $filename;
						$file_list[] = $filename;
					}
					$form['files'] = array(
						'#type' => 'markup',
						'#value' => theme_item_list($file_list,NULL,'ul',array('class' => 'file-name')),
					);
					$form['recurse_directories'] = array(
						'#type' => 'checkbox',
						'#title' => t('Delete selected directories and their sub directories'),
					);
					$form = confirm_form($form,t('Delete the following file(s)?'),'admin/store/products/files',t('Deleting a file will remove all its associated file downloads and product features. Removing a directory will remove any files it contains and their associated file downloads and product features.'),t('Yes'),t('No'));
					break;
				case 'uc_file_upload': //Upload file
					drupal_set_title(t('Upload File'));
					$max_bytes = trim(ini_get('post_max_size'));
					$directories = array( '' => '/');
					
					switch (strtolower($max_bytes{strlen($max_bytes)-1})) {
							case 'g':
									$max_bytes *= 1024;
							case 'm':
									$max_bytes *= 1024;
							case 'k':
									$max_bytes *= 1024;
					}
					
					$files = db_query("SELECT * FROM {uc_files}");
					while ($file = db_fetch_object($files)) {
						if (is_dir(variable_get('uc_file_base_dir', NULL)."/".$file->filename)) {
							$directories[$file->filename] = $file->filename;
						}
					}
					
					$form['#attributes']['enctype'] = 'multipart/form-data'; 
					$form['upload_dir'] = array(
						'#type' => 'select',
						'#title' => t('Directory'),
						'#description' => t('The directory to upload the file to. The default directory is the root of the file downloads directory.'),
						'#options' => $directories,
					);
					$form['upload'] = array(
						'#type' => 'file', 
						'#title' => t('File'), 
						'#description' => t('The maximum file size that can be uploaded is %size bytes. You will need to use a different method to upload the file to the directory (e.g. FTP, SSH) if your file exceeds this size.',array('%size' => number_format($max_bytes))),
					);
					$form['submit'] = array(
						'#type' => 'submit', 
						'#value' => t('Upload'),
					);
					break;
				default:
					//Check any if any hook_file_action('form',$args) are implemented
					foreach (module_implements('file_action') as $module) {
						$name = $module .'_file_action';
						$result = $name('form', array('action' => $form_values['action'], 'file_ids' => $file_ids));
						$form = (is_array($result)) ? array_merge($form, $result) : $form;
					}
					break;
			}
			break;
		default:
			break;
	}
	$form['#multistep'] = TRUE;
	$form['#redirect'] = FALSE;
	
	return $form;
}
function uc_file_files_form_validate($form_id, $form_values) {
	
	switch ($form_values['step']) {
		case 2:
			switch ($form_values['action']) {
				case 'uc_file_delete': //Nothing to validate for file delete
					break;
				case 'uc_file_upload':
					//Check any if any hook_file_action('validate',$args) are implemented
					if ($temp_file = file_check_upload()) {
						foreach (module_implements('file_action') as $module) {
							$name = $module .'_file_action';
							$result = $name('upload_validate', array('file_object' => $temp_file, 'form_id' => $form_id, 'form_values' => $form_values));
						}
					}
					else {
						form_set_error('',t('An error occurred while uploading the file'));
					}
					break;
				default:
					//Check any if any hook_file_action('validate',$args) are implemented
					foreach (module_implements('file_action') as $module) {
						$name = $module .'_file_action';
						$result = $name('validate', array('form_id' => $form_id, 'form_values' => $form_values));
					}
					break;
			}
			break;
		default:
			break;
	}
}
function uc_file_files_form_submit($form_id, $form_values) {
	
	switch ($form_values['step']) {
		case 2:
			switch ($form_values['action']) {
				case 'uc_file_delete':
					foreach ($form_values['file_ids'] as $file_id) {
						_file_table_action('remove', $file_id, $form_values['recurse_directories'], TRUE);
					}
					drupal_set_message(t('The select file(s) have been deleted.'));
					break;
				case 'uc_file_upload':
					$dir = variable_get('uc_file_base_dir', NULL)."/";
					$dir = (is_null($form_values['upload_dir'])) ? $dir : $dir.$form_values['upload_dir'];
					if (is_dir($dir)) {
						if ($file_object = file_save_upload('upload', FALSE)) {
							$temp_file = $file_object->filepath;
							copy($file_object->filepath,$dir.basename($file_object->filepath));
							$file_object->filepath = $dir.basename($file_object->filepath);
							unlink($temp_file);
							
							//Check any if any hook_file_action('upload',$args) are implemented
							foreach (module_implements('file_action') as $module) {
								$name = $module .'_file_action';
								$result = $name('upload', array('file_object' => $file_object, 'form_id' => $form_id, 'form_values' => $form_values));
							}
							
							_file_table_action('insert');
							drupal_set_message(t('The %file has been uploaded to %dir',array('%file' => basename($file_object->filepath), '%dir' => $dir)));
						}
						else {
							drupal_set_message(t('An error occurred while copying the file to %dir',array('%dir' => $dir)));
						}
					}
					else {
						drupal_set_message(t('Can not move file to %dir',array('%dir' => $dir)));
					}
					break;
				default:
					//Check any if any hook_file_action('validate',$args) are implemented
					foreach (module_implements('file_action') as $module) {
						$name = $module .'_file_action';
						$result = $name('submit', array('form_id' => $form_id, 'form_values' => $form_values));
					}
					break;
			}
			drupal_goto('admin/store/products/files');
			break;
		default:
			break;
	}
}

/**
 * Form builder for file download notification settings.
 */
function uc_file_notify_settings() {
	$form['uc_file_download_notification'] = array(
		'#type' => 'checkbox',
		'#default_value' => variable_get('uc_file_download_notification',FALSE),
		'#title' => t('Send email to customer with file download link(s)'),
	);
  $form['uc_file_download_notification_subject'] = array(
    '#type' => 'textfield',
    '#title' => t('Message subject'),
		'#default_value' => variable_get('uc_file_download_notification_subject',uc_get_message('uc_file_download_subject')),
  );
  $form['uc_file_download_notification_message'] = array(
    '#type' => 'textarea',
    '#title' => t('Message text'),
		'#default_value' => variable_get('uc_file_download_notification_message',uc_get_message('uc_file_download_message')),
    '#description' => t('The message the user receives after purchasing products with file downloads ('.l(t('uses uc_order, uc_file, and global tokens'),'admin/store/help/tokens').')'),
		'#rows' => 10,
  );
	
  return system_settings_form($form);
}

/**
 * Table builder for file products admin
 */ 
function uc_file_files_table($op, $args = array()) {
  switch ($op) {
    case 'fields':
			$fields = array();
			$fields[] = array('name' => 'select','title' => t(''), 'weight' => 0, 'enabled' => TRUE);
			$fields[] = array('name' => 'filename','title' => t('File'), 'weight' => 1, 'enabled' => TRUE, 'attributes' => array('field' => 'f.filename'));
			$fields[] = array('name' => 'product','title' => t('Product'), 'weight' => 2, 'enabled' => TRUE, 'attributes' => array('field' => 'n.title'));
			$fields[] = array('name' => 'model','title' => t('Model/SKU'), 'weight' => 3, 'enabled' => TRUE, 'attributes' => array('field' => 'fp.model'));
      return $fields;
    case 'data':
			$data = array();
			$files = _group_filenames($args['files']);
			foreach ($files as $file) {
				$data['select'][] = drupal_render($args['form']['file_select_'.$file->fid]);
				$filename = (is_dir(variable_get('uc_file_base_dir', NULL)."/".$file->filename)) ? '<strong>'.$file->filename.'</strong>' : $file->filename;
				$data['filename'][] = ($filename == $last_filename) ? '' : $filename;
				if ($filename == $last_filename && !empty($data['#attributes'])) {
					$data['#attributes'][count($data['#attributes'])-1] = array('class' => 'group');
				}
				$last_filename = (empty($last_filename) || $filename != $last_filename) ? $filename : $last_filename;
				$data['product'][] = (!empty($file->title)) ? l($file->title,'node/'.$file->nid) : "";
				$data['model'][] = (!empty($file->model)) ? $file->model : "";
				$data['#attributes'][] = array();
			}
			return $data;
    case 'attributes':
      return array('class' => 'file-table');
  }
}
 
/**
 * Table builder for user downloads
 */ 
function uc_file_user_downloads($uid) {
  drupal_set_title(t('File downloads'));
  $breadcrumb = drupal_get_breadcrumb();
  $breadcrumb[] = l(t('My account'), 'user/'. arg(1));
  drupal_set_breadcrumb($breadcrumb);
	
  $header = array(
    array('data' => t('Purchased'), 'field' => 'u.granted', 'sort' => 'desc'),
		array('data' => t('Filename'), 'field' => 'f.filename'),
		array('data' => t('Description'), 'field' => 'p.description'),
		array('data' => t('Downloads'), 'field' => 'u.accessed'),
  );
	$sql = "SELECT `granted`, `filename`, `accessed`, `description`, `key`, f.fid FROM {uc_file_users} as u LEFT JOIN {uc_files} as f ON u.fid = f.fid LEFT JOIN {uc_file_products} as p ON p.pfid = u.pfid WHERE uid = %d";
	$files = pager_query($sql.tablesort_sql($header), UC_FILE_PAGER_SIZE, 0, NULL, $uid);
	
	while ($file = db_fetch_object($files)) {
		$expiration = _file_expiration_date($file->granted);
		$file_link = (!$expiration) ? l(basename($file->filename),'download/'.$file->fid.'/'.$file->key) : ((time() > $expiration) ? basename($file->filename) : l(basename($file->filename),'download/'.$file->fid.'/'.$file->key).' ('.t('expires on ').date('m/d/Y', $expiration).')');
		
    $rows[] = array(
      array('data' => date('m/d/Y', $file->granted), 'class' => 'date-row'),
			array('data' => $file_link, 'class' => 'filename-row'),
			array('data' => $file->description, 'class' => 'description-row'),
			array('data' => $file->accessed, 'class' => 'download-row'),
		);
	}
	if (empty($rows)) {
		$rows[] = array(array('data' => t('No downloads found'), 'colspan' => 4));
	}
	
	$output = theme('table', $header, $rows).theme('pager', NULL, UC_FILE_PAGER_SIZE, 0);
	return $output;
}

/*******************************************************************************
 * Module and Helper Functions
 ******************************************************************************/
 
/**
 * Function implements Drupal autocomplete textfield
 * @return:
 * Sends string containing javascript array of matched files
 */
function _autocomplete_filename() {
	//Done to catch "/" characters that drupal autocomplete doesn't escape
	$url = explode("_autocomplete_file/",$_SERVER['REQUEST_URI']);
	$string = $url[1];
	$matches = array();
	$files = db_query("SELECT filename FROM {uc_files} WHERE filename LIKE LOWER('%s')","%%".$string."%%");
	
	while ($file = db_fetch_object($files)) {
		$matches[check_plain($file->filename)] = check_plain($file->filename);
	}
  print drupal_to_js($matches);
  exit();
}

/**
 * Function emails a user with download links for a product file download
 * @param $user
 *   The Drupal user object
 * @param $order
 *   The order object associated with message
 * @param $file_user
 *   An array for user file downloads (uc_file_user row) associated with message
 * @return:
 * Sends result of drupal_mail
 */
function _email_file_download($user, $order, $file_users) {
	if (!variable_get('uc_file_download_notification',FALSE)) {
		return;
	}
	$token_filters = array ('global' => NULL,'user' => $user,'uc_order' => $order,'uc_file' => $file_users);
	$key = 'uc_file_download_notify';
	$to = $order->primary_email;
	$from = variable_get('uc_store_email_from', ini_get('sendmail_from'));
	$subject = token_replace_multiple(variable_get('uc_file_download_notification_subject',uc_get_message('uc_file_download_subject')), $token_filters);
	$body = token_replace_multiple(variable_get('uc_file_download_notification_message',uc_get_message('uc_file_download_message')), $token_filters);
	
	//drupal_set_message("Mail Sent<br/>key: $key,<br/>to: $to,<br/>subject: $subject,<br/>body: $body,<br/>from: $from,<br/>");
	return drupal_mail($key, $to, $subject, $body, $from, uc_notify_headers());
}

/**
 * Called when a user requests a file download, function checks download 
 * limits then checks for any implementation of hook_download_authorize. 
 * Passing that, the function _file_download_transfer is called.
 * @param $fid
 *   The fid of the file specified to download. 
 * @param $key
 *   The hash key of a user's download
 */
function _file_download($fid, $key) {
	global $user; 
	$ip = $_SERVER['REMOTE_ADDR'];
	$message_admin = t('Please contact the site administrator if this message has been received in error.');
	$message_user = ($user->uid) ? t("The user %username ", array('%username' => $user->name)) : t('The IP address %ip ', array('%ip' => $ip));
	$file_download = db_fetch_object(db_query("SELECT * FROM {uc_file_users} WHERE `fid` = %d AND `key` = '%s'",$fid,$key));
	$request_cache = cache_get('uc_file_'.$ip);
	$requests = ($request_cache) ? $request_cache->data+1 : 1;
	
	if ($requests > UC_FILE_REQUEST_LIMIT) {
		_file_download_deny(t('You have attempted to download an incorrect file URL too many times. ').$message_admin);
	}
	
	if (!$file_download) {
		cache_set('uc_file_'.$ip,'cache',$requests,time()+86400);
		if ($requests = UC_FILE_REQUEST_LIMIT) {
			watchdog('uc_file',$message_user.t("has been temporarily banned from file downloads."),WATCHDOG_WARNING);
		}
		_file_download_deny(t("The following URL is not a valid download link. ").$message_admin);
	}
	else {
		$ip_limit = variable_get('uc_file_download_limit_addresses',NULL);
		$addresses = unserialize($file_download->addresses);
		
		if (!empty($ip_limit) && !in_array($ip, $addresses) && count($addresses) >= $ip_limit) {
			watchdog('uc_file',$message_user.t('has been denied a file download by downloading it from too many IP addresses. '),WATCHDOG_WARNING);
			_file_download_deny(t("You have downloaded this file from too many different locations. ").$message_admin);
		}
		else {
			$download_limit = variable_get('uc_file_download_limit_number',NULL);
			
			if (!empty($download_limit) && $file_download->accessed >= $download_limit) {
				watchdog('uc_file',$message_user.t('has been denied a file download by downloading it too many times. '),WATCHDOG_WARNING);
				_file_download_deny(t("You have downloaded this file too many times. ").$message_admin);
			}
			else {
				$duration_limit = _file_expiration_date($file_download->granted);
				
				if ($duration_limit !== FALSE && time() >= $duration_limit) {
					watchdog('uc_file',$message_user.t('has been denied an expired file download. '),WATCHDOG_WARNING);
					_file_download_deny(t("This file download has expired. ").$message_admin);
				}
				else {
					//Check any if any hook_download_authorize calls deny the download
					foreach (module_implements('download_authorize') as $module) {
						$name = $module .'_download_authorize';
						$result = $name($user, $file_download);
						if (!$result) {
							_file_download_deny();
						}
					}
					$filename = db_result(db_query("SELECT filename FROM {uc_files} WHERE `fid` = %d",$fid));
					watchdog('uc_file',$message_user.t('has started download of the file %filename. ', array('%filename' => basename($filename))),WATCHDOG_NOTICE);
					_file_download_transfer($file_download,$ip,$file_download->fid);
				}
			}
		}
	}
}

/**
 * Deny a file download
 * @param $message
 *   The optional message to send to the user
 */
function _file_download_deny($message = NULL) {
	if (!is_null($message)) {
		drupal_set_message($message,'error');
	}
	drupal_access_denied();
	exit();
}

/**
 * Send the file's binary data to a user via HTTP and update 
 * the uc_file_users table 
 * @param $file_user
 *   The file_user object from the uc_file_users
 * @param $ip
 *   The string containing the ip address the download is going to
 * @param $fid
 *   The file id of the file to transfer
 */
function _file_download_transfer($file_user, $ip, $fid) {
	$file = db_result(db_query("SELECT filename FROM {uc_files} WHERE `fid` = %d",$fid));
	$file_path = variable_get('uc_file_base_dir', NULL)."/".$file;
	
	if (!is_file($file_path)) {
		drupal_set_message(t('The file %filename could not be found. Please contact the site administrator.',array('%filename' => basename($file))),'error');
		drupal_not_found();
		exit();
	}
	else {
		ob_end_clean();
		$http_headers = array (
			'Pragma: no-cache',
			'Expires: 0',
			'Cache-Control: no-cache, must-revalidate',
			'Cache-Control: private',
			'Content-Transfer-Encoding: binary',
			'Content-Length:' . filesize($file_path),
			'Content-Disposition: attachment; filename="'.basename($file).'"',	
			'Content-Type: application/octet-stream'
		);
		foreach ($http_headers as $header) {
			$header = preg_replace('/\r?\n(?!\t| )/', '', $header);
			drupal_set_header($header);
		}
		
		$data = fopen($file_path,'rb');
		while (!feof($data)) {
			print fread($data, UC_FILE_BYTE_SIZE);
		}
		fclose($data);
		_user_table_action('download',$file_user,$ip);
		exit();
	}
}

/**
 * Function will return a file expiration date given a purchase date
 * @param $purchase_date
 *   The purchase date for the file
 * @return:
 * A UNIX timestamp representing the second the file download expires or FALSE
 * if there won't be an expiration
 */
function _file_expiration_date($purchase_date = NULL) {
	$purchase_date = (!is_null($purchase_date)) ? $purchase_date : time();
	$quantity = variable_get('uc_file_download_limit_duration_qty',NULL);
	$quantity = (!is_null($quantity)) ? $quantity : 1;
	
	switch (variable_get('uc_file_download_limit_duration_granularity','never')) {
		case 'day':
			return (86400 * $quantity) + $purchase_date;
		case 'week':
			return (604800 * $quantity) + $purchase_date;
		case 'month':
			return mktime(date("H",$purchase_date), date("i",$purchase_date), date("s",$purchase_date), date("m",$purchase_date)+$quantity, date("d",$purchase_date), date("Y",$purchase_date));
		case 'year':
			return mktime(date("H",$purchase_date), date("i",$purchase_date), date("s",$purchase_date), date("m",$purchase_date), date("d",$purchase_date), date("Y",$purchase_date)+$quantity);
		default:
	}
	return FALSE;
}

/**
 * Function performs a specified action on the uc_files table 
 * @param $op
 *   The action to perform on uc_files table
 *     empty: truncate uc_files table
 *     insert: scan the uc_file base dir and enter new files into the table
 *     remove: remove the file specified by arguments 
 *     refresh: scan the uc_file base dir and remove files/dir from the table don't exist
 * @param $arg1
 *   Specified by op argument
 * @param $arg2
 *   Specified by op argument
 * @param $arg3
 *   Specified by op argument
 */
function _file_table_action($op, $arg1 = NULL, $arg2 = NULL, $arg3 = NULL) {
	switch ($op) {
		case 'empty':  //Clear out file table (args not used)
			db_query("TRUNCATE TABLE {uc_files}");
			break;
		case 'insert':  //Add new items into table (args not used)
			if (!is_null($dir = variable_get('uc_file_base_dir', NULL))) {
				$files = file_scan_directory($dir,variable_get('uc_file_file_mask',".*"));
				$dir = (substr($dir,-1) != "/" || substr($dir,-1) != "\\") ? $dir."/" : $dir;
				foreach ($files as $file) {
					$filename = str_replace($dir,"",$file->filename);
					$file_dir = dirname($filename);
					if (!db_result(db_query("SELECT fid FROM {uc_files} WHERE filename = '%s'",$file_dir."/")) && $file_dir != ".") {
						db_query("INSERT INTO {uc_files} (`fid`, `filename`) VALUES (%d, '%s')",db_next_id('{uc_files}_fid'),$file_dir."/");
					}					
					if (!db_result(db_query("SELECT fid FROM {uc_files} WHERE filename = '%s'",$filename))) {
						db_query("INSERT INTO {uc_files} (`fid`, `filename`) VALUES (%d, '%s')",db_next_id('{uc_files}_fid'),$filename);
					}
				}
			}
			break;
		case 'remove': //Remove a specific file id (arg1 = file id to delete, arg2 = TRUE = recursively delete directories, arg 3 = TRUE = delete associated rows/files)
		if (!is_null($arg1) && $filename = db_result(db_query("SELECT filename FROM {uc_files} WHERE `fid` = %d",$arg1))) {
				$dir = variable_get('uc_file_base_dir', NULL);
				$sub_fids = ($arg2) ? _get_dir_file_ids($arg1,TRUE) : _get_dir_file_ids($arg1);
				$selected_fid = (is_dir($dir."/".$filename) && !$arg2) ? array() : array($arg1);
				$fids = (!$sub_fids) ? $selected_fid : array_merge($sub_fids,$selected_fid);
				$fids = _sort_fids($fids);
				
				foreach ($fids as $fid) {
					if ($arg3) {
						$filename = db_result(db_query("SELECT filename FROM {uc_files} WHERE `fid` = %d",$fid));
						$pfids = db_query("SELECT `pfid` FROM {uc_file_products} WHERE `fid` = %d",$fid);
						while ($pfid = db_fetch_object($pfids)) {
							db_query("DELETE FROM {uc_product_features} WHERE `pfid` = %d AND `fid` = 'file'",$pfid->pfid);
							db_query("DELETE FROM {uc_file_products} WHERE `pfid` = %d",$pfid->pfid);
						}
						if (is_dir($dir."/".$filename)) {
							rmdir($dir."/".$filename);
						}
						else {
							unlink($dir."/".$filename);
						}
						_user_table_action('remove',$fid);
					}
					db_query("DELETE FROM {uc_files} WHERE `fid` = %d",$fid);
				}
			}
			break;
		case 'refresh':  //Remove non-existing items from table (args not used)
			$files = db_query("SELECT * FROM {uc_files}");
			while ($file = db_fetch_object($files)) {
				if (is_dir(variable_get('uc_file_base_dir', NULL)."/".$form_values['uc_file_filename'])) {
					continue;
				}
				if (is_file(variable_get('uc_file_base_dir', NULL)."/".$form_values['uc_file_filename'])) {
					continue;
				}
				db_query("DELETE FROM {uc_files} WHERE `fid` = %d",$file->fid);
			}
			break;
		default:
			break;
	}
}

/**
 * Function generates hash used for unique download URLs
 * @param $values
 *   An array of values that will be used to generate the hash
 * @return:
 * A string containing the 32 hex character hash
 */
function _generate_hash($values) {
	$input = mt_rand();
	foreach ($values as $value) {
		$input .= $value;
	}
	
	return md5($input);
}

/**
 * Function returns a list of model adjustments for a given product node
 * @param $nid
 *   The product node id
 * @return:
 * An associative array containing the models created by different product 
 * attributes or FALSE if none exist.
 */
function _get_adjustment_models($nid) {
	$models = array();
	if (db_result(db_query("SELECT status FROM {system} WHERE name = 'uc_attribute'")) == 1) {
		$adjustments = db_query("SELECT model FROM {uc_product_adjustments} WHERE nid = %d",$nid);
		while ($adjustment = db_fetch_object($adjustments)) {
			if (!in_array($adjustment->model,$models)) {
				$models[$adjustment->model] = $adjustment->model;
			}
		}
	}
	
	return (empty($models)) ? FALSE : $models;
}

/**
 * Function returns a list file ids that are in the directory
 * @param $fid
 *   The file id associated with the directory
 * @param $recursive
 *   Whether or not to list recursive directories and their files
 * @return:
 * If there are files in the directory an array of file ids, else return FALSE
 */
function _get_dir_file_ids($fid, $recursive = FALSE) {
	$fids = array();
	$dir = db_result(db_query("SELECT filename FROM {uc_files} WHERE fid = %d",$fid));
	$files = db_query("SELECT * FROM {uc_files} WHERE filename LIKE LOWER('%s')",$dir."%%");
	
	while ($file = db_fetch_object($files)) {
		$filename_change = str_replace($dir,"",$file->filename);
		$filename = (substr($filename_change,0,1) == "/") ? substr($filename_change, 1) : $filename_change;
		if (!strpos($filename,"/") && !empty($filename)) {
			$fids[] = $file->fid;
		}
		elseif ($recursive && !empty($filename) && $filename_change != $file->filename) {
			$fids[] = $file->fid;
		}
	}
	
	return (empty($fids)) ? FALSE : $fids;
}

/**
 * Function takes an array of ordered objects and groups them together by a 
 * filename attribute while maintaining order
 * @param $files
 *   The array of objects
 * @return:
 * The sorted array of objects
 */
function _group_filenames($objects) {
	$output = array();
	$existing = array();
	foreach ($objects as $key => $object) {
		$filename = $object->filename;
		if (!in_array($filename,array_keys($existing))) {
			$existing[$filename] = $key;
			$output[] = $object;
		}
		else {
			$inserted_index = $existing[$filename]+1;
			foreach ($existing as $filename => $index) {
				$existing[$filename] = ($index >= $inserted_index) ? $index+1 : $index;
			}
			array_splice($output,$inserted_index,0,array($inserted_index => $object));
		}
	}
	return $output;
}

/**
 * Take a list of file ids and sorts the list to where directories are list last
 * and by order of descending depth
 * @param $fids
 *   The array of file ids
 * @return:
 * The sorted array of file ids
 */
function _sort_fids($fids) {
	$dir_fids = array();
	$output = array();
	
	foreach ($fids as $fid) {
		$filename = db_result(db_query("SELECT filename FROM {uc_files} WHERE `fid` = %d",$fid));
		if (substr($filename,-1) == "/") {
			$dir_fids[$fid] = $filename;
		}
		else {
			$output[] = $fid;
		}
	}
	
	while (!empty($dir_fids)) {
		$highest = 0;
		foreach ($dir_fids as $dir_fid => $filename) {
			if (substr_count($filename,"/") > $highest) {
				$highest = substr_count($filename,"/");
				$highest_fid = $dir_fid;
			}
		}
		$output[] = $highest_fid;
		unset($dir_fids[$highest_fid]);
	}
	
	return $output;
}

/**
 * Function performs a specified action on the uc_file_users table 
 * @param $op
 *   The action to perform on uc_file_users table
 *     allow: insert a new file download for a user
 *     allow_retroactive: a new file downloads for user 
 *     download: update a row after a download takes places
 *     remove: remove a file download for specified files, users, keys
 * @param $arg1
 *   Specified by op argument
 * @param $arg2
 *   Specified by op argument
 * @param $arg3
 *   Specified by op argument
 * @return:
 * Specified by op argument
 */
function _user_table_action($op, $arg1 = NULL, $arg2 = NULL, $arg3 = NULL) {

	switch ($op) {
		case 'allow': //arg1 = file id, arg2 = user id, $arg3 = pfid 
			//@return file_user objects inserted into table
			if (!is_null($arg1) && !is_null($arg2)) {
				$output = array();
				$granted = time();
				$fids = (_get_dir_file_ids($arg1)) ? _get_dir_file_ids($arg1) : array($arg1);
				foreach ($fids as $fid) {
					$values = array($arg1,$arg2,$arg3,"",$granted,0,serialize(array()));
					$hash = _generate_hash($values);
					db_query("INSERT INTO {uc_file_users} (`fid`, `uid`, `pfid`, `key`, `granted`, `accessed`, `addresses`) VALUES (%d, %d, %d, '%s', %d, %d, '%s')",$fid,$arg2,$arg3,$hash,$granted,0,serialize(array()));
					$output[] = db_fetch_object(db_query("SELECT * FROM {uc_file_users} WHERE `uid` = %d AND `key` = '%s'",$arg2,$hash));
				}
			}
			return (!is_null($output)) ? $output : FALSE;
			break;
		case 'allow_retroactive': //arg1 = ids (associative array of ids arg1['fid'], arg1['nid'], arg1['pfid']), arg2 = orders offset, args3 = orders limit
		//@return an array of order ids that were found to have product sku that allows downloads
		//If a limit is exceeded appended UC_FILE_RETRO_INCOMPLETE and total number of orders to check
			$limit = (!is_null($arg2) && !is_null($arg3)) ? "LIMIT $arg2,$arg3" : "";
			$orders = db_query("SELECT `order_id`, `uid` FROM {uc_orders} WHERE order_status = '%s' ".$limit,variable_get('uc_file_default_order_status','completed'));
			$model = db_result(db_query("SELECT model FROM {uc_file_products} WHERE pfid = %d",$arg1['pfid']));
			$orders_checked = 0;
			$output = array();
			
			while ($order = db_fetch_object($orders)) {
				if ($orders_checked > UC_FILE_RETRO_ORDER_LIMIT) {
					$output[] = UC_FILE_RETRO_INCOMPLETE;
					$output[] = db_num_rows($orders) - UC_FILE_RETRO_ORDER_LIMIT;
					break;
				}
				$products = db_query("SELECT model, nid FROM {uc_order_products} WHERE order_id = %d",$order->order_id);
				while ($product = db_fetch_object($products)) {
					if (($model == $product->model || empty($model)) && $product->nid == $arg1['nid']) {
						_user_table_action('allow',$arg1['fid'],$order->uid,$arg1['pfid']);
						$output[] = $order->order_id;
					}
				}
				$orders_checked++;
			}
			return $output;
			break;
		case 'download': //arg1 = existing file_user object, arg2 = ip download was made from, arg3 not used
			if (!is_null($arg1) && !is_null($arg2)) {
				$addresses = unserialize($arg1->addresses);
				if (!in_array($arg2,$addresses)) {
					$addresses[] = $arg2;
				}
				$accessed = $arg1->accessed+1;
				$values = array($arg1->fid,$arg1->uid,$arg1->pfid,$arg1->key,$arg1->granted,$accessed,serialize($addresses));
				$hash = _generate_hash($values);
				db_query("UPDATE {uc_file_users} SET `accessed` = %d, `addresses` = '%s', `key` = '%s' WHERE `fid` = %d AND `uid` = %d AND `key` = '%s'",$accessed,serialize($addresses),$hash,$arg1->fid,$arg1->uid,$arg1->key);
			}
			break;
		case 'remove': //arg1 = file id, arg2 = user id, $arg3 = key
			if (!is_null($arg1) || !is_null($arg2)) {
				if (!is_null($arg1) && is_null($arg2) && is_null($arg3)) { //Remove a file from download
					db_query("DELETE FROM {uc_file_users} WHERE `fid` = %d",$arg1);
				}
				if (is_null($arg1) && !is_null($arg2) && is_null($arg3)) { //Remove a user's downloads
					db_query("DELETE FROM {uc_file_users} WHERE `uid` = %d",$arg2);
				}
				if (!is_null($arg1) && !is_null($arg2) && is_null($arg3)) { //Remove a certain files from a user
					db_query("DELETE FROM {uc_file_users} WHERE `fid` = %d AND `uid` = %d",$arg1,$arg2);
				}
				if (is_null($arg1) && !is_null($arg2) && !is_null($arg3)) { //Remove a certain file from a user
					db_query("DELETE FROM {uc_file_users} WHERE `uid` = %d AND `key` = '%s'",$arg2,$arg3);
				}
			}
			break;
		default:
			break;
	}
}

