<?php
// $Id: uc_google_checkout.module,v 1.1.2.4 2008-09-22 21:07:48 islandusurper Exp $

/**
 * @file
 * Use Google Checkout to collect payment and process orders.
 */

/******************************************************************************
 * Drupal hooks                                                               *
 ******************************************************************************/

function uc_google_checkout_help($page, $args) {
  $output = '';
  switch ($page) {
    case 'admin/store/settings/google_checkout':
      if (variable_get('uc_google_checkout_mode', 'checkout') == 'checkout') {
        $checkout_url = 'http://checkout.google.com';
      }
      else {
        $checkout_url = 'http://sandbox.google.com/checkout';
      }
      $output .= t('In the <a href="!checkout_url/sell">Google Checkout Merchant Center</a>, enter %url as the callback URL for this site. This will allow Ubercart to communicate with Google Checkout.', array('!checkout_url' => $checkout_url, '%url' => url('google_checkout', array('absolute' => TRUE))));
    break;
  }
  return $output;
}

function uc_google_checkout_menu() {
  $items = array();

  $items['admin/store/settings/google_checkout'] = array(
    'title' => 'Google Checkout settings',
    'description' => 'Set merchant ID and key for Google Checkout.',
    'page' => 'drupal_get_form',
    'page arguments' => array('uc_google_checkout_settings'),
    'access arguments' => array('administer store'),
    'type' => MENU_NORMAL_ITEM,
  );
  $items['admin/store/settings/google_checkout/account'] = array(
    'title' => 'Account',
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );
  $items['admin/store/settings/google_checkout/shipping'] = array(
    'title' => 'Shipping',
    'description' => 'Calculate shipping charges for orders through Google Checkout.',
    'page' => 'drupal_get_form',
    'page arguments' => array('uc_google_checkout_shipping_settings'),
    'access arguments' => array('administer store'),
    'type' => MENU_LOCAL_TASK,
  );
  $items['admin/store/settings/google_checkout/taxes'] = array(
    'title' => 'Taxes',
    'description' => 'Calculate taxes for orders through Google Checkout.',
    'page' => 'drupal_get_form',
    'page arguments' => array('uc_google_checkout_taxes_settings'),
    'access arguments' => array('administer store'),
    'type' => MENU_LOCAL_TASK,
  );
  $items['google_checkout'] = array(
    'page' => 'uc_google_checkout_callback',
    'access callback' => 'uc_google_checkout_callback_access',
    'type' => MENU_CALLBACK,
  );
  $items['admin/store/orders/%uc_order/google_checkout'] = array(
    'title callback' => 'uc_google_checkout_terminal_title',
    'title arguments' => array(3),
    'description' => 'Process a credit card payment or refund through Google Checkout.',
    'page' => 'uc_google_checkout_terminal',
    'page arguments' => array(3),
    'access arguments' => array('manual payments'),
    'type' => MENU_CALLBACK
  );

  return $items;
}

function uc_google_checkout_callback_access() {
  return TRUE;
}

function uc_google_checkout_terminal_title($order) {
  return t('Google Checkout terminal: Order @order_id', array('@order_id' => $order->order_id));
}

function uc_google_checkout_theme() {
  return array(
    'uc_google_checkout_shipping_settings' => array(
      'arguments' => array('form' => NULL),
    ),
    'uc_google_checkout_taxes_settings' => array(
      'arguments' => array('form' => NULL),
    ),
  );
}

function uc_google_checkout_form_alter(&$form, &$form_state, $form_id) {
  $node = $form['#node'];
  if (is_object($node) && $form_id == $node->type .'_node_form' && in_array($node->type, module_invoke_all('product_types'))) {
    $policy_url = 'https://checkout.google.com/support/sell/bin/answer.py?answer=75724';
    $form['google_checkout'] = array('#type' => 'fieldset',
      '#title' => t('Google Checkout settings'),
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
    );
    $form['google_checkout']['gc_salable'] = array('#type' => 'checkbox',
      '#title' => t('Conforms to Google Checkout content policies.'),
      '#default_value' => isset($node->gc_salable) ? $node->gc_salable : TRUE,
      '#description' => t('To be a Google Checkout approved merchant, your items must conform to the Google Checkout content policies found <a href="!url">here</a>.', array('!url' => $policy_url)),
    );
  }
  else if ($form_id == 'uc_payment_methods_form') {
    // Make sure no one enables this for Ubercart checkout.
    $form['pmtable']['google_checkout']['uc_payment_method_google_checkout_checkout']['#disabled'] = TRUE;
    $form['pmtable']['google_checkout']['uc_payment_method_google_checkout_checkout']['#value'] = FALSE;
  }
  else if ($form_id == 'uc_payment_by_order_form') {
    // Don't use Google Checkout for manual payments either.
    unset($form['payments']['new']['method']['#options']['google_checkout']);
  }
  else if ($form_id == 'uc_order_view_update_form') {
    $form['#submit'][] = 'uc_google_checkout_notify_update';
  }
}

function uc_google_checkout_nodeapi(&$node, $op) {
  if (in_array($node->type, module_invoke_all('product_types'))) {
    switch ($op) {
      case 'insert':
      case 'update':
        if (isset($node->gc_salable)) {
          if (!$node->revision) {
            db_query("DELETE FROM {uc_gc_products} WHERE vid = %d", $node->vid);
          }
          db_query("INSERT INTO {uc_gc_products} (vid, nid, gc_salable) VALUES (%d, %d, %d)",
            $node->vid, $node->nid, $node->gc_salable);
        }
      break;
      case 'load':
        $salable = db_result(db_query("SELECT gc_salable FROM {uc_gc_products} WHERE vid = %d", $node->vid));
        if ($salable === FALSE) {
          $salable = TRUE;
        }
        return array('gc_salable' => $salable);
      break;
      case 'delete':
        db_query("DELETE FROM {uc_gc_products} WHERE nid = %d", $node->nid);
      break;
      case 'delete revision':
        db_query("DELETE FROM {uc_gc_products} WHERE vid = %d", $node->vid);
      break;
    }
  }
}

/******************************************************************************
 * Hook Functions (Ubercart)                                                  *
 ******************************************************************************/

function uc_google_checkout_cart_pane() {
  $panes[] = array(
    'id' => 'uc_google_checkout',
    'title' => t('Google Checkout'),
    'enabled' => TRUE,
    'weight' => 1,
    'body' => '<div align="'. variable_get('uc_google_checkout_button_align', 'right') .'">'. drupal_get_form('uc_google_checkout_cart_form') .'</div>',
  );
  return $panes;
}

function uc_google_checkout_order_pane() {
  $panes[] = array(
    'id' => 'email_allowed',
    'callback' => 'uc_google_checkout_pane_email_allowed',
    'title' => t('Marketing preferences'),
    'desc' => t("Display the customer's preferences about mass-marketing."),
    'class' => 'pos-left',
    'weight' => 4,
    'show' => array('view', 'customer'),
  );

  return $panes;
}

function uc_google_checkout_order($op, &$arg1, $arg2) {
  switch ($op) {
    case 'load':
      $result = db_query("SELECT * FROM {uc_gc_orders} WHERE order_id = %d", $arg1->order_id);
      if ($gc = db_fetch_object($result)) {
        $arg1->google_order_number = $gc->gc_order_number;
        $arg1->financial_state = $gc->financial_state;
        $arg1->fulfillment_state = $gc->fulfillment_state;
        $arg1->gc_total = $gc->gc_total;
      }
    break;
    case 'can_update':
      if (is_null($arg1->google_order_number) || isset($_SESSION['google_updates']) && $_SESSION['google_updates']) {
        return TRUE;
      }
      switch ($arg2) {
        case 'canceled':
          if (uc_google_checkout_cancel_order($arg1)) {
            drupal_set_message(t('Cancel order request sent to Google Checkout. The order will be updated momentarily.'));
          }
          else {
            drupal_set_message(t('Order is not canceled in Google Checkout.'));
          }
        return FALSE;
      }
    break;
  }
}

/**
 * Implementation of hook_payment_method().
 */
function uc_google_checkout_payment_method() {
  $methods[] = array(
    'id' => 'google_checkout',
    'name' => t('Google Checkout'),
    'title' => t('Google Checkout'),
    'desc' => t('Express payment with Google Checkout.'),
    'callback' => 'uc_payment_method_google_checkout',
    'weight' => 1,
    'checkout' => FALSE,
    'backend' => FALSE,
  );
  return $methods;
}

function uc_google_checkout_payment_gateway() {
  $gateways[] = array(
    'id' => 'google_checkout',
    'title' => t('Google Checkout'),
    'description' => t('Express payment with Google Checkout.'),
    'google_checkout' => 'uc_google_checkout_charge',
  );
  return $gateways;
}

function uc_google_checkout_shipment($op, $shipment) {
  switch ($op) {
    case 'save':
      $google_order_number = uc_google_checkout_get_google_number($shipment->order_id);
      if ($google_order_number && $shipment->is_new) {
        $xml_data = '';
        foreach ($shipment->packages as $package) {
          if ($package->tracking_number) {
            $tracking_number = $package->tracking_number;
          }
          else if ($shipment->tracking_number) {
            $tracking_number = $shipment->tracking_number;
          }
          if ($tracking_number) {
            foreach ($package->products as $product) {
              $xml_data .= '<item-shipping-information>';
              $xml_data .= '<item-id>';
              $xml_data .= '<merchant-item-id>'. check_plain($product->nid .'|'. $product->model) .'</merchant-item-id>';
              $xml_data .= '</item-id>';
              $xml_data .= '<tracking-data-list>';
              $xml_data .= '<tracking-data>';
              $xml_data .= '<carrier>'. check_plain($shipment->carrier) .'</carrier>';
              $xml_data .= '<tracking-number>'. check_plain($tracking_number) .'</tracking-number>';
              $xml_data .= '</tracking-data>';
              $xml_data .= '</tracking-data-list>';
              $xml_data .= '</item-shipping-information>';
            }
          }
        }
        if ($xml_data) {
          $request = '<?xml version="1.0" encoding="UTF-8"?>';
          $request .= "\n";
          $request .= '<ship-items xmlns="http://checkout.google.com/schema/2" google-order-number="'. $google_order_number .'">';
          $request .= '<item-shipping-information-list>';
          $request .= $xml_data;
          $request .= '</item-shipping-information-list>';
          $request .= '<send-email>true</send-email>';
          $request .= '</ship-items>';
          $response = uc_google_checkout_send_request('request', $request);
        }
      }
    break;
    case 'delete':
      $google_order_number = uc_google_checkout_get_google_number($shipment->order_id);
      if ($google_order_number) {
        foreach ($shipment->packages as $package) {
          foreach ($package->products as $product) {
            $reset_ids[] = check_plain($product->nid .'|'. $product->model);
          }
        }
        $request = '<?xml version="1.0" encoding="UTF-8"?>';
        $request .= "\n";
        $request .= '<reset-items-shipping-information xmlns="http://checkout.google.com/schema/2" google-order-number="'. $google_order_number .'">';
        $request .= '<item-ids>';
        foreach (array_unique($reset_ids) as $item_id) {
          $request .= '<item-id>';
          $request .= '<merchant-item-id>'. $item_id .'</merchant-item-id>';
          $request .= '</item-id>';
        }
        $request .= '</item-ids>';
        $request .= '<send-email>false</send-email>';
        $request .= '</reset-items-shipping-information>';
      }
      $response = uc_google_checkout_send_request('request', $request);
    break;
  }
}

/******************************************************************************
 * Callback Functions, Forms, and Tables                                      *
 ******************************************************************************/

function uc_google_checkout_settings() {
  $form = array();

  $form['authentication'] = array(
    '#type' => 'fieldset',
    '#title' => t('Authentication'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
  );
  $form['authentication']['uc_google_merchant_id'] = array(
    '#type' => 'textfield',
    '#title' => t('Merchant ID'),
    '#default_value' => variable_get('uc_google_merchant_id', ''),
  );
  $form['authentication']['uc_google_merchant_key'] = array(
    '#type' => 'textfield',
    '#title' => t('Merchant key'),
    '#default_value' => variable_get('uc_google_merchant_key', ''),
    '#description' => t('Used to sign cart information. Keep it secret, keep it safe.'),
  );

  $form['messages'] = array(
    '#type' => 'fieldset',
    '#title' => t('Customer messages'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
  );
  $form['messages']['uc_google_checkout_order_cancel_reason'] = array(
    '#type' => 'textarea',
    '#title' => t('Reason for canceling order'),
    '#description' => t('This message will be sent with the cancelation notice through Google Checkout. Any comment given when the order is canceled will be sent as a separate message. This message uses <a href="!url">global and order tokens</a>.', array('!url' => 'admin/store/help/tokens')),
    '#default_value' => variable_get('uc_google_checkout_order_cancel_reason', t('Order canceled. See order comments at [order-url] for more information.')),
  );

  $form['button'] = array(
    '#type' => 'fieldset',
    '#title' => t('Button settings'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );
  $form['button']['uc_google_checkout_button_color'] = array(
    '#type' => 'radios',
    '#title' => t('Button background color'),
    '#default_value' => variable_get('uc_google_checkout_button_color', 'trans'),
    '#options' => array('trans' => t('Transparent'), 'white' => t('White')),
  );
  $form['button']['uc_google_checkout_button_size'] = array(
    '#type' => 'select',
    '#title' => t('Button size'),
    '#options' => array('large' => t('Large'), 'medium' => t('Medium'), 'small' => t('Small')),
    '#default_value' => variable_get('uc_google_checkout_button_size', 'large'),
  );
  $form['button']['uc_google_checkout_button_align'] = array(
    '#type' => 'radios',
    '#title' => t('Button alignment'),
    '#default_value' => variable_get('uc_google_checkout_button_align', 'right'),
    '#options' => array('right' => t('Right'), 'left' => t('Left')),
  );

  $form['sandbox'] = array(
    '#type' => 'fieldset',
    '#title' => t('Test Environment settings'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );
  $form['sandbox']['uc_google_checkout_mode'] = array(
    '#type' => 'radios',
    '#title' => t('Test Mode'),
    '#default_value' => variable_get('uc_google_checkout_mode', 'checkout'),
    '#options' => array('sandbox' => t('On'), 'checkout' => t('Off')),
  );
  $form['sandbox']['uc_google_test_merchant_id'] = array(
    '#type' => 'textfield',
    '#title' => t('Test Merchant ID'),
    '#description' => t('Only needed for test mode. Click <a href="http://code.google.com/apis/checkout/developer/index.html#integration_overview" target="_blank">here</a> for more info.'),
    '#default_value' => variable_get('uc_google_test_merchant_id', ''),
    '#required' => FALSE,
  );
  $form['sandbox']['uc_google_test_merchant_key'] = array(
    '#type' => 'textfield',
    '#title' => t('Test Merchant Key'),
    '#default_value' => variable_get('uc_google_test_merchant_key', ''),
    '#required' => FALSE,
  );

  return system_settings_form($form);
}

function uc_google_checkout_shipping_settings() {
  $form = array(
    '#tree' => TRUE
  );

  $services = uc_google_checkout_shipping_services();

  foreach ($services as $key => $title) {
    $shipping_settings = variable_get('uc_google_checkout_shipping_'. $key, array());
    $form['services'][$key]['enable'] = array(
      '#type' => 'checkbox',
      '#default_value' => $shipping_settings['enable'],
    );
    $form['services'][$key]['title'] = array(
      '#type' => 'markup',
      '#value' => $title,
    );
    $form['services'][$key]['default'] = array(
      '#type' => 'textfield',
      '#default_value' => $shipping_settings['default'],
      '#size' => 10,
      '#field_prefix' => '$',
    );
    $form['services'][$key]['pickup'] = array(
      '#type' => 'select',
      '#default_value' => $shipping_settings['pickup'],
      '#options' => array(
        'REGULAR_PICKUP' => t('Regular pickup'),
        'SPECIAL_PICKUP' => t('Special pickup'),
        'DROP_OFF' => t('Drop off'),
      ),
    );
    $form['services'][$key]['fixed_charge'] = array(
      '#type' => 'textfield',
      '#default_value' => $shipping_settings['fixed_charge'],
      '#size' => 10,
      '#field_prefix' => '$',
    );
    $form['services'][$key]['percent_adjustment'] = array(
      '#type' => 'textfield',
      '#default_value' => $shipping_settings['percent_adjustment'],
      '#size' => 5,
      '#field_suffix' => t('%'),
    );
  }

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save configuration'),
  );

  return $form;
}

function theme_uc_google_checkout_shipping_settings($form) {
  $header = array(t('Enable'), t('Service'), t('Default price'), t('Pickup type'), t('Handling charge'), t('Percentage markup/discount'));

  $companies = uc_google_checkout_shipping_companies();
  $company = '';
  $rows = array();
  foreach (element_children($form['services']) as $key) {
    $row = array();
    $temp = explode('_', $key, 2);
    if ($company != $temp[0]) {
      $company = $temp[0];
      $rows[] = array(array('data' => '<strong>'. $companies[$company] .'</strong>', 'colspan' => 6));
    }
    foreach (array('enable', 'title', 'default', 'pickup', 'fixed_charge', 'percent_adjustment') as $field) {
      $row[] = drupal_render($form['services'][$key][$field]);
    }
    $rows[] = $row;
  }
  $output = theme('table', $header, $rows) . drupal_render($form);

  return $output;
}

function uc_google_checkout_shipping_settings_validate($form, &$form_state) {
  foreach ($form_state['values']['services'] as $key => $service) {
    if ($service['enable'] && empty($service['default'])) {
      form_set_error('services]['. $key .'][default', t('A default shipping cost is required.'));
    }
    if (!empty($service['default']) && (!is_numeric($service['default']) || $service['default'] < 0)) {
      form_set_error('services]['. $key .'][default', t('The default shipping cost should be a positive number.'));
    }
    if (!empty($service['fixed_charge']) && !is_numeric($service['fixed_charge'])) {
      form_set_error('services]['. $key .'][fixed_charge', t('The fixed charge should be a number.'));
    }
    if (!empty($service['percent_adjustment']) && !is_numeric($service['percent_adjustment'])) {
      form_set_error('services]['. $key .'][percent_adjustment', t('The percent adjustment should be a number.'));
    }
  }
}

function uc_google_checkout_shipping_settings_submit($form, &$form_state) {
  foreach ($form_state['values']['services'] as $key => $service) {
    variable_set('uc_google_checkout_shipping_'. $key, $service);
  }
  drupal_set_message(t('The configuration options have been saved.'));
}

function uc_google_checkout_taxes_settings() {
  $form = array(
    '#tree' => TRUE,
  );

  $result = db_query("SELECT zone, rate, tax_shipping FROM {uc_gc_taxes} ORDER BY zone");
  while ($tax = db_fetch_object($result)) {
    $form['taxes'][$tax->zone]['delete'] = array(
      '#type' => 'checkbox',
      '#default_value' => FALSE,
    );
    $form['taxes'][$tax->zone]['zone'] = array(
      '#type' => 'value',
      '#value' => $tax->zone,
    );
    $form['taxes'][$tax->zone]['rate'] = array(
      '#type' => 'textfield',
      '#default_value' => $tax->rate,
      '#size' => 8
    );
    $form['taxes'][$tax->zone]['tax_shipping'] = array(
      '#type' => 'checkbox',
      '#default_value' => $tax->tax_shipping,
    );
  }

  $form['taxes']['new']['delete'] = array(
    '#type' => 'checkbox',
    '#disabled' => TRUE,
  );
  $form['taxes']['new']['zone'] = uc_zone_select('');
  $form['taxes']['new']['rate'] = array(
    '#type' => 'textfield',
    '#default_value' => '',
    '#size' => 8
  );
  $form['taxes']['new']['tax_shipping'] = array(
    '#type' => 'checkbox',
    '#default_value' => FALSE,
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save taxes'),
  );

  return $form;
}

function theme_uc_google_checkout_taxes_settings($form) {
  $header = array(t('Delete'), uc_get_field_name('zone'), t('Rate'), t('Tax shipping?'));

  $rows = array();
  foreach (element_children($form['taxes']) as $zone) {
    $row = array();
    $row[] = drupal_render($form['taxes'][$zone]['delete']);
    if ($zone == 'new') {
      $row[] = drupal_render($form['taxes'][$zone]['zone']);
    }
    else {
      $row[] = $form['taxes'][$zone]['zone']['#value'];
    }
    //$form['taxes'][$zone]['zone']['#printed'] = TRUE;
    $row[] = drupal_render($form['taxes'][$zone]['rate']);
    $row[] = drupal_render($form['taxes'][$zone]['tax_shipping']);
    $rows[] = $row;
  }

  $output = theme('table', $header, $rows);
  $output .= drupal_render($form);

  return $output;
}

function uc_google_checkout_taxes_settings_submit($form, &$form_state) {
  foreach ($form_state['values']['taxes'] as $zone => $tax_values) {
    if ($zone == 'new' && $tax_values['zone'] && $tax_values['rate']) {
      db_query("DELETE FROM {uc_gc_taxes} WHERE zone = '%s'", $tax_values['zone']);
      db_query("INSERT INTO {uc_gc_taxes} (zone, rate, tax_shipping) VALUES ('%s', %f, %d)", uc_get_zone_code($tax_values['zone']), $tax_values['rate'], $tax_values['tax_shipping']);
    }
    else if ($tax_values['delete']) {
      db_query("DELETE FROM {uc_gc_taxes} WHERE zone = '%s'", $tax_values['zone']);
    }
    else {
      db_query("UPDATE {uc_gc_taxes} SET rate = %f, tax_shipping = %d WHERE zone = '%s'", $tax_values['rate'], $tax_values['tax_shipping'], $tax_values['zone']);
    }
  }
}

function uc_google_checkout_cart_form() {
  if (variable_get('uc_google_checkout_mode', 'checkout') == 'checkout') {
    $merchant_id = variable_get('uc_google_merchant_id', '');
    $checkout_url = 'http://checkout.google.com';
  }
  else {
    $merchant_id = variable_get('uc_google_test_merchant_id', '');
    $checkout_url = 'http://sandbox.google.com/checkout';
  }
  if (!$merchant_id) {
    watchdog('uc_google_checkout', 'Google Checkout is enabled, but no Merchant ID found.', array(), WATCHDOG_ERROR, 'admin/store/settings/google_checkout');
    return;
  }

  // Hack to allow the image button to submit.
  if (isset($_POST['submit_x'])) {
    $form['submit'] = array(
      '#type' => 'submit',
      '#value' => 'submit',
    );
  }

  $disable = FALSE;
  foreach (uc_cart_get_contents() as $item) {
    $product = node_load($item->nid);
    if (!$product->gc_salable) {
      $disable = TRUE;
      break;
    }
  }

  switch (variable_get('uc_google_checkout_button_size', 'large')) {
    case 'large':
      $width = 180;
      $height = 46;
    break;
    case 'medium':
      $width = 168;
      $height = 44;
    break;
    case 'small':
      $width = 160;
      $height = 43;
    break;
  }

  $form['submit_image'] = array(
    '#value' => ($disable ? '<img ' : '<input name="submit" type="image" ') .'alt="'. t('Google Checkout') .'" title="'. t('Fast checkout through Google.') .'" src="'. $checkout_url .'/buttons/checkout.gif?merchant_id='. $merchant_id .'&w='. $width .'&h='. $height .'&style='. variable_get('uc_google_checkout_button_color', 'trans') .'&variant='. ($disable ? 'disabled' : 'text') .'&loc=en_US" height="'. $height .'" width="'. $width .'" />',
  );
  $form['submit_help'] = array(
    '#value' => '<br /><a href="javascript:void(window.open(\' http://checkout.google.com/seller/what_is_google_checkout.html\',\'whatischeckout\',\'scrollbars=0,resizable=1,directories=0,height=250,width=400\'));" OnMouseOver="return window.status = '. t('What is Google Checkout?') .';" OnMouseOut="return window.status = \'\';">'. t('What is Google Checkout?') .'</a>',
  );

  return $form;
}

function uc_google_checkout_cart_form_submit($form, &$form_state) {
  global $user;
  $items = uc_cart_get_contents();

  if (!is_array($items) || count($items) == 0) {
    drupal_set_message(t('You do not have any items in your shopping cart.'));
    return;
  }

  if (empty($_SESSION['cart_order'])) {
    $order = uc_order_new($user->uid);
    $_SESSION['cart_order'] = $order->order_id;
  }
  else {
    $order = new stdClass();
    $order->uid = $user->uid;
    $order->order_id = $_SESSION['cart_order'];
    $order->order_status = uc_order_state_default('in_checkout');
  }

  $order->products = $items;
  uc_order_save($order);
  uc_order_update_status($order->order_id, 'in_google_checkout');
  $order->order_status = 'in_google_checkout';

  $request = uc_google_checkout_cart_request($order);
  if ($response = uc_google_checkout_send_request('merchantCheckout', $request)) {
    $redirect = $response->params['checkout-redirect']['redirect-url']['VALUE'];
    drupal_goto($redirect);
  }
}

function uc_google_checkout_cart_request($order) {
  if (variable_get('uc_google_checkout_mode', 'checkout') == 'checkout') {
    $merchant_id = variable_get('uc_google_merchant_id', '');
  }
  else {
    $merchant_id = variable_get('uc_google_test_merchant_id', '');
  }

  $output = '<?xml version="1.0" encoding="UTF-8"?>';
  $output .= "\n";

  if (count($order->products)) {
    $output .= '<checkout-shopping-cart xmlns="http://checkout.google.com/schema/2">';
    $output .= '<shopping-cart>';
    $output .= '<items>';
    foreach ($order->products as $product) {
      $output .= '<item>';
      $output .= '<item-name>'. check_plain($product->model) .'</item-name>';
      $output .= '<item-description>'. check_plain($product->title) .'</item-description>';
      $output .= '<unit-price currency="'. variable_get('uc_currency_code', 'USD') .'">'. $product->price .'</unit-price>';
      $output .= '<item-weight unit="LB" value="'. $product->weight * uc_weight_conversion($product->weight_units, 'lb') .'" />';
      $output .= '<quantity>'. $product->qty .'</quantity>';
      $output .= '<merchant-item-id>'. $product->nid .'|'. $product->model .'</merchant-item-id>';
      $output .= '</item>';
    }
    $output .= '</items>';
    $output .= '<merchant-private-data>';
    $output .= '<cart-id>'. uc_cart_get_id() .'</cart-id>';
    $output .= '<order-id>'. $order->order_id .'</order-id>';
    $output .= '</merchant-private-data>';
    $output .= '</shopping-cart>';
    $output .= '<checkout-flow-support>';
    $output .= '<merchant-checkout-flow-support>';

    $companies = uc_google_checkout_shipping_companies();
    $services = uc_google_checkout_shipping_services();
    $shipping_options = '';
    foreach ($services as $key => $title) {
      $settings = variable_get('uc_google_checkout_shipping_'. $key, array());
      if ($settings['enable']) {
        $shipping_options .= '<carrier-calculated-shipping-option>';
        $shipping_options .= '<price currency="'. variable_get('uc_currency_code', 'USD') .'">'. $settings['default'] .'</price>';
        $temp = explode('_', $key, 2);
        $shipping_options .= '<shipping-company>'. $companies[$temp[0]] .'</shipping-company>';
        $shipping_options .= '<carrier-pickup>'. $settings['pickup'] .'</carrier-pickup>';
        $shipping_options .= '<shipping-type>'. $services[$key] .'</shipping-type>';
        if ($settings['fixed_charge']) {
          $shipping_options .= '<additional-fixed-charge currency="'. variable_get('uc_currency_code', 'USD') .'">'. number_format($settings['fixed_charge'], 2, '.', '') .'</additional-fixed-charge>';
        }
        if ($settings['percent_adjustment']) {
          $shipping_options .= '<additional-variable-charge-percent>'. (float)$settings['percent_adjustment'] .'</additional-variable-charge-percent>';
        }
        $shipping_options .= '</carrier-calculated-shipping-option>';
      }
    }
    if ($shipping_options) {
      $output .= '<shipping-methods>';
      $output .= '<carrier-calculated-shipping>';
      $output .= '<carrier-calculated-shipping-options>';
      $output .= $shipping_options;
      $output .= '</carrier-calculated-shipping-options>';

      $address = variable_get('uc_quote_store_default_address', new stdClass());
      if (empty($address)) {
        $address->city = variable_get('uc_store_city', NULL);
        $address->zone = uc_get_zone_code(variable_get('uc_store_zone', NULL));
        $address->postal_code = variable_get('uc_store_postal_code', NULL);
        $address->country = uc_store_default_country();
      }
      $country = uc_get_country_data(array('country_id' => $address->country));
      $address->country_code = $country[0]['country_iso_code_2'];
      $output .= '<shipping-packages>';
      $output .= '<shipping-package>';
      $output .= '<ship-from id="here">';
      $output .= '<city>'. $address->city .'</city>';
      $output .= '<region>'. $address->zone .'</region>';
      $output .= '<country-code>'. $address->country_code .'</country-code>';
      $output .= '<postal-code>'. $address->postal_code .'</postal-code>';
      $output .= '</ship-from>';
      $output .= '</shipping-package>';
      $output .= '</shipping-packages>';

      $output .= '</carrier-calculated-shipping>';
      $output .= '</shipping-methods>';
    }

    $tax_table = '';
    $result = db_query("SELECT zone, rate, tax_shipping FROM {uc_gc_taxes}");
    while ($tax = db_fetch_object($result)) {
      $tax_table .= '<default-tax-rule>';
      if ($tax->tax_shipping) {
        $tax_table .= '<shipping-taxed>true</shipping-taxed>';
      }
      $tax_table .= '<rate>'. (float)$tax->rate .'</rate>';

      $tax_table .= '<tax-area>';
      $tax_table .= '<us-state-area>';
      $tax_table .= '<state>'. $tax->zone .'</state>';
      $tax_table .= '</us-state-area>';
      $tax_table .= '</tax-area>';

      $tax_table .= '</default-tax-rule>';
    }

    if ($tax_table) {
      $output .= '<tax-tables>';
      $output .= '<default-tax-table>';
      $output .= '<tax-rules>';
      $output .= $tax_table;
      $output .= '</tax-rules>';
      $output .= '</default-tax-table>';
      $output .= '</tax-tables>';
    }

    $output .= '<edit-cart-url>'. url('cart', array('absolute' => TRUE)) .'</edit-cart-url>';
    if (($page = variable_get('uc_continue_shopping_url', '')) != '<none>') {
      $output .= '<continue-shopping-url>'. url($page, array('absolute' => TRUE)) .'</continue-shopping-url>';
    }
    $output .= '<platform-id>218752253180456</platform-id>';
    $output .= '</merchant-checkout-flow-support>';
    $output .= '</checkout-flow-support>';
    $output .= '</checkout-shopping-cart>';
  }

  return $output;
}

function uc_google_checkout_headers() {
  if (variable_get('uc_google_checkout_mode', 'checkout') == 'checkout') {
    $merchant_id = variable_get('uc_google_merchant_id', '');
    $merchant_key = variable_get('uc_google_merchant_key', '');
  }
  else {
    $merchant_id = variable_get('uc_google_test_merchant_id', '');
    $merchant_key = variable_get('uc_google_test_merchant_key', '');
  }
  $headers = array();
  $authorization = $merchant_id .':'. $merchant_key;
  if ($authorization != ':') {
    $headers['Authorization'] = 'Basic '. base64_encode($authorization);
  }
  $headers['Content-Type'] = 'application/xml; charset=UTF-8';
  $headers['Accept'] = 'application/xml; charset=UTF-8';
  return $headers;
}

function uc_google_checkout_send_request($api, $request) {
  require_once(drupal_get_path('module', 'uc_google_checkout') .'/includes/xmlparser.php');

  if (variable_get('uc_google_checkout_mode', 'checkout') == 'checkout') {
    $merchant_id = variable_get('uc_google_merchant_id', '');
    $checkout_url = 'https://checkout.google.com';
  }
  else {
    $merchant_id = variable_get('uc_google_test_merchant_id', '');
    $checkout_url = 'https://sandbox.google.com/checkout';
  }

  // Google's XML parser doesn't like named entities apparently.
  str_replace(array('&amp;', '&lt;', '&gt;'), array('&#x26;', '&#x3c;', '&#x3e;'), $request);
  $response_obj = drupal_http_request($checkout_url .'/api/checkout/v2/'. $api .'/Merchant/'. $merchant_id, uc_google_checkout_headers(), 'POST', $request);
  $response = new XMLParser($response_obj->data);
  if ($response->root == 'error') {
    $error = $response->params['error']['error-message']['VALUE'];
    drupal_set_message($error, 'error');
    watchdog('google', $error, NULL, WATCHDOG_ERROR);
    return NULL;
  }

  /**
   * Ugly hack to work around PHP bug, details here:
   *   http://bugs.php.net/bug.php?id=23220
   * We strip out errors that look something like:
   *  warning: fread() [function.fread]: SSL fatal protocol error in...
   * Copied from http://drupal.org/node/70915.
   */
  $messages = drupal_set_message();
  $errors = $messages['error'];
  $total = count($errors);
  for ($i = 0; $i <= $total; $i++) {
    if (strpos($errors[$i], 'SSL: fatal protocol error in')) {
      unset($_SESSION['messages']['error'][$i]);
    }
  }
  if (empty($_SESSION['messages']['error'])) {
    unset($_SESSION['messages']['error']);
  }
  db_query("DELETE FROM {watchdog} WHERE type = 'php' AND message LIKE '%%SSL: fatal protocol error%%'");
  // End of ugly hack.

  return $response;
}

function uc_google_checkout_pane_email_allowed($op, $arg1) {
  switch ($op) {
    case 'customer':
    case 'view':
      if ($arg1->data['email_allowed']) {
        $output = t('Customer will accept marketing emails.');
      }
      else {
        $output = t('Customer does not want marketing emails.');
      }
    return $output;
  }
}

/**
 * Add setting callbacks to the payment settings section
 *  The fulfillment sections need coded still. JS.
 */
function uc_payment_method_google_checkout($op, &$arg1) {
  switch ($op) {
    case 'order-view':
      $output = l(t('Google Checkout terminal'), 'admin/store/orders/'. $arg1->order_id .'/google_checkout');
      return $output;
    case 'customer-view':
      return;
    case 'order-details':
     return;
    case 'edit-process':
      return;
    case 'settings':
      $form = array();

      $form['shipping'] = array(
        '#type' => 'fieldset',
        '#title' => t('Shipping settings'),
        '#weight' => -4,
        '#collapsible' => TRUE,
        '#collapsed' => TRUE,
      );
      $form['shipping']['uc_google_checkout_shipping_calculate'] = array(
        '#type' => 'checkbox',
        '#title' => t('Calculate shipping'),
        '#default_value' => variable_get('uc_google_checkout_shipping_calculate', FALSE),
      );
/**
 * A possible example of how to add shipping modules
 * Needs a lot of work and this is all up in the error still. JS.
 *
      $form['shipping']['uc_google_checkout_shipping_usps'] = array(
        '#type' => 'checkbox',
        '#title' => t('Calculate USPS shipping rates'),
        '#default_value' => variable_get('uc_google_checkout_shipping_usps', FALSE),
      );
      $form['shipping']['fallback']['uc_google_checkout_shipping_usps_fallback'] = array(
        '#type' => 'textfield',
        '#title' => t('USPS Priority Mail'),
        '#default_value' => variable_get('uc_google_checkout_shipping_usps_fallback', '10.00,3.00'),
      );
*/

      $form['currency_tax'] = array(
        '#type' => 'fieldset',
        '#title' => t('Currency and Tax settings'),
        '#description' => t('Currently only USD is supported'),
        '#weight' => -6,
        '#collapsible' => TRUE,
        '#collapsed' => TRUE,
      );
      $form['currency_tax']['uc_google_checkout_currency'] = array('#type' => 'select',
        '#title' => t('Currency'),
        '#options' => array('USD' => t('USD')),
        '#default_value' => variable_get('uc_google_checkout_currency', 'USD'),
      );
      $form['currency_tax']['uc_google_checkout_tax_calculate'] = array(
        '#type' => 'checkbox',
        '#title' => t('Calculate tax'),
        '#default_value' => variable_get('uc_google_checkout_tax_calculate', FALSE),
      );
      $form['options'] = array(
        '#type' => 'fieldset',
        '#title' => t('Merchant options'),
        '#weight' => -5,
        '#collapsible' => TRUE,
        '#collapsed' => TRUE,
      );
      $form['options']['uc_google_checkout_options_certificates'] = array(
        '#type' => 'checkbox',
        '#title' => t('Accept gift certificates'),
        '#default_value' => variable_get('uc_google_checkout_options_certificates', TRUE),
      );
      $form['options']['uc_google_checkout_options_coupons'] = array(
        '#type' => 'checkbox',
        '#title' => t('Accept merchant coupons'),
        '#default_value' => variable_get('uc_google_checkout_options_coupons', TRUE),
      );
    return $form;
  }
}

function uc_google_checkout_terminal($order) {
  $order_id = $order->order_id;

  if ($order === FALSE) {
    drupal_set_message(t('Order @order_id does not exist.', array('@order_id' => $order_id)));
    drupal_goto('admin/store/orders');
  }

  $output = l(t('Return to order view screen.'), 'admin/store/orders/'. $order_id);

  $gc_balance = $order->gc_total;
  $payments = uc_payment_load_payments($order_id);
  if (is_array($payments)) {
    foreach ($payments as $payment) {
      if ($payment->method == 'Google Checkout') {
        $gc_balance -= $payment->amount;
      }
    }
  }
  $balance = uc_payment_balance($order);
  $output .= '<p>'. t('Use this terminal to process credit card payments:') .'</p>'
            .'<table style="width: auto;"><tbody style="border-top: 0px;"><tr>'
            .'<td><strong>'. t('Order total:') .'</strong> </td><td>'
           . uc_currency_format($order->order_total) .'</td></tr><tr><td>'
            .'<strong>'. t('Balance:') .'</strong> </td><td>'
           . uc_currency_format($balance) .'</td></tr><tr><td><strong>'
           . t('Google Checkout total:') .'</strong></td><td>'
           . uc_currency_format($order->gc_total) .'</td></tr><tr><td><strong>'
           . t('Google Checkout balance:') .'</strong></td<td>'
           . uc_currency_format($gc_balance) .'</td></tr></tbody></table>';

  if (in_array($order->financial_state, array('REVIEWING', 'CHARGEABLE', 'CHARGED'))) {
    $output .= drupal_get_form('uc_google_checkout_terminal_form', $order, $gc_balance);
  }

  return $output;
}

function uc_google_checkout_terminal_form($form_state, $order, $amount = 0) {
  $form = array();

  if ($order->financial_state == 'CHARGED') {
    $form['action'] = array(
      '#type' => 'select',
      '#title' => t('Action'),
      '#default_value' => 'charge',
      '#options' => array(
        'charge' => t('Charge'),
        'refund' => t('Refund'),
      ),
    );
    $form['reason'] = array(
      '#type' => 'textfield',
      '#title' => t('Reason for refund'),
      '#weight' => 1,
    );
    $form['comment'] = array(
      '#type' => 'textarea',
      '#title' => t('Refund Comment'),
      '#weight' => 2,
    );
  }
  else {
    $form['action'] = array(
      '#type' => 'value',
      '#value' => 'charge',
    );
  }
  $form['amount'] = array(
    '#type' => 'textfield',
    '#title' => t('Amount'),
    '#default_value' => uc_currency_format($amount, FALSE, FALSE),
    '#size' => 10,
    '#weight' => 0,
    '#field_prefix' => variable_get('uc_sign_after_amount', FALSE) ? '' : variable_get('uc_currency_sign', '$'),
    '#field_suffix' => variable_get('uc_sign_after_amount', FALSE) ? variable_get('uc_currency_sign', '$') : '',
  );
  $form['gc_balance'] = array(
    '#type' => 'value',
    '#value' => $amount,
  );
  $form['gc_total'] = array(
    '#type' => 'value',
    '#value' => $order->gc_total,
  );
  $form['order_id'] = array(
    '#type' => 'hidden',
    '#value' => $order->order_id,
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Submit'),
    '#weight' => 10,
  );

  return $form;
}

function uc_google_checkout_terminal_form_validate($form, &$form_state) {
  if (!is_numeric($form_state['values']['amount']) || $form_state['values']['amount'] == 0) {
    form_set_error('amount', t('You must enter a number for the amount.'));
  }
  if ($form_state['values']['action'] == 'charge' && $form_state['values']['amount'] > $form_state['values']['gc_balance']) {
    form_set_error('amount', t('Google does not allow charges greater than the balance.'));
  }
  if ($form_state['values']['action'] == 'refund' && $form_state['values']['amount'] > $form_state['values']['gc_total'] - $form_state['values']['gc_balance']) {
    form_set_error('amount', t('Google does not allow refunds greater than the amount already charged.'));
  }
  if ($form_state['values']['action'] == 'refund' && empty($form_state['values']['reason'])) {
    form_set_error('reason', t('A reason for refunding the customer is required.'));
  }

  $order = uc_order_load($form_state['values']['order_id']);
  if ($order === FALSE) {
    form_set_error('', t('Invalid order ID.  Unable to process payment.'));
  }
}

function uc_google_checkout_terminal_form_submit($form, &$form_state) {
  if ($form_state['values']['action'] == 'charge') {
    $form_state['redirect'] = uc_google_checkout_charge($form_state['values']['order_id'], $form_state['values']['amount']);
  }
  else if ($form_state['values']['action'] == 'refund') {
    $form_state['redirect'] = uc_google_checkout_refund($form_state['values']['order_id'], $form_state['values']['amount'], $form_state['values']['reason'], $form_state['values']['comment']);
  }
}

function uc_google_checkout_callback() {
  require_once(drupal_get_path('module', 'uc_google_checkout') .'/includes/xmlparser.php');

  if (variable_get('uc_google_checkout_mode', 'checkout') == 'checkout') {
    $merchant_id = variable_get('uc_google_merchant_id', '');
    $merchant_key = variable_get('uc_google_merchant_key', '');
  }
  else {
    $merchant_id = variable_get('uc_google_test_merchant_id', '');
    $merchant_key = variable_get('uc_google_test_merchant_key', '');
  }

  //watchdog('google', check_plain($_SERVER['PHP_AUTH_USER']), NULL, WATCHDOG_NOTICE);
  if ($_SERVER['PHP_AUTH_USER'] != $merchant_id) {
    watchdog('google', 'HTTP Authorization User does not match settings.', array(), WATCHDOG_ERROR);
  }
  //watchdog('google', check_plain($_SERVER['PHP_AUTH_PW']), NULL, WATCHDOG_NOTICE);
  if ($_SERVER['PHP_AUTH_PW'] != $merchant_key) {
    watchdog('google', 'HTTP Authorization Password does not match settings.', array(), WATCHDOG_ERROR);
  }
  $input = file_get_contents('php://input');
  //watchdog('google', print_r(check_plain($input), TRUE), NULL, WATCHDOG_NOTICE);
  $xml = new XMLParser($input);
  switch ($xml->root) {
    case 'merchant-calculation-callback':
      //uc_google_checkout_merchant_calculation($xml);
    break;
    case 'new-order-notification':
      uc_google_checkout_new_order($xml);
    break;
    case 'order-state-change-notification':
      uc_google_checkout_order_state_change($xml);
    break;
    case 'risk-information-notification':
      uc_google_checkout_accept_risk($xml);
    break;
    case 'charge-amount-notification':
      uc_google_checkout_charge_order($xml);
    break;
    case 'refund-amount-notification':
      uc_google_checkout_refund_order($xml);
    break;
    default:
      watchdog('google', 'Unknown notification document: @xml', array('@xml' => $input), WATCHDOG_ERROR);
      $output = uc_google_checkout_notification_acknowledgement($xml->params[$xml->root]['serial-number']);
  }
}

function uc_google_checkout_new_order($xml) {
  $new_order = $xml->params['new-order-notification'];
  $order_id = $new_order['shopping-cart']['merchant-private-data']['order-id']['VALUE'];
  $cart_id = $new_order['shopping-cart']['merchant-private-data']['cart-id']['VALUE'];

  $order = uc_order_load($order_id);
  if ($order) {
    $shipping_address = $new_order['buyer-shipping-address'];
    $order->delivery_company = $shipping_address['company-name']['VALUE'];
    $order->delivery_first_name = $shipping_address['structured-name']['first-name']['VALUE'];
    $order->delivery_last_name = $shipping_address['structured-name']['last-name']['VALUE'];
    $order->delivery_phone = $shipping_address['phone']['VALUE'];
    $order->delivery_street1 = $shipping_address['address1']['VALUE'];
    $order->delivery_street2 = $shipping_address['address2']['VALUE'];
    $order->delivery_city = $shipping_address['city']['VALUE'];
    $zone_id = db_result(db_query("SELECT zone_id FROM {uc_zones} WHERE zone_code = '%s'", $shipping_address['region']['VALUE']));
    $order->delivery_zone = $zone_id;
    $countries = uc_get_country_data(array('country_iso_code_2' => $shipping_address['country-code']['VALUE']));
    $order->delivery_country = $countries[0]['country_id'];
    $order->delivery_postal_code = $shipping_address['postal-code']['VALUE'];

    $billing_address = $new_order['buyer-billing-address'];
    $order->billing_company = $billing_address['company-name']['VALUE'];
    $order->billing_first_name = $billing_address['structured-name']['first-name']['VALUE'];
    $order->billing_last_name = $billing_address['structured-name']['last-name']['VALUE'];
    $order->billing_phone = $billing_address['phone']['VALUE'];
    $order->billing_street1 = $billing_address['address1']['VALUE'];
    $order->billing_street2 = $billing_address['address2']['VALUE'];
    $order->billing_city = $billing_address['city']['VALUE'];
    if ($billing_address['region'] != $shipping_address['region']['VALUE']) {
      $zone_id = db_result(db_query("SELECT zone_id FROM {uc_zones} WHERE zone_code = '%s'", $billing_address['region']));
    }
    $order->billing_zone = $zone_id;
    if ($billing_address['country-code'] != $shipping_address['country-code']['VALUE']) {
      $countries = uc_get_country_data(array('country_iso_code_2' => $billing_address['country-code']['VALUE']));
    }
    $order->billing_country = $countries[0]['country_id'];
    $order->billing_postal_code = $billing_address['postal-code']['VALUE'];

    if (!$order->primary_email) {
      $order->primary_email = $billing_address['email']['VALUE'];
    }

    if ($new_order['buyer-marketing-preferences']['email-allowed']['VALUE'] == 'true') {
      $order->data['email_allowed'] = TRUE;
      if (module_exists('simplenews')) {
        simplenews_subscribe_user($order->primary_email, variable_get('uc_google_checkout_simplenews_tid', 0), TRUE);
      }
    }
    else {
      $order->data['email_allowed'] = FALSE;
      if (module_exists('simplenews')) {
        simplenews_unsubscribe_user($order->primary_email, variable_get('uc_google_checkout_simplenews_tid', 0), FALSE);
      }
    }

    $order->payment_method = 'google_checkout';

    uc_order_line_item_add($order_id, 'tax', t('Total tax'), $new_order['order-adjustment']['total-tax']['VALUE']);
    $shipping_lines = $new_order['order-adjustment']['shipping'];
    if (is_array($shipping_lines)) {
      $shipping_line = array_pop($shipping_lines);
      uc_order_line_item_add($order_id, 'shipping', check_plain($shipping_line['shipping-name']['VALUE']), $shipping_line['shipping-cost']['VALUE']);
    }

    uc_order_save($order);

    uc_cart_complete_sale($order);
    // uc_cart_complete_sale() empties the current cart (Google Checkout
    // API's cart) so we must empty the customer's manually.
    uc_cart_empty($cart_id);
    // Add a comment to let sales team know this came in through the site.
    uc_order_comment_save($order->order_id, 0, t('Order created through Google Checkout (#@gco_order).', array('@gco_order' => $new_order['google-order-number']['VALUE'])), 'admin');

    db_query("INSERT INTO {uc_gc_orders} (order_id, gc_order_number, gc_total) VALUES (%d, %d, %f)", $order_id, $new_order['google-order-number']['VALUE'], $new_order['order-total']['VALUE']);

    uc_google_checkout_notification_acknowledgement($new_order['serial-number']);
  }
  else {
    uc_google_checkout_notification_error();
  }
}

function uc_google_checkout_accept_risk($xml) {
  $risk = $xml->params['risk-information-notification'];
  $order_id = uc_google_checkout_get_order($risk['google-order-number']['VALUE']);
  if ($order_id) {
    $risk_info = $risk['risk-information'];
    $assessment = t('Risk information notification:') .'<br />';
    switch ($risk_info['avs-response']['VALUE']) {
      case 'Y':
        $assessment .= t('- Full AVS match (address and postal code)');
      break;
      case 'P':
        $assessment .= t('- Partial AVS match (postal code only)');
      break;
      case 'A':
        $assessment .= t('- Partial AVS match (address only)');
      break;
      case 'N':
        $assessment .= t('- No AVS match');
      break;
      case 'U':
        $assessment .= t('- AVS not supported by issuer');
      break;
      default:
        $assessment .= t('<b>Error:</b> No AVS response.');
      break;
    }
    $assessment .= '<br />';
    switch ($risk_info['cvn-response']['VALUE']) {
      case 'M':
        $assessment .= t('- CVN match');
      break;
      case 'N':
        $assessment .= t('- No CVN match');
      break;
      case 'U':
        $assessment .= t('- CVN not available');
      break;
      case 'E':
        $assessment .= t('- CVN error');
      break;
      default:
        $assessment .= t('<b>Error:</b> No CVN response.');
      break;
    }
    $assessment .= '<br />';
    $assessment .= t('Partial CC number: %s', array('%s' => $risk_info['partial-cc-number']['VALUE']));
    $assessment .= '<br />';
    $assessment .= t('Google Checkout member for %mo months.', array('%mo' => $risk_info['buyer-account-age']['VALUE']));
    $assessment .= '<br />';
    $assessment .= t('Eligible for protection: <strong>@bool</strong', array('@bool' => strtoupper($risk_info['eligible-for-protection']['VALUE'])));
    uc_order_comment_save($order_id, 0, $assessment, 'admin', 'chargeable');
    uc_google_checkout_notification_acknowledgement($risk['serial-number']);
  }
}

function uc_google_checkout_order_state_change($xml) {
  $change = $xml->params['order-state-change-notification'];
  $order_id = uc_google_checkout_get_order($change['google-order-number']['VALUE']);
  if ($order_id) {
    $new_financial = $change['new-financial-order-state']['VALUE'];
    $new_fulfillment = $change['new-fulfillment-order-state']['VALUE'];
    $prev_financial = $change['previous-financial-order-state']['VALUE'];
    $prev_fulfillment = $change['previous-fulfillment-order-state']['VALUE'];
    db_query("UPDATE {uc_gc_orders} SET financial_state = '%s', fulfillment_state = '%s' WHERE order_id = %d AND financial_state = '%s' AND fulfillment_state = '%s'", array($new_financial, $new_fulfillment, $order_id, $prev_financial, $prev_fulfillment));
    if ($new_financial != $prev_financial) {
      $_SESSION['google_updates'] = TRUE;
      switch ($new_financial) {
        case 'CHARGEABLE':
          uc_order_update_status($order_id, 'chargeable');
        break;
        case 'CHARGING':
          watchdog('google', 'Charging @order_id', array('@order_id' => $order_id));
        break;
        case 'CHARGED':
          watchdog('google', 'Charged @order_id', array('@order_id' => $order_id));
        break;
        case 'PAYMENT_DECLINED':
          watchdog('google', 'Payment declined @order_id', array('@order_id' => $order_id));
        break;
        case 'CANCELLED_BY_GOOGLE':
          $message = t('Order %order canceled by Google: %reason', array('%order' => $order_id, '%reason' => $change['reason']['VALUE']));
          uc_order_comment_save($order_id, 0, $message, 'admin', 'canceled');
        case 'CANCELLED':
          uc_order_comment_save($order_id, 0, t('Order canceled.'), 'order', 'canceled');
          uc_order_update_status($order_id, 'canceled');
        break;
        default:

        break;
      }
      unset($_SESSION['google_updates']);
    }
    else if ($new_fulfillment != $prev_fulfillment) {
      $_SESSION['google_updates'] = TRUE;
      switch ($new_fulfillment) {
        case 'PROCESSING':
          watchdog('google', 'Processing @order_id', array('@order_id' => $order_id));
        break;
        case 'DELIVERED':
          uc_order_update_status($order_id, 'completed');
          watchdog('google', 'Delivered @order_id', array('@order_id' => $order_id));
        break;
        case 'WILL_NOT_DELIVER':
          watchdog('google', 'Will not deliver @order_id', array('@order_id' => $order_id));
        break;
      }
      unset($_SESSION['google_updates']);
    }
    uc_google_checkout_notification_acknowledgement($change['serial-number']);
  }
  else {
    // TODO: Get rid of this when the bad updates stop coming in.
    uc_google_checkout_notification_acknowledgement($change['serial-number']);
    // TODO: uncomment this when the above TODO is done.
    // uc_google_checkout_notification_error();
  }
}

function uc_google_checkout_charge($order_id, $amount) {
  $google_order_number = uc_google_checkout_get_google_number($order_id);
  $output = '';

  $output .= '<?xml version="1.0" encoding="UTF-8"?>';
  $output .= "\n";
  $output .= '<charge-order xmlns="http://checkout.google.com/schema/2" google-order-number="'. $google_order_number .'">';
  $output .= '<amount currency="'. variable_get('uc_currency_code', 'USD') .'">'. $amount .'</amount>';
  $output .= '</charge-order>';

  if ($response = uc_google_checkout_send_request('request', $output)) {
    drupal_set_message('Charge request sent to Google Checkout. The charge confirmation should appear on this page momentarily.');
  }
  return 'admin/store/orders/'. $order_id;
}

function uc_google_checkout_charge_order($xml) {
  $charge = $xml->params['charge-amount-notification'];
  $order_id = uc_google_checkout_get_order($charge['google-order-number']['VALUE']);
  if ($order_id) {
    uc_payment_enter($order_id, 'google_checkout', $charge['latest-charge-amount']['VALUE'], 0,
                     '', t('Payment received by Google Checkout'));
    uc_order_comment_save($order_id, 0, t('Payment of %amount received by Google Checkout.', array('%amount' => uc_currency_format($charge['latest-charge-amount']['VALUE']))), 'admin', 'chargeable');
    uc_google_checkout_notification_acknowledgement($charge['serial-number']);
  }
  else {
    uc_google_checkout_notification_error();
  }
}

function uc_google_checkout_refund($order_id, $amount, $reason, $comment = '') {
  $google_order_number = uc_google_checkout_get_google_number($order_id);
  $output = '';

  $output .= '<?xml version="1.0" encoding="UTF-8"?>';
  $output .= "\n";
  $output .= '<refund-order xmlns="http://checkout.google.com/schema/2" google-order-number="'. $google_order_number .'">';
  $output .= '<amount currency="'. variable_get('uc_currency_code', 'USD') .'">'. $amount .'</amount>';
  $output .= '<comment>'. check_plain($comment) .'</comment>';
  $output .= '<reason>'. check_plain($reason) .'</reason>';
  $output .= '</refund-order>';

  if ($response = uc_google_checkout_send_request('request', $output)) {
    drupal_set_message('Refund request sent to Google Checkout. The refund confirmation should appear on this page momentarily.');
  }
  return 'admin/store/orders/'. $order_id;
}

function uc_google_checkout_refund_order($xml) {
  $refund = $xml->params['refund-amount-notification'];
  $order_id = uc_google_checkout_get_order($refund['google-order-number']['VALUE']);
  if ($order_id) {
    uc_payment_enter($order_id, 'google_checkout', -$refund['latest-refund-amount']['VALUE'],
                     0, '', t('Refund received by Google Checkout'));
    uc_order_comment_save($order_id, 0, t('Refund of %amount received by Google Checkout.', array('%amount' => uc_currency_format($refund['latest-refund-amount']['VALUE']))),
                          'admin', 'processing');
    uc_google_checkout_notification_acknowledgement($refund['serial-number']);
  }
  else {
    uc_google_checkout_notification_error();
  }
}

function uc_google_checkout_notify_update($form, &$form_state) {
  $order = uc_order_load($form_state['values']['order_id']);
  if ($order !== FALSE && isset($form_state['values']['order_comment']) && strlen($form_state['values']['order_comment'])) {
    $request = uc_google_checkout_buyer_message_request($form_state['values']['order_id'], $form_state['values']['order_comment']);
    $response = uc_google_checkout_send_request('request', $request);
  }
}

function uc_google_checkout_buyer_message_request($order_id, $message) {
  $google_order_number = uc_google_checkout_get_google_number($order_id);
  $output = '<?xml version="1.0" encoding="UTF-8"?>';
  $output .= "\n";
  $output .= '<send-buyer-message xmlns="http://checkout.google.com/schema/2" google-order-number="'. $google_order_number .'">';
  $output .= '<message>'. check_plain($message) .'</message>';
  $output .= '<send-email>'. (module_exists('uc_notify') && variable_get('uc_notify_order_update_enabled', TRUE) ? 'true' : 'false') .'</send-email>';
  $output .= '</send-buyer-message>';

  return $output;
}

function uc_google_checkout_cancel_order($order) {
  $request = '<?xml version="1.0" encoding="UTF-8"?>';
  $request .= "\n";
  $request .= '<cancel-order xmlns="http://checkout.google.com/schema/2" google-order-number="'. $order->google_order_number .'">';
  $request .= '<reason>'. token_replace_multiple(variable_get('uc_google_checkout_order_cancel_reason', t('Order canceled. See order comments at [order-url] for more information.')), array('global' => NULL, 'order' => $order)) .'</reason>';
  $request .= '</cancel-order>';

  if ($response = uc_google_checkout_send_request('request', $request)) {
    return TRUE;
  }
  else {
    return FALSE;
  }
}

function uc_google_checkout_notification_acknowledgement($serial_number) {
  drupal_set_header('HTTP/1.1 200 OK');
  print '<?xml version="1.0" encoding="UTF-8"?>';
  print "\n";
  print '<notification-acknowledgment xmlns="http://checkout.google.com/schema/2" serial-number="'. $serial_number .'" />';
  exit();
}

function uc_google_checkout_notificiation_error($message = NULL) {
  if (is_null($message)) {
    $message = t('Unknown order id or malformed XML.');
  }
  drupal_set_header('HTTP/1.1 400 Bad Request');
  watchdog('google', $message, NULL, WATCHDOG_ERROR);
  exit();
}

function uc_google_checkout_get_order($google_order_number) {
  return db_result(db_query("SELECT order_id FROM {uc_gc_orders} WHERE gc_order_number = %d", $google_order_number));
}

function uc_google_checkout_get_google_number($order_id) {
  return db_result(db_query("SELECT gc_order_number FROM {uc_gc_orders} WHERE order_id = %d", $order_id));
}

function uc_google_checkout_shipping_services() {
  return array_merge(uc_google_checkout_fedex_services(), uc_google_checkout_ups_services(), uc_google_checkout_usps_services());
}

function uc_google_checkout_fedex_services() {
  return array(
    'fedex_ground' => 'Ground',
    'fedex_home' => 'Home Delivery',
    'fedex_express' => 'Express Saver',
    'fedex_first' => 'First Overnight',
    'fedex_priority' => 'Priority Overnight',
    'fedex_standard' => 'Standard Overnight',
    'fedex_2day' => '2Day',
  );
}

function uc_google_checkout_ups_services() {
  return array(
    'ups_next_day' => 'Next Day Air',
    'ups_next_day_am' => 'Next Day Air Early AM',
    'ups_next_day_saver' => 'Next Day Air Saver',
    'ups_2nd_day' => '2nd Day Air',
    'ups_2nd_day_am' => '2nd Day Air AM',
    'ups_3_day' => '3 Day Select',
    'ups_ground' => 'Ground',
  );
}

function uc_google_checkout_usps_services() {
  return array(
    'usps_express' => 'Express Mail',
    'usps_priority' => 'Priority Mail',
    'usps_parcel' => 'Parcel Post',
    'usps_media' => 'Media Mail',
  );
}

function uc_google_checkout_shipping_companies() {
  return array(
    'fedex' => 'FedEx',
    'ups' => 'UPS',
    'usps' => 'USPS',
  );
}
