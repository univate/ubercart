<?php
// $Id$

/**
 * @file
 * A module used for Authorize.net payment gateway - AIM only.
 *
 * Developed by Bobby Alcorn (http://www.bobbyalcorn.com | bobbyalcorn@gmail.com)
 * Development Sponsored by NetSuccess (http://www.netsuccess.com)
*/
 
 
/**
 * Menu callback for admin_settings.
*/
function authorizenet_gateway_admin_settings() {
  $form['gateway_settings'] = array(
    '#type' => 'fieldset',
    '#title' => t('AIM Gateway Settings'),
  );
  $form['gateway_settings']['gateway_login_username'] = array(
    '#type' => 'textfield',
    '#title' => t('Login Username'),
    '#default_value' => variable_get('gateway_login_username', ''),
    '#description' => t('The login username used for the Authorize.net service.'),
  );
  $form['gateway_settings']['gateway_transaction_key'] = array(
    '#type' => 'textfield',
    '#title' => t('Transaction Key'),
    '#default_value' => variable_get('gateway_transaction_key', ''),
    '#description' => t('Transaction Key used for encrypting TP data.'),
  );
  $transaction_mode_options['Production'] = 'Production';
  $transaction_mode_options['Test'] = 'Test';
  $form['gateway_settings']['gateway_transaction_mode'] = array(
    '#type' => 'select',
    '#title' => t('Transaction Mode'),
    '#description' => t('Transaction mode used for processing orders.'),
    '#options' => $transaction_mode_options,
    '#default_value' => variable_get('gateway_transaction_mode', 'Test'),
  );
  $transaction_method_options['Credit Card'] = 'Credit Card';
  $transaction_method_options['eCheck'] = 'eCheck';
  $form['gateway_settings']['gateway_transaction_method'] = array(
    '#type' => 'select',
    '#title' => t('Transaction Method'),
    '#description' => t('Transaction method used for processing orders.'),
    '#options' => $transaction_method_options,
    '#default_value' => variable_get('gateway_transaction_method', 'Credit Card'),
  );
  $customer_notification_options['True'] = 'True';
  $customer_notification_options['False'] = 'False';
  $form['gateway_settings']['gateway_customer_notification'] = array(
    '#type' => 'select',
    '#title' => t('Customer Notifications'),
    '#description' => t('Should Authorize.Net e-mail a receipt to the customer?'),
    '#options' => $customer_notification_options,
    '#default_value' => variable_get('gateway_customer_notification', 'False'),
  );
  $merchant_notification_options['True'] = 'True';
  $merchant_notification_options['False'] = 'False';
  $form['gateway_settings']['gateway_merchant_notification'] = array(
    '#type' => 'select',
    '#title' => t('Merchant Notifications'),
    '#description' => t('Should Authorize.Net e-mail a receipt to the merchant?'),
    '#options' => $merchant_notification_options,
    '#default_value' => variable_get('gateway_merchant_notification', 'False'),
  );
  
  return system_settings_form($form);
}
 
/**
 * Implementation of hook_menu().
*/
function authorizenet_gateway_menu($may_cache) {
  $items = array();

  if ($may_cache) {
    $items[] = array(
      'path' => 'admin/store/settings/payment/authorizenet',
      'title' => t('Authorize.net'),
      'description' => t('Configure Authorize.net Gateway Settings.'),
      'callback' => 'drupal_get_form',
      'callback arguments' => 'authorizenet_gateway_admin_settings',
      'access' => user_access('administer site configuration'),
    );
  }
  else {
    // ...
  }

  return $items;
}

/*******************************************************************************
 * Hook Functions (Ubercart)
 ******************************************************************************/

function authorizenet_gateway_payment_gateway() {
  $gateways[] = array(
    'id' => 'authorizenet_gateway',
    'name' => t('Authorize.net Gateway'),
    'description' => t('Process credit card payments using the AIM Authorize.net Gateway.'),
    'credit' => 'authorizenet_gateway_charge',
  );

  return $gateways;
}

function authorizenet_gateway_charge($order_id, $amount, $data) {
  global $user, $response;
  $order = uc_order_load($order_id);
  $items = uc_cart_get_contents();

  foreach ($items as $item) {
	$description = $item->title;
	$description .= ' x' . $item->qty;
    $rows = array();
    foreach ($item->options as $option) {
	  $description .= ', ' . $option['attribute'] . ': ' . $option['name'];
    }
  }
  $description = substr($description, 0, 255);

  unset($submit_data);
  $submit_data = array(
    x_login => variable_get('gateway_login_username', ''),
	x_tran_key => variable_get('gateway_transaction_key', ''),
	x_relay_response => 'FALSE',
	x_delim_data => 'TRUE',
	x_version => '3.1',
	x_type => 'AUTH_CAPTURE',
	x_method => 'CC',
	x_amount => $amount,
	x_card_num => $order->payment_details['cc_number'],
	x_exp_date => $order->payment_details['cc_exp_month'] . "/" . $order->payment_details['cc_exp_year'],
	x_card_code => $order->payment_details['cc_cvv'],
	x_email_customer => variable_get('gateway_customer_notification', 'False'),
	x_email_merchant => variable_get('gateway_merchant_notification', 'False'),
	x_cust_id => $order->uid,
	x_invoice_num => $order_id,
	x_first_name => $order->billing_first_name,
	x_last_name => $order->billing_last_name,
	x_company => $order->billing_company,
	x_address => $order->billing_street1,
	x_city => $order->billing_city,
	x_state => $order->billing_zone,
	x_zip => $order->billing_postal_code,
	x_country => $order->billing_country,
	x_phone => $order->billing_phone,
	x_email => $order->primary_email,
	x_ship_to_first_name => $order->delivery_first_name,
	x_ship_to_last_name => $order->delivery_last_name,
	x_ship_to_address => $order->delivery_street1,
	x_ship_to_city => $order->delivery_city,
	x_ship_to_state => $order->delivery_zone,
	x_ship_to_zip => $order->delivery_postal_code,
	x_ship_to_country => $order->delivery_country,
	x_description => $description,
    created => $order->created,
	modified => $order->modified
  );

  if(variable_get('gateway_transaction_mode', 'Test') == 'Test') {
	$submit_data['x_test_request'] = 'True';
  } else {
	$submit_data['x_test_request'] = 'False';
  }

  while(list($key, $value) = each($submit_data)) {
	$data .= $key . '=' . urlencode(ereg_replace(',', '', $value)) . '&';
  }

  $data = substr($data, 0, -1);

  if (variable_get('gateway_transaction_mode', 'Test') == 'Test') {
	$url = 'https://secure.authorize.net/gateway/transact.dll';
  } else {
	$url = 'https://secure.authorize.net/gateway/transact.dll';
  }

  $ch = curl_init();
  curl_setopt($ch, CURLOPT_URL,$url);
  curl_setopt($ch, CURLOPT_VERBOSE, 0);
  curl_setopt($ch, CURLOPT_POST, 1);
  curl_setopt($ch, CURLOPT_POSTFIELDS, $data);
  curl_setopt($ch, CURLOPT_RETURNTRANSFER,1);
  $authorize = curl_exec($ch);
  curl_close ($ch);

  unset($response);
  $response = split('\,', $authorize);
  $response_code = explode(',', $response[0]);
  $response_text = explode(',', $response[3]);
  $approval_code = explode(',', $response[4]);
  $x_response_code = $response_code[0];
  $x_response_text = $response_text[0];
  $x_approval_code = $approval_code[0];
  
  if ($x_response_code != '1') {
	$message = t('Credit card declined: !amount', array('!amount' => uc_currency_format($amount)));
  	uc_order_comment_save($order_id, $user->uid, $message, 'admin');
	$result = array(
	  'success' => FALSE,
	  'comment' => t('Credit card payment declined: ' . $x_response_text),
	  'message' => t('Credit card payment declined: ' . $x_response_text),
	  'uid' => $user->uid,
	);
  } else {
	$message = t('Credit card charged: !amount', array('!amount' => uc_currency_format($amount)));
  	uc_order_comment_save($order_id, $user->uid, $message, 'admin');
	$result = array(
      'success' => TRUE,
      'comment' => t('Credit card payment processed successfully. Approval code: '. $x_approval_code),
      'message' => t('Credit card payment processed successfully. Approval code: '. $x_approval_code),
      'uid' => $user->uid,
    );
  }
		
  return $result;
}
