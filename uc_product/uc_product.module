<?php
// $Id: uc_product.module,v 1.14.2.9 2008-11-07 21:13:24 islandusurper Exp $

/**
 * @file
 * The product module for Ubercart.
 *
 * Provides information that is common to all products, and user-defined product
 * classes for more specification. Recommends the image and taxonomy modules.
 *
 * Coded by: Lyle Mantooth
 * Product Features by: Ryan Szrama
 */

/******************************************************************************
 * Drupal Hooks                                                               *
 ******************************************************************************/

/**
 * Implementation of hook_menu().
 */
function uc_product_menu() {
  $items = array();

  $items['admin/store/products'] = array(
    'title' => 'Products',
    'description' => 'Administer products, classes, and more.',
    'access arguments' => array('administer products'),
    'page callback' => 'uc_product_administration',
    'type' => MENU_NORMAL_ITEM,
    'weight' => -2,
    'file' => 'uc_product.admin.inc',
  );
  $items['admin/store/products/view'] = array(
    'title' => 'View products',
    'description' => 'Build and view a list of product nodes.',
    'access arguments' => array('administer products'),
    'type' => MENU_NORMAL_ITEM,
    'weight' => -10,
    'file' => 'uc_product.admin.inc',
  );
  $items['admin/store/products/classes'] = array(
    'title' => 'Manage classes',
    'description' => 'Create and edit product node types.',
    'access arguments' => array('administer product classes'),
    'page callback' => 'uc_product_class_default',
    'type' => MENU_NORMAL_ITEM,
    'weight' => -2,
    'file' => 'uc_product.admin.inc',
  );
  $items['admin/store/settings/products'] = array(
    'title' => 'Product settings',
    'description' => 'Configure product settings.',
    'access arguments' => array('administer products'),
    'page callback' => 'uc_product_settings_overview',
    'type' => MENU_NORMAL_ITEM,
    'file' => 'uc_product.admin.inc',
  );
  $items['admin/store/settings/products/overview'] = array(
    'title' => 'Overview',
    'weight' => -10,
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );
  $items['admin/store/settings/products/edit'] = array(
    'title' => 'Edit',
    'access arguments' => array('administer products'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('uc_product_settings_form'),
    'weight' => -5,
    'type' => MENU_LOCAL_TASK,
    'file' => 'uc_product.admin.inc',
  );
  $items['admin/store/settings/products/edit/general'] = array(
    'title' => 'Product settings',
    'access arguments' => array('administer products'),
    'weight' => -10,
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'file' => 'uc_product.admin.inc',
  );
  $items['admin/store/settings/products/edit/fields'] = array(
    'title' => 'Product fields',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('uc_product_field_settings_form'),
    'access arguments' => array('administer products'),
    'weight' => -5,
    'type' => MENU_LOCAL_TASK,
    'file' => 'uc_product.admin.inc',
  );
  $items['admin/store/settings/products/edit/features'] = array(
    'title' => 'Product features',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('uc_product_feature_settings_form'),
    'access arguments' => array('administer product features'),
    'weight' => 0,
    'type' => MENU_LOCAL_TASK,
    'file' => 'uc_product.admin.inc',
  );
  // Insert subitems into the edit node page for product types.
  $items['node/%node/edit/product'] = array(
    'title' => 'Product',
    'access callback' => 'uc_product_edit_access',
    'access arguments' => array(1),
    'weight' => -10,
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'file' => 'uc_product.admin.inc',
  );
  $features = module_invoke_all('product_feature');
  if (!empty($features)) {
    $items['node/%node/edit/features'] = array(
      'title' => 'Features',
      'page callback' => 'uc_product_features',
      'page arguments' => array(1),
      'access callback' => 'uc_product_feature_access',
      'access arguments' => array(1),
      'weight' => 10,
      'type' => MENU_LOCAL_TASK,
      'file' => 'uc_product.admin.inc',
    );
  }

  $items['admin/store/settings/products/defaults'] = array(
    'access arguments' => array('administer products'),
    'page callback' => 'uc_product_image_defaults',
    'type' => MENU_CALLBACK,
    'file' => 'uc_product.admin.inc',
  );
  $items['admin/store/products/classes/%uc_product_class'] = array(
    'title' => 'Product class',
    'access arguments' => array('administer product classes'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('uc_product_class_form', 4),
    'type' => MENU_CALLBACK,
    'file' => 'uc_product.admin.inc',
  );
  $items['admin/store/products/classes/%uc_product_class/edit'] = array(
    'title' => 'Edit',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -5,
    'file' => 'uc_product.admin.inc',
  );
  $items['admin/store/products/classes/%uc_product_class/delete'] = array(
    'access arguments' => array('administer product classes'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('uc_product_class_delete_confirm', 4),
    'type' => MENU_CALLBACK,
    'file' => 'uc_product.admin.inc',
  );

  return $items;
}

/**
 * Implementation of hook_help().
 */
function uc_product_help($path, $arg) {
  // Do things here later. Figure out what you need to say for each section.
  switch ($path) {
    case 'admin/settings/module#description':
      $output = t('Create products for sale in an online store.');
      break;
    default:
      $output = '';
      break;
  }
  return $output;
}

/**
 * Implementation of hook_perm().
 */
function uc_product_perm() {
  $perms = array('administer products', 'administer product classes', 'administer product features');
  foreach (node_get_types() as $type) {
    if ($type->module == 'uc_product') {
      $name = check_plain($type->type);
      if ($name == 'product') {
        $name = '';
      }
      else {
        $name .= ' ';
      }
      $perms[] = 'create '. $name .'products';
      $perms[] = 'edit own '. $name .'products';
      $perms[] = 'edit all '. $name .'products';
      $perms[] = 'delete own '. $name .'products';
      $perms[] = 'delete all '. $name .'products';
    }
  }
  return $perms;
}

/**
 * Implementation of hook_access().
 */
function uc_product_access($op, $node, $account) {
  $type = is_string($node) ? $node : (is_array($node) ? $node['type'] : $node->type);

  if ($type == 'product') {
    $type = '';
  }
  else {
    $type .= ' ';
  }
  switch ($op) {
    case 'create':
      return user_access('create '. $type .'products', $account);
    case 'update':
      if (user_access('edit all'. $type .'products', $account) || (user_access('edit own '. $type .'products', $account) && ($account->uid == $node->uid))) {
        return TRUE;
      }
      break;
    case 'delete':
      if (user_access('delete all'. $type .'products', $account) || (user_access('delete own '. $type .'products', $account) && ($account->uid == $node->uid))) {
        return TRUE;
      }
      break;
  }
}

/**
 * Menu access callback for 'node/%node/edit/features'.
 */
function uc_product_feature_access($node) {
  return uc_product_is_product($node) && user_access('administer product features');
}

/**
 * Implementation of hook_init().
 */
function uc_product_init() {
  drupal_add_css(drupal_get_path('module', 'uc_product') .'/uc_product.css');
}

/**
 * Implementation of hook_enable().
 *
 * Set up default imagefield and imagecache settings.
 */
function uc_product_enable() {
  // For some time in Drupal 5, CCK would delete its field data if a node
  // type was unavailable because its module was disabled. This function
  // worked around that by giving the product classes to node.module when
  // uc_product was disabled. This is no longer necessary as of CCK 5.x-1.9,
  // but the workaround was left in to prevent accidents. This block of
  // code is here to reclaim the product nodes after an upgrade to Drupal
  // 6, and then should not be used again as the corresponding code in
  // uc_product_disable() was removed.
  if (variable_get('uc_product_enable_nodes', TRUE)) {
    $node_types = node_get_types('types');
    $product_classes = array('product');
    $result = db_query("SELECT pcid, name, description FROM {uc_product_classes}");
    while ($product_class = db_fetch_object($result)) {
      $product_classes[] = $product_class->pcid;
    }
    foreach ($node_types as $type => $info) {
      if ($info->module == 'node' && in_array($type, $product_classes)) {
        $info->module = 'uc_product';
        $info->custom = 0;
        node_type_save($info);
      }
    }
    variable_set('uc_product_enable_nodes', FALSE);
  }

  if (module_exists('filefield')) {
    uc_product_add_default_image_field();
  }

  if (module_exists('imagecache')) {
    $presets = array('product', 'product_list', 'uc_thumbnail');
    foreach ($presets as $preset_name) {
      $preset = imagecache_preset_by_name($preset_name);
      if (empty($preset)) {
        // No preset of that name, so make a new one.
        $preset = imagecache_preset_save(array('presetname' => $preset_name));
      }

      $actions = imagecache_preset_actions($preset);
      if (empty($actions)) {
        // The preset has no actions, so scale the image.
        $action = array(
          'action' => 'imagecache_scale',
          'presetid' => $preset['presetid'],
          'weight' => 0,
          'data' => array(
            'upscale' => 0,
          ),
        );
        switch ($preset_name) {
          case 'product':
          case 'product_list':
            $action['data']['width'] = '100';
            $action['data']['height'] = '100';
          break;
          case 'uc_thumbnail':
            $action['data']['width'] = '35';
            $action['data']['height'] = '35';
          break;
          default:
            // Do not save the action and get the next preset.
            // Continue thinks swtich() is a loop, so continue it and the
            // foreach().
          continue 2;
        }
        imagecache_action_save($action);
      }
    }
  }
}

function uc_product_theme() {
  return array(
    'uc_product_form_prices' => array(
      'arguments' => array('form' => NULL),
    ),
    'uc_product_form_weight' => array(
      'arguments' => array('form' => NULL),
    ),
    'uc_product_dimensions' => array(
      'arguments' => array('form' => NULL),
    ),
    'uc_product_field_settings_form' => array(
      'arguments' => array('form' => NULL),
      'file' => 'uc_product.admin.inc',
    ),
    'uc_product_model' => array(
      'arguments' => array('model' => ''),
    ),
    'uc_product_add_to_cart' => array(
      'arguments' => array('node' => NULL),
    ),
    'uc_product_price' => array(
      'arguments' => array('price' => 0, 'class' => ''),
    ),
    'uc_product_sell_price' => array(
      'arguments' => array('price' => 0, 'teaser' => FALSE),
    ),
    'uc_product_weight' => array(
      'arguments' => array('weight' => 0, 'unit' => NULL),
    ),
    'uc_product_dimensions' => array(
      'arguments' => array('length' => 0, 'width' => 0, 'height' => 0, 'units' => NULL),
    ),
    'uc_product_image' => array(
      'arguments' => array('images'),
    ),
    'uc_product_display_price' => array(
      'arguments' => array('price' => 0),
    ),
    'uc_product_feature_add_form' => array(
      'arguments' => array('form' => NULL),
      'file' => 'uc_product.admin.inc',
    ),
  );
}

/**
 * Implementation of hook_node_info().
 *
 * Create node types for each product class and other product modules.
 */
function uc_product_node_info($reset = FALSE) {
  static $types = array();
  $title_label = t('Name');
  $body_label = t('Description');

  if (empty($types) || $reset) {
    $types = array();
    $types['product'] = array(
      'name' => t('Product'),
      'module' => 'uc_product',
      'description' => t('This node displays the representation of a product for sale on the website. It includes
        all the unique information that can be attributed to a specific model number.'),
      'title_label' => $title_label,
      'body_label' => $body_label,
    );

    $result = db_query("SELECT pcid, name, description FROM {uc_product_classes}");
    while ($class = db_fetch_object($result)) {
      $types[$class->pcid] = array(
        'name' => $class->name,
        'module' => 'uc_product',
        'description' => $class->description,
        'title_label' => $title_label,
        'body_label' => $body_label,
      );
    }
  }
  return $types;
}

/**
 * Implementation of hook_forms().
 *
 * Register an "add to cart" form for each product to prevent id collisions.
 */
function uc_product_forms($form_id, $args) {
  $forms = array();
  if (substr($form_id, 0, 27) == 'uc_product_add_to_cart_form' || substr($form_id, 0, 26) == 'uc_catalog_buy_it_now_form') {
    $products = db_query("SELECT DISTINCT nid, type FROM {node} WHERE nid = %d", $args[0]->nid);

    while ($product = db_fetch_object($products)) {
      if (in_array($product->type, array_keys(uc_product_node_info()))) {
        $forms['uc_product_add_to_cart_form_'. $product->nid] = array('callback' => 'uc_product_add_to_cart_form');
        $forms['uc_catalog_buy_it_now_form_'. $product->nid] = array('callback' => 'uc_catalog_buy_it_now_form');
      }
    }
  }
  return $forms;
}

/**
 * Menu access callback for 'node/%node/edit/product'.
 */
function uc_product_edit_access($node) {
  // Re-inherit access callback for 'node/%node/edit'
  return uc_product_is_product($node) && node_access('update', $node);
}

/**
 * Implementation of hook_form().
 *
 * @ingroup forms
 * @see theme_uc_product_form_prices()
 * @see theme_uc_product_form_weight()
 * @see theme_uc_product_dimensions()
 * @see uc_product_form_validate()
 */
function uc_product_form(&$node) {
  $type = node_get_types('type', $node);

  $location = array();
  $location[] = menu_get_item('admin');
  $location[] = menu_get_item('admin/store');
  $location[] = menu_get_item('admin/store/products');
  $location[] = menu_get_item('admin/store/settings/products');
  $breadcrumb = array(l('Home', ''));
  foreach ($location as $item) {
    $breadcrumb[] = l($item['title'], $item['path']);
  }
  drupal_set_breadcrumb($breadcrumb);

  $type = node_get_types('type', $node);

  $sign_flag = variable_get('uc_sign_after_amount', FALSE);
  $currency_sign = variable_get('uc_currency_sign', '$');

  $form['title'] = array('#type' => 'textfield',
    '#title' => t('Name'),
    '#required' => TRUE,
    '#weight' => -5,
    '#default_value' => $node->title,
    '#description' => t('Name of the product.')
  );

  if ($type->has_body) {
    $form['body_field'] = node_body_field($node, $type->body_label, $type->min_word_count);
    $form['body_field']['body']['#description'] = t('Enter the product description used for product teasers and pages.');
    $form['body_field']['#weight'] = -4;
  }

  $form['base'] = array('#type' => 'fieldset',
    '#title' => t('Product information'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
    '#weight' => -1,
    '#attributes' => array('class' => 'product-field'),
  );
  $form['base']['model'] = array('#type' => 'textfield',
    '#title' => t('SKU'),
    '#required' => TRUE,
    '#default_value' => $node->model,
    '#description' => t('Product SKU/model.'),
    '#weight' => 0,
    '#size' => 32,
  );

  $form['base']['prices'] = array(
    '#weight' => 5,
    '#theme' => 'uc_product_form_prices',
  );

  $form['base']['prices']['list_price'] = array(
    '#type' => 'textfield',
    '#title' => t('List price'),
    '#required' => FALSE,
    '#default_value' => $node->list_price,
    '#description' => t('The listed MSRP.'),
    '#weight' => 0,
    '#size' => 20,
    '#maxlength' => 35,
    '#field_prefix' => $sign_flag ? '' : $currency_sign,
    '#field_suffix' => $sign_flag ? $currency_sign : '',
  );
  $form['base']['prices']['cost'] = array(
    '#type' => 'textfield',
    '#title' => t('Cost'),
    '#required' => FALSE,
    '#default_value' => $node->cost,
    '#description' => t("Your store's cost."),
    '#weight' => 1,
    '#size' => 20,
    '#maxlength' => 35,
    '#field_prefix' => $sign_flag ? '' : $currency_sign,
    '#field_suffix' => $sign_flag ? $currency_sign : '',
  );
  $form['base']['prices']['sell_price'] = array(
    '#type' => 'textfield',
    '#title' => t('Sell price'),
    '#required' => TRUE,
    '#default_value' => $node->sell_price,
    '#description' => t('Customer purchase price.'),
    '#weight' => 2,
    '#size' => 20,
    '#maxlength' => 35,
    '#field_prefix' => $sign_flag ? '' : $currency_sign,
    '#field_suffix' => $sign_flag ? $currency_sign : '',
  );

  $form['base']['shippable'] = array(
    '#type' => 'checkbox',
    '#title' => t('Product and its derivatives are shippable.'),
    '#default_value' => isset($node->shippable) ? $node->shippable : TRUE,
    '#weight' => 10,
  );

  $form['base']['weight'] = array(
    '#weight' => 15,
    '#theme' => 'uc_product_form_weight',
  );
  $form['base']['weight']['weight'] = array('#type' => 'textfield',
    '#title' => t('Weight'),
    '#default_value' => $node->weight,
    '#size' => 10,
    '#maxlength' => 15,
  );
  $units = array(
    'lb' => t('Pounds'),
    'kg' => t('Kilograms'),
    'oz' => t('Ounces'),
    'g' => t('Grams'),
  );
  $form['base']['weight']['weight_units'] = array('#type' => 'select',
    '#title' => t('Unit of measurement'),
    '#default_value' => $node->weight_units ? $node->weight_units : variable_get('uc_weight_unit', 'lb'),
    '#options' => $units,
  );
  $form['base']['dimensions'] = array('#type' => 'fieldset',
    '#title' => t('Dimensions'),
    '#description' => t('Physical dimensions of the packaged product.'),
    '#weight' => 20,
    '#theme' => 'uc_product_dimensions_form',
  );
  $form['base']['dimensions']['length_units'] = array('#type' => 'select',
    '#title' => t('Units of measurement'),
    '#options' => array(
      'in' => t('Inches'),
      'ft' => t('Feet'),
      'cm' => t('Centimeters'),
      'mm' => t('Millimeters'),
    ),
    '#default_value' => $node->length_units ? $node->length_units : variable_get('uc_length_unit', 'in'),
  );
  $form['base']['dimensions']['length'] = array('#type' => 'textfield',
    '#title' => t('Length'),
    '#default_value' => $node->length,
    '#size' => 10,
  );
  $form['base']['dimensions']['width'] = array('#type' => 'textfield',
    '#title' => t('Width'),
    '#default_value' => $node->width,
    '#size' => 10,
  );
  $form['base']['dimensions']['height'] = array('#type' => 'textfield',
    '#title' => t('Height'),
    '#default_value' => $node->height,
    '#size' => 10,
  );
  $form['base']['pkg_qty'] = array('#type' => 'textfield',
    '#title' => t('Package quantity'),
    '#default_value' => $node->pkg_qty ? $node->pkg_qty : 1,
    '#description' => t('For a package containing only this product, how many are in it?'),
    '#weight' => 25,
  );
  $form['base']['default_qty'] = array('#type' => 'textfield',
    '#title' => t('Default quantity to add to cart'),
    '#default_value' => !is_null($node->default_qty) ? $node->default_qty : 1,
    '#description' => t('Leave blank or zero to disable the quantity field in the add to cart form.'),
    '#weight' => 27,
    '#size' => 5,
    '#maxlength' => 6,
  );
  $form['base']['ordering'] = array('#type' => 'weight',
    '#title' => t('List position'),
    '#description' => t("Specify a value to set this product's position in product lists.<br />Products in the same position will be sorted alphabetically."),
    '#delta' => 25,
    '#default_value' => isset($node->ordering) ? $node->ordering : 0,
    '#weight' => 30,
  );

  return $form;
}

/**
 * @ingroup themeable
 */
function theme_uc_product_form_prices($form) {
  return "<table><tr><td>\n". drupal_render($form['list_price'])
    .'</td><td>'. drupal_render($form['cost'])
    .'</td><td>'. drupal_render($form['sell_price'])
    ."</td></tr></table>\n";
}

/**
 * @ingroup themeable
 */
function theme_uc_product_form_weight($form) {
  return '<table><tr><td>'. drupal_render($form['weight']) .'</td><td>'
       . drupal_render($form['weight_units']) .'</td></tr></table>';
}

/**
 * Put length, width, and height fields on the same line.
 *
 * @ingroup themeable
 */
function theme_uc_product_dimensions_form($form) {
  $output = '';
  $row = array();
  foreach (element_children($form) as $dimension) {
    $row[] = drupal_render($form[$dimension]);
  }
  $output .= theme('table', array(), array($row));
  return $output;
}

function uc_product_validate($node) {
  $pattern = '/^\d*(\.\d*)?$/';
  $price_error = t('Price must be in a valid number format. No commas and only one decimal point.');
  if (!empty($node->list_price) && !is_numeric($node->list_price) && !preg_match($pattern, $node->list_price)) {
    form_set_error('list_price', $price_error);
  }
  if (!empty($node->cost) && !is_numeric($node->cost) && !preg_match($pattern, $node->cost)) {
    form_set_error('cost', $price_error);
  }
  if (!is_numeric($node->sell_price) && !preg_match($pattern, $node->sell_price)) {
    form_set_error('sell_price', $price_error);
  }
  if (!empty($node->weight) && !is_numeric($node->weight)) {
    form_set_error('weight', t('Weight must be in a valid number format. No commas and only one decimal point.'));
  }
  if ($node->default_qty) {
    if (!is_numeric($node->default_qty)) {
      form_set_error('default_qty', t('Quantities should be numeric.'));
    }
    elseif ($node->default_qty < 0) {
      form_set_error('default_qty', t("Adding negative items to the cart doesn't make sense, so don't make it easy."));
    }
  }
}

/**
 * Implementation of hook_insert().
 */
function uc_product_insert($node) {
  if (!isset($node->unique_hash)) {
    $node->unique_hash = md5($node->vid . $node->nid . $node->model . $node->list_price . $node->cost . $node->sell_price . $node->weight . $node->weight_units . $node->length . $node->width . $node->height . $node->length_units . $node->pkg_qty . $node->default_qty . $node->shippable . time());
  }
  db_query("INSERT INTO {uc_products} (vid, nid, model, list_price, cost, sell_price, weight, weight_units, length, width, height, length_units, pkg_qty, default_qty, unique_hash, ordering, shippable) VALUES (%d, %d, '%s', %f, %f, %f, %f, '%s', %f, %f, %f, '%s', %d, %d, '%s', %d, %d)",
    $node->vid, $node->nid, $node->model, $node->list_price, $node->cost, $node->sell_price, $node->weight, $node->weight_units, $node->length, $node->width, $node->height, $node->length_units, $node->pkg_qty, $node->default_qty, $node->unique_hash, $node->ordering, $node->shippable
  );
}

/**
 * Implementation of hook_update().
 */
function uc_product_update($node) {
  if ($node->revision) {
    db_query("INSERT INTO {uc_products} (vid, nid, model, list_price, cost, sell_price, weight, weight_units, length, width, height, length_units, pkg_qty, default_qty, unique_hash, ordering, shippable) VALUES (%d, %d, '%s', %f, %f, %f, %f, '%s', %f, %f, %f, '%s', %d, %d, '%s', %d, %d)",
      $node->vid, $node->nid, $node->model, $node->list_price, $node->cost, $node->sell_price, $node->weight, $node->weight_units, $node->length, $node->width, $node->height, $node->length_units, $node->pkg_qty, $node->default_qty, $node->unique_hash, $node->ordering, $node->shippable
    );
  }
  else {
    //drupal_set_message('<pre>'. print_r($node, TRUE) .'</pre>');drupal_set_message('<pre>'. print_r($node, TRUE) .'</pre>');
    db_query("UPDATE {uc_products} SET model = '%s', list_price = %f, cost = %f, sell_price = %f, weight = %f, weight_units = '%s', length = %f, width = %f, height = %f, length_units = '%s', pkg_qty = %d, default_qty = %d, ordering = %d, shippable = %d WHERE vid = %d",
      $node->model, $node->list_price, $node->cost, $node->sell_price, $node->weight, $node->weight_units, $node->length, $node->width, $node->height, $node->length_units, $node->pkg_qty, $node->default_qty, $node->ordering, $node->shippable, $node->vid);
  }
}

/**
 * Implementation of hook_load().
 */
function uc_product_load(&$node) {
  return db_fetch_object(db_query('SELECT model, list_price, cost, sell_price, weight, weight_units, length, width, height, length_units, pkg_qty, default_qty, unique_hash, ordering, shippable FROM {uc_products} WHERE vid = %d', $node->vid));
}

/**
 * Implementation of hook_delete().
 */
function uc_product_delete(&$node) {
  db_query("DELETE from {uc_products} WHERE nid = %d", $node->nid);
}

/**
 * Implementation of hook_view().
 */
function uc_product_view($node, $teaser = 0, $page = 0) {
  $node = node_prepare($node, $teaser);

  $enabled = variable_get('uc_product_field_enabled', array(
    'image' => 1,
    'display_price' => 1,
    'model' => 1,
    'list_price' => 0,
    'cost' => 0,
    'sell_price' => 1,
    'weight' => 0,
    'dimensions' => 0,
    'add_to_cart' => 1,
  ));
  $weight = variable_get('uc_product_field_weight', array(
    'image' => -2,
    'display_price' => -1,
    'model' => 0,
    'list_price' => 2,
    'cost' => 3,
    'sell_price' => 4,
    'weight' => 5,
    'dimensions' => 6,
    'add_to_cart' => 10,
  ));

  //drupal_set_message('<pre>'. print_r($node->field_image_cache, TRUE) .'</pre>');
  if (isset($node->field_image_cache) && file_exists($node->field_image_cache[0]['filepath'])) {
    $node->content['image'] = array('#value' => theme('uc_product_image', $node->field_image_cache),
      '#access' => $enabled['image'] && module_exists('imagecache'),
      '#weight' => $weight['image'],
    );
  }
  $node->content['display_price'] = array('#value' => theme('uc_product_display_price', $node->sell_price),
    '#access' => $enabled['display_price'],
    '#weight' => $weight['display_price'],
  );
  if (!$teaser) {
    $node->content['model'] = array('#value' => theme('uc_product_model', $node->model),
      '#access' => $enabled['model'],
      '#weight' => $weight['model'],
    );
    $node->content['body']['#weight'] = 1;
    $node->content['list_price'] = array('#value' => theme('uc_product_price', $node->list_price, 'list_price'),
      '#access' => $enabled['list_price'],
      '#weight' => $weight['list_price'],
    );
    $node->content['cost'] = array('#value' => theme('uc_product_price', $node->cost, 'cost'),
      '#access' => $enabled['cost'] && user_access('administer products'),
      '#weight' => $weight['cost'],
    );
  }
  else {
    $node->content['#attributes'] = array('style' => 'display: inline');
  }

  $node->content['sell_price'] = array('#value' => theme('uc_product_sell_price', $node->sell_price, $teaser),
    '#access' => $enabled['sell_price'],
    '#weight' => $weight['sell_price'],
  );

  if (!$teaser) {
    $node->content['weight'] = array('#value' => theme('uc_product_weight', $node->weight, $node->weight_units),
      '#access' => $enabled['weight'],
      '#weight' => $weight['weight'],
    );
    $node->content['dimensions'] = array('#value' => theme('uc_product_dimensions', $node->length, $node->width, $node->height, $node->length_units),
      '#access' => $enabled['dimensions'],
      '#weight' => $weight['dimensions'],
    );
    if (module_exists('uc_cart')) {
      $node->content['add_to_cart'] = array('#value' => theme('uc_product_add_to_cart', $node),
        '#access' => $enabled['add_to_cart'],
        '#weight' => $weight['add_to_cart'],
      );
    }
  }
  elseif (module_exists('uc_cart') && variable_get('uc_product_add_to_cart_teaser', TRUE)) {
    $node->content['add_to_cart'] = array('#value' => theme('uc_product_add_to_cart', $node),
      '#access' => $enabled['add_to_cart'],
      '#weight' => $weight['add_to_cart'],
    );
  }
  //drupal_set_message('<pre>'. print_r($breadcrumb, TRUE) .'</pre>');
  return $node;
}

function uc_product_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == 'search_form' && arg(0) == 'admin' && arg(1) == 'store' && arg(2) == 'products' && user_access('use advanced search')) {
    // Keyword boxes:
    $form['advanced'] = array(
      '#type' => 'fieldset',
      '#title' => t('Advanced search'),
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
      '#attributes' => array('class' => 'search-advanced'),
    );
    $form['advanced']['keywords'] = array(
      '#prefix' => '<div class="criterion">',
      '#suffix' => '</div>',
    );
    $form['advanced']['keywords']['or'] = array(
      '#type' => 'textfield',
      '#title' => t('Containing any of the words'),
      '#size' => 30,
      '#maxlength' => 255,
    );
    $form['advanced']['keywords']['phrase'] = array(
      '#type' => 'textfield',
      '#title' => t('Containing the phrase'),
      '#size' => 30,
      '#maxlength' => 255,
    );
    $form['advanced']['keywords']['negative'] = array(
      '#type' => 'textfield',
      '#title' => t('Containing none of the words'),
      '#size' => 30,
      '#maxlength' => 255,
    );

    // Taxonomy box:
    if ($taxonomy = module_invoke('taxonomy', 'form_all', 1)) {
      $form['advanced']['category'] = array(
        '#type' => 'select',
        '#title' => t('Only in the category(s)'),
        '#prefix' => '<div class="criterion">',
        '#size' => 10,
        '#suffix' => '</div>',
        '#options' => $taxonomy,
        '#multiple' => TRUE,
      );
    }

    // Node types:
    $types = array();
    $product_types = module_invoke_all('product_types');
    $node_types = module_invoke_all('node_info');
    foreach ($product_types as $id) {
      $types[$id] = $node_types[$id]['name'];
    }
    $form['advanced']['type'] = array(
      '#type' => 'checkboxes',
      '#title' => t('Only of the type(s)'),
      '#prefix' => '<div class="criterion">',
      '#suffix' => '</div>',
      '#options' => $types,
    );
    $form['advanced']['submit'] = array(
      '#type' => 'submit',
      '#value' => t('Advanced search'),
      '#prefix' => '<div class="action clear-block">',
      '#suffix' => '</div>',
    );

    $form['#validate'][] = 'node_search_validate';
  }
}

/******************************************************************************
 * TAPIr Hooks                                                                *
 ******************************************************************************/

/**
 * Define up the product list table.
 *
 * @see uc_product_table()
 */
function uc_product_table_settings() {
  $tables = array();

  $tables[] = array(
    'id' => 'uc_product_table',
    'description' => t('Lists a group of products in an abbreviated format.'),
    'path' => 'admin/store/settings/tables',
    'access' => 'administer store',
    'preview' => FALSE,
  );

  return $tables;
}

function uc_product_table_header() {
  $columns = array();

  if (module_exists('imagecache')) {
    $columns[] = array(
      'id' => 'image',
      'weight' => -5,
      'cell' => array('data' => t('Image')),
    );
  }
  $columns[] = array(
    'id' => 'name',
    'weight' => 0,
    'cell' => array('data' => t('Name'), 'field' => 'n.title'),
  );
  $columns[] = array(
    'id' => 'list_price',
    'weight' => 3,
    'cell' => array('data' => t('List price'), 'field' => 'p.list_price'),
  );
  $columns[] = array(
    'id' => 'price',
    'weight' => 5,
    'cell' => array('data' => t('Price'), 'field' => 'p.sell_price'),
  );
  if (module_exists('uc_cart') && (arg(0) != 'admin' || $_GET['q'] == 'admin/store/settings/tables/uc_product_table')) {
    $columns[] = array(
      'id' => 'add_to_cart',
      'weight' => 10,
      'cell' => array('data' => t('Add to cart'), 'nowrap' => 'nowrap'),
    );
  }

  return $columns;
}

/**
 * Display product fields in a TAPIr table.
 *
 * Display image, name, price, and add to cart form.
 */
function uc_product_table($form_state, $args = array()) {
  $table = array();

  $table['columns'] = uc_product_table_header();

  $table['rows'] = array();
  foreach ($args['nids'] as $nid) {
    $data = array();
    $node = node_load($nid);
    if ($node->type != 'image') {
      if (module_exists('imagecache') && isset($node->field_image_cache) && file_exists($node->field_image_cache[0]['filepath'])) {
        $data['image'] = array('cell' => l(theme('imagecache', 'product_list', $node->field_image_cache[0]['filepath'], $node->field_image_cache[0]['alt'], $node->field_image_cache[0]['title']), 'node/'. $node->nid, array('html' => TRUE)));
      }
      else {
        $data['image'] = array('cell' => t('n/a'));
      }
      $data['name'] = array('value' => $node->title, 'cell' => array('data' => l($node->title, 'node/'. $node->nid), 'width' => '100%'));
      $data['list_price'] = array('value' => $node->list_price, 'cell' => array('data' => theme('uc_product_price', $node->list_price, 'list_price'), 'nowrap' => 'nowrap'));
      $data['price'] = array('value' => $node->sell_price, 'cell' => array('data' => theme('uc_product_sell_price', $node->sell_price, TRUE), 'nowrap' => 'nowrap'));
      if (module_exists('uc_cart') && arg(0) != 'admin') {
        $data['add_to_cart'] = array('cell' => drupal_get_form('uc_catalog_buy_it_now_form_'. $node->nid, $node));
      }
      $table['rows'][] = $data;
    }
  }

  if (empty($table['rows'])) {
    $table['rows'][] = array(
      'name' => array(
        'cell' => array(
          'data' => t('No products available.'),
          'colspan' => count($table['columns']),
        ),
      ),
    );
  }

  $form['table'] = array(
    '#value' => $table,
    '#theme' => 'tapir_table',
    '#attributes' => array(
      'class' => 'category-products',
    ),
  );

  return $form;
}

/**
 * @ingroup forms
 * @see uc_product_forms()
 * @see uc_catalog_buy_it_now_form_submit()
 */
function uc_catalog_buy_it_now_form($form_state, $node) {
  $form = array();
  $form['#validate'][] = 'uc_catalog_buy_it_now_form_validate';
  $form['#submit'][] = 'uc_catalog_buy_it_now_form_submit';
  $form['nid'] = array('#type' => 'hidden', '#value' => $node->nid);
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' =>  variable_get('uc_teaser_add_to_cart_text', t('Add to cart')),
    '#id' => 'edit-submit-'. $node->nid,
    '#attributes' => array(
      'class' => 'list-add-to-cart',
    ),
  );
  return $form;
}

function uc_catalog_buy_it_now_form_validate($form, &$form_state) {
  $node = node_load($form_state['values']['nid']);
  if (module_exists('uc_attribute')) {
    $attributes = uc_product_get_attributes($node->nid);
    if (!empty($attributes)) {
      drupal_set_message(t('This product has options that need to be selected before purchase. Please select them in the form below.'), 'error');
      drupal_goto('node/'. $form_state['values']['nid']);
    }
    if (is_array($node->products)) {
      foreach ($node->products as $nid => $product) {
        $attributes = uc_product_get_attributes($nid);
        if (!empty($attributes)) {
          drupal_set_message(t('This product has options that need to be selected before purchase. Please select them in the form below.'), 'error');
          drupal_goto('node/'. $form_state['values']['nid']);
        }
      }
    }
  }
}

function uc_catalog_buy_it_now_form_submit($form, &$form_state) {
  $form_state['redirect'] = uc_cart_add_item($form_state['values']['nid'], 1,  module_invoke_all('add_to_cart_data', $form_state['values']));
}

/******************************************************************************
 * Token Hooks                                                                *
 ******************************************************************************/

/**
 * Provide product token values.
 */
function uc_product_token_values($type, $object = NULL, $options = array()) {
  if ($type == 'node' && uc_product_is_product($object)) {
    $tokens = array();
    $tokens['model'] = $object->model;
    $tokens['list_price'] = $object->list_price;
    $tokens['cost'] = $object->cost;
    $tokens['sell_price'] = $object->sell_price;
    $tokens['weight_units'] = $object->weight_units;
    $tokens['weight-raw'] = $object->weight;
    $tokens['weight'] = uc_weight_format($object->weight, $object->weight_units);
    $tokens['length_units'] = $object->length_units;
    $tokens['length-raw'] = $object->length;
    $tokens['length'] = uc_length_format($object->length, $object->length_units);
    $tokens['width-raw'] = $object->width;
    $tokens['width'] = uc_length_format($object->width, $object->length_units);
    $tokens['height-raw'] = $object->height;
    $tokens['height'] = uc_length_format($object->height, $object->length_units);
    return $tokens;
  }
}

function uc_product_token_list($type = 'all') {
  if ($type == 'node' || $type == 'product' || $type == 'ubercart' || $type == 'all') {
    $tokens = array();
    $tokens['product']['model'] = t("The product's model number.");
    $tokens['product']['list_price'] = t("The product's list price.");
    $tokens['product']['cost'] = t("The product's cost.");
    $tokens['product']['sell_price'] = t("The product's sell price.");
    $tokens['product']['weight_units'] = t("The unit of measurement for the product's weight.");
    $tokens['product']['weight-raw'] = t("The numerical value of the product's weight.");
    $tokens['product']['weight'] = t("The product's formatted weight.");
    $tokens['product']['length_units'] = t("The unit of measurement for the product's length, width, and height.");
    $tokens['product']['length-raw'] = t("The numerical value of the product's length.");
    $tokens['product']['length'] = t("The product's formatted length.");
    $tokens['product']['width-raw'] = t("The numerical value of the product's width.");
    $tokens['product']['width'] = t("The product's formatted width.");
    $tokens['product']['height-raw'] = t("The numerical value of the product's height.");
    $tokens['product']['height'] = t("The product's formatted height.");
    return $tokens;
  }
}

/******************************************************************************
 * Übercart Hooks                                                             *
 ******************************************************************************/

function uc_product_product_types() {
  return array_keys(uc_product_node_info());
}

/**
 * Display the status of the product image handlers.
 *
 * @see uc_product_image_defaults()
 */
function uc_product_store_status() {
  if (!module_exists('filefield') || !module_exists('imagecache')) {
    $description = t('To automatically configure core image support, <a href="!url">enable</a> the <a href="http://drupal.org/project/cck">Content</a>, <a href="http://drupal.org/project/imagefield">CCK Image field</a>, and <a href="http://drupal.org/project/imagecache">Imagecache</a> modules.', array('!url' => url('admin/build/modules')));
  }
  else {
    module_load_include('inc', 'content', 'includes/content.crud');
    // Check for filefields on products.
    $instances = content_field_instance_read(array('field_name' => 'field_image_cache', 'type_name' => 'product'));
    $field_check = (bool) count($instances);

    $presets = array('product', 'product_list', 'uc_thumbnail');
    if (module_exists('uc_catalog')) {
      $presets[] = 'uc_category';
    }
    if (module_exists('uc_cart')) {
      $presets[] = 'cart';
    }
    if (module_exists('uc_manufacturer')) {
      $presets[] = 'manufacturer';
    }
    sort($presets);

    $preset_check = 1;
    $action_check = 1;
    foreach ($presets as $preset_name) {
      $preset = imagecache_preset_by_name($preset_name);
      if (empty($preset)) {
        $preset_check = 0;
        $action_check = 0;
        break;
      }
      else {
        $actions = imagecache_preset_actions($preset);
        if (empty($actions)) {
          $action_check = 0;
          break;
        }
      }
    }

    if ($field_check && $preset_check && $action_check) {
      $status = 'ok';
      $description = t('Product image support has been automatically configured by Ubercart.');
    }
    else {
      $status = 'warning';
      $description = t('<a href="!url">Click here</a> to automatically configure the following items for core image support:', array('!url' => url('admin/store/settings/products/defaults')));
      if (!$field_check) {
        $items[] = t('The Image file field has not been created for products.');
      }
      if (!$preset_check) {
        $items[] = t('Some or all of the expected Imagecache presets ("!presets") have not been created. Ubercart will not display images in certain places.', array('!presets' => implode('", "', $presets)));
      }
      if (!$action_check) {
        $items[] = t('Some Imagecache presets do not contain actions to perform on images. Images may be displayed in their original formats.');
      }
      $description .= theme('item_list', $items) . t('(This action is not required and should not be taken if you do not need images or have implemented your own image support.)');
    }
  }

  return array(array('status' => $status, 'title' => t('Images'), 'desc' => $description));
}

/**
 * Implementation of Übercart hook_cart_display().
 */
function uc_product_cart_display($item) {
  $node = node_load($item->nid);
  $element = array();
  $element['nid'] = array('#type' => 'value', '#value' => $node->nid);
  $element['module'] = array('#type' => 'value', '#value' => 'uc_product');
  $element['remove'] = array('#type' => 'checkbox');

  $element['options'] = '';
  if (module_exists('uc_attribute') && is_array($item->options)) {
    foreach ($item->options as $option) {
      $op_names[] = t('@attribute: @option', array('@attribute' => $option['attribute'], '@option' => $option['name']));
    }
    $element['options'] = array('#value' => theme('item_list', $op_names, NULL, 'ul', array('class' => 'cart-options')));
  }

  $element['title'] = array(
    '#value' => node_access('view', $node) ? l($item->title, 'node/'. $node->nid) : check_plain($item->title),
  );
  $element['#total'] = $item->price * $item->qty;
  $element['data'] = array('#type' => 'hidden', '#value' => serialize($item->data));
  $element['qty'] = array(
    '#type' => 'textfield',
    '#default_value' => $item->qty,
    '#size' => 5,
    '#maxlength' => 6
  );
  return $element;
}

/**
 * Update information about a specific item in current cart.
 */
function uc_product_update_cart_item($nid, $data = array(), $qty, $cid = NULL) {
  if (!$nid) return NULL;
  $cid = !(is_null($cid) || empty($cid)) ? $cid : uc_cart_get_id();
  if ($qty < 1) {
    uc_cart_remove_item($nid, $cid, $data);
  }
  else {
    db_query("UPDATE {uc_cart_products} SET qty = %d, changed = %d WHERE nid = %d AND cart_id = '%s' AND data = '%s'", $qty, time(), $nid, $cid, serialize($data));
    cache_clear_all();
  }

  // Rebuild the items hash
  uc_cart_get_contents(NULL, 'rebuild');
}

/**
 * Implementation of hook_add_to_cart_data().
 */
function uc_product_add_to_cart_data($form_values) {
  $node = node_load($form_values['nid']);
  return array('shippable' => $node->shippable);
}

function uc_product_product_class($pcid, $op) {
  switch ($op) {
    case 'insert':
      db_query("UPDATE {node_type} SET module = 'uc_product', custom = 0 WHERE type = '%s'", $pcid);
      $result = db_query("SELECT n.vid, n.nid, p.unique_hash FROM {node} AS n LEFT JOIN {uc_products} AS p ON n.vid = p.vid WHERE n.type = '%s'", $pcid);
      while ($node = db_fetch_object($result)) {
        if (!$node->unique_hash) {
          $node->weight_units = variable_get('uc_weight_unit', 'lb');
          $node->length_units = variable_get('uc_length_unit', 'in');
          $node->pkg_qty = 1;
          $node->default_qty = 1;
          $node->shippable = 1;
          uc_product_insert($node);
        }
      }
    break;
  }
}

/******************************************************************************
 * Module Functions                                                           *
 ******************************************************************************/

/**
 * Determing if the given node is a product.
 *
 * @param $node If an object or array, it's "type" member is considered. If a
 *   a string, it's value is considered. If an integer, node_load() is called.
 * @return boolean
 */
function uc_product_is_product($node) {
  if (is_int($node)) {
    $node = node_load($node);
  }
  if (is_object($node)) {
    $type = $node->type;
  }
  elseif (is_array($node)) {
    $type = $node['type'];
  }
  elseif (is_string($node)) {
    $type = $node;
  }

  if (!$type) {
    return FALSE;
  }

  $types = module_invoke_all('product_types');
  return in_array($type, $types);
}

/**
 * Format a product's model number.
 *
 * @ingroup themeable
 */
function theme_uc_product_model($model) {
  $output = '<div class="model">';
  $output .= t('SKU: @sku', array('@sku' => $model));
  $output .= '</div>';
  return $output;
}

/**
 * Wrap the "Add to Cart" form in a <div>.
 *
 * @ingroup themeable
 */
function theme_uc_product_add_to_cart($node) {
  $output = '<div class="add_to_cart">';
  if ($node->nid) {
    $output .= drupal_get_form('uc_product_add_to_cart_form_'. $node->nid, $node);
  }
  else {
    $output .= drupal_get_form('uc_product_add_to_cart_form', $node);
  }
  $output .= '</div>';
  return $output;
}

/**
 * Form to add the $node product to the cart.
 *
 * @ingroup forms
 * @param $node A product node.
 * @see uc_product_forms()
 * @see uc_product_add_to_cart_form_validate()
 * @see uc_product_add_to_cart_form_submit()
 */
function uc_product_add_to_cart_form($form_state, $node) {
  $form = array();
  $form['#validate'][] = 'uc_product_add_to_cart_form_validate';
  $form['#submit'][] = 'uc_product_add_to_cart_form_submit';
  $form['nid'] = array('#type' => 'value', '#value' => $node->nid);
  if ($node->default_qty > 0 && variable_get('uc_product_add_to_cart_qty', FALSE)) {
    $form['qty'] = array('#type' => 'textfield',
      '#title' => t('Quantity'),
      '#default_value' => $node->default_qty,
      '#size' => 5,
      '#maxlength' => 6,
    );
  }
  else {
    $form['qty'] = array('#type' => 'hidden', '#value' => 1);
  }
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' =>  variable_get('uc_product_add_to_cart_text', t('Add to cart')),
    '#id' => 'edit-submit-'. $node->nid,
    '#attributes' => array(
      'class' => 'node-add-to-cart',
    ),
  );
  return $form;
}

/**
 * Allow only positive, numeric quantities.
 */
function uc_product_add_to_cart_form_validate($form, &$form_state) {
  if (!is_numeric($form_state['values']['qty']) || intval($form_state['values']['qty']) <= 0) {
    form_set_error('qty', t('You have entered an invalid quantity.'));
  }
}

/**
 * Submit handler for uc_product_add_to_cart_form.
 */
function uc_product_add_to_cart_form_submit($form, &$form_state) {
  $form_state['redirect'] = uc_cart_add_item($form_state['values']['nid'], $form_state['values']['qty'],  module_invoke_all('add_to_cart_data', $form_state['values']));
}

/**
 * Format a product's price.
 *
 * @param $price
 *   The amount to print.
 * @param $class
 *   Determines the label and the CSS class of the <div>.
 * @ingroup themeable
 */
function theme_uc_product_price($price, $class) {
  $output = '<div class="'. $class .'">';
  switch ($class) {
    case 'list_price':
      $output .= t('List Price: !price', array('!price' => uc_currency_format($price)));
    break;
    case 'cost':
      $output .= t('Cost: !price', array('!price' => uc_currency_format($price)));
    break;
    case 'sell_price':
    default:
      $output .= t('Price: !price', array('!price' => uc_currency_format($price)));
    break;
  }
  $output .= '</div>';
  return $output;
}

/**
 * Format the selling price based on the view mode.
 *
 * @param $price
 *   The price amount.
 * @param $teaser
 *   Passed from uc_product_view().
 * @ingroup themeable
 */
function theme_uc_product_sell_price($price, $teaser) {
  if ($teaser) {
    $output = '<div class="sell_price">';
    $output .= uc_currency_format($price);
    $output .= '</div>';
  }
  else {
    $output = '<div class="sell_price">';
    $output .= t('Price: !price', array('!price' => uc_currency_format($price)));
    $output .= '</div>';
  }

  return $output;
}

/**
 * Format a product's weight.
 *
 * @ingroup themeable
 */
function theme_uc_product_weight($weight, $unit = NULL) {
  $output = '<div class="weight">';
  $output .= t('Weight: !weight', array('!weight' => uc_weight_format($weight, $unit)));
  $output .= '</div>';
  return $output;
}

/**
 * Format a product's length, width, and height.
 *
 * @ingroup themeable
 */
function theme_uc_product_dimensions($length, $width, $height, $units = NULL) {
  $output = '<div class="dimensions">';
  $output .= t('Dimensions: !length × !width × !height', array('!length' => uc_length_format($length, $units), '!width' => uc_length_format($width, $units), '!height' => uc_length_format($height, $units)));
  $output .= '</div>';
  return $output;
}

/**
 * Format a product's images with imagecache and Thickbox.
 *
 * @ingroup themeable
 */
function theme_uc_product_image($images) {
  static $rel_count = 0;
  $thickbox_enabled = module_exists('thickbox');
  $first = array_shift($images);
  $output = '<div class="product_image">';
  if ($thickbox_enabled) {
    $output .= '<a href="'. check_url(file_create_url($first['filepath'])) .'" title="'. $first['title'] .'" class="thickbox" rel="field_image_cache_'. $rel_count .'">';
  }
  $output .= theme('imagecache', 'product', $first['filepath'], $first['alt'], $first['title']);
  /* if (count($images)) {
    $output .= '<br />'. t('Click for more images.');
  } */
  if ($thickbox_enabled) {
    $output .= '</a>';
  }
  $output .= '<br />';
  foreach ($images as $thumbnail) {
    if ($thickbox_enabled) {
      $output .= '<a href="'. check_url(file_create_url($thumbnail['filepath'])) .'" title="'. $thumbnail['title'] .'" class="thickbox" rel="field_image_cache_'. $rel_count .'">';
    }
    $output .= theme('imagecache', 'uc_thumbnail', $thumbnail['filepath'], $thumbnail['alt'], $thumbnail['title']);
    if ($thickbox_enabled) {
      $output .= '</a>';
    }
  }
  $output .= '</div>';
  $rel_count++;
  return $output;
}

/**
 * @ingroup themeable
 */
function theme_uc_product_display_price($price) {
  $output = '<div class="display_price">';
  $output .= uc_currency_format($price);
  $output .= '</div>';
  return $output;
}

/**
 * Get the cost of a product node.
 *
 * @param $node_id
 *   nid of the selected node
 * @return
 *   float - cost
 */
function uc_product_get_cost($node_id) {
  $product = node_load($node_id);
  return $product->cost;
}

/**
 * Get the selling price of a product node.
 *
 * @param $node_id
 *   nid of the selected node
 * @return
 *   float - sell price
 */
/* function uc_product_get_price($node_id) {
  $product = node_load($node_id);
  return $product->sell_price;
} */

/**
 * Returns an HTML img tag based on a node's attached image.
 *
 * @param $node_id
 *   The node's id.
 * @param $format
 *   By default, 'uc_thumbnail', with possible values of '_original', 'thumbnail', and 'preview'.
 * @return
 *   An HTML img. When $format is 'uc_thumbnail', the image is a link to the node.
 *   When $format is 'preview', the image is a link to the image file.
 */
function uc_product_get_picture($node_id, $format = 'product') {
  $img = '';
  $product = node_load($node_id);
  if (!module_exists('imagecache')) {
    return '';
  }
  $path = $product->field_image_cache[0]['filepath'];
  if (file_exists($path)) {
    $img = theme('imagecache', $format, $path, $product->field_image_cache[0]['alt'], $product->field_image_cache[0]['title']);
    if ($format == 'product') {
      $img = '<a href="'. check_url(file_create_url($path)) .'" class="thickbox" rel="field_image_cache">'. $img .'</a>';
    }
    else {
      $img = l($img, 'node/'. $product->nid, array('html' => TRUE));
    }
  }
  return $img;
}

/**
 * Load a product class.
 */
function uc_product_class_load($class_id) {
  static $classes = array();

  if (empty($classes[$class_id])) {
    $result = db_query("SELECT * FROM {uc_product_classes} WHERE pcid = '%s'", $class_id);
    $class = db_fetch_object($result);
    $classes[$class_id] = $class;
  }

  return $classes[$class_id];
}

/**
 * Return a bit of data from a product feature array based on the feature ID
 * and array key.
 *
 * @param $fid
 *   The string ID of the product feature you want to get data from.
 * @param $key
 *   The key in the product feature array you want: title, callback, delete,
 *     settings
 * @return
 *   The value of the key you specify.
 */
function uc_product_feature_data($fid, $key) {
  static $features;

  if (empty($features)) {
    foreach (module_invoke_all('product_feature') as $feature) {
      $features[$feature['id']] = $feature;
    }
  }

  return $features[$fid][$key];
}

/**
 * Returns a form array with some default hidden values and submit button.
 *
 * @param $form
 *   The form array you wish to add the elements to.
 * @return
 *   The form array with elements added for the nid, pfid, submit button, and
 *     cancel link.
 * @ingroup forms
 */
function uc_product_feature_form($form) {
  if (!isset($form['nid'])) {
    $form['nid'] = array(
      '#type' => 'hidden',
      '#value' => intval(arg(1)),
    );
  }
  if (!isset($form['pfid'])) {
    $form['pfid'] = array(
      '#type' => 'hidden',
      '#value' => intval(arg(5)),
    );
  }

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save feature'),
  );
  $form['cancel'] = array(
    '#value' => l(t('Cancel'), 'node/'. intval(arg(1)) .'/edit/features'),
  );

  return $form;
}

/**
 * Save a product feature to a product node.
 *
 * @param $data
 *   An array consisting of the following keys:
 *   - pfid: the numeric ID of the product feature when editing an existing one
 *   - nid: the numeric ID of the product node
 *   - fid: the string ID of the feature type
 *   - description: the string description of the feature for the overview table
 */
function uc_product_feature_save($data) {
  if (empty($data['nid']) && arg(0) == 'node' && intval(arg(1)) > 0) {
    $data['nid'] = intval(arg(1));
  }
  if (empty($data['pfid'])) {
    if (arg(0) == 'node' && arg(3) == 'features' && intval(arg(5)) > 0) {
      $data['pfid'] = intval(arg(5));
    }
  }

  // First attempt to update an existing row.
  db_query("UPDATE {uc_product_features} SET description = '%s' WHERE pfid = %d", $data['description'], intval($data['pfid']));

  // Otherwise insert this feature as a new row.
  if (db_affected_rows() == 0) {
    db_query("INSERT INTO {uc_product_features} (nid, fid, description) VALUES (%d, '%s', '%s')",
             $data['nid'], $data['fid'], $data['description']);
    drupal_set_message(t('The product feature has been added.'));
  }
  else {
    drupal_set_message(t('The product feature has been updated.'));
  }

  return 'node/'. $data['nid'] .'/edit/features';
}

function uc_product_add_default_image_field($type = NULL) {
  module_load_include('inc', 'content', 'includes/content.crud');
  $label = t('Image');
  $field = array(
    'label' => $label,
    'field_name' => 'field_image_cache',
    'type' => 'filefield',
    'widget_type' => 'filefield_widget',
    'file_extensions' => 'gif jpg jpeg png bmp',
    'required' => '0',
    'multiple' => '1',
    'list_default' => '0',
    'force_list_default' => '1',
    'module' => 'filefield',
    'widget_module' => 'filefield',
    'columns' => array(
      'fid' => array(
        'type' => 'int',
        'not null' => FALSE,
      ),
      'list' => array(
        'type' => 'int',
        'size' => 'tiny',
        'not null' => FALSE,
      ),
      'data' => array(
        'type' => 'text',
        'serialize' => TRUE,
      ),
    ),
    'display_settings' => array(
      'label' => array(
        'format' => 'hidden',
      ),
      'teaser' => array(
        'format' => 'hidden',
      ),
      'full' => array(
        'format' => 'hidden',
      ),
      4 => array(
        'format' => 'hidden',
      ),
    ),
  );

  if ($type) {
    // Accept single or multiple types as input.
    $types = (array) $type;
  }
  else {
    $types = module_invoke_all('product_types');
  }
  foreach ($types as $type) {
    $field['type_name'] = $type;
    $instances = content_field_instance_read(array('field_name' => 'field_image_cache', 'type_name' => $type));
    if (sizeof($instances) < 1) {
      // Only add the field if it doesn't exist. Don't overwrite any changes.
      if (content_field_instance_create($field)) {
        drupal_set_message(t('Created field %label.', array('%label' => $label)));
      }
      else {
        drupal_set_message(t('There was a problem creating field %label.', array('%label' => $label)));
      }
    }
  }
}

/**
 * Implementation of hook_views_api().
 */
function uc_product_views_api() {
  return array(
    'api' => '2.0',
    'path' => drupal_get_path('module', 'uc_product') .'/views',
  );
}
