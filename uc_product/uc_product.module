<?php
// $Id: uc_product.module,v 1.8 2007-07-10 20:57:31 rszrama Exp $

/**
 * @file
 * The product module for the bercart.
 * 
 * Provides information that is common to all products, and user-defined product
 * classes for more specification. Recommends the image and taxonomy modules.
 * 
 * Coded by: Lyle Mantooth
 */

/******************************************************************************
 * Drupal Hooks                                                               *
 ******************************************************************************/

/**
 * Implementation of hook_menu().
 */
function uc_product_menu($may_cache){
  $items = array();

  if ($may_cache){
    $items[] = array(
      'path' => 'products',
      'title' => t('Products'),
      'access' => user_access('access content'),
      'callback' => 'uc_product_default',
      'type' => MENU_NORMAL_ITEM,
    );
    $items[] = array(
      'path' => 'node/add/product',
      'title' => t('Product'),
      'access' => user_access('create products'),
    );
    $items[] = array(
      'path' => 'admin/store/products',
      'title' => t('Products'),
      'description' => t('Administer product attributes, classes, and general settings.'),
      'access' => user_access('administer products'),
      'callback' => 'uc_product_overview',
      'type' => MENU_NORMAL_ITEM,
    );
    $items[] = array(
      'path' => 'admin/store/products/view',
      'title' => t('View products'),
      'callback' => 'uc_product_administration',
      'access' => user_access('administer products'),
      'type' => MENU_NORMAL_ITEM,
      'weight' => -12,
    );
    $items[] = array(
      'path' => 'admin/store/products/create_product',
      'title' => t('Create product'),
      'access' => user_access('create products'),
      'callback' => 'node_add',
      'callback arguments' => array('product'),
      'type' => MENU_NORMAL_ITEM,
      'weight' => -10,
    );
    $items[] = array(
      'path' => 'admin/store/products/classes',
      'title' => t('Manage classes'),
      'access' => user_access('administer product classes'),
      'callback' => 'uc_product_class_default',
      'type' => MENU_NORMAL_ITEM,
      'weight' => -2,
    );
    $items[] = array(
      'path' => 'admin/store/settings/products',
      'title' => t('Product settings'),
      'access' => user_access('administer products'),
      'callback' => 'uc_product_settings_overview',
      'type' => MENU_NORMAL_ITEM,
    );
    $items[] = array(
      'path' => 'admin/store/settings/products/overview',
      'title' => t('Overview'),
      'weight' => -10,
      'type' => MENU_DEFAULT_LOCAL_TASK,
    );
    $items[] = array(
      'path' => 'admin/store/settings/products/edit',
      'title' => t('Edit'),
      'access' => user_access('administer products'),
      'callback' => 'drupal_get_form',
      'callback arguments' => array('uc_product_settings_form'),
      'weight' => -5,
      'type' => MENU_LOCAL_TASK,
    );
    $items[] = array(
      'path' => 'admin/store/settings/products/edit/general',
      'title' => t('Product settings'),
      'access' => user_access('administer products'),
      'weight' => -10,
      'type' => MENU_DEFAULT_LOCAL_TASK,
    );
    $items[] = array(
      'path' => 'admin/store/settings/products/edit/fields',
      'title' => t('Product fields'),
      'callback' => 'drupal_get_form',
      'callback arguments' => array('uc_product_field_settings_form'),
      'access' => user_access('administer products'),
      'weight' => -5,
      'type' => MENU_LOCAL_TASK,
    );
  }
  else {
    $items[] = array('path' => 'admin/store/settings/products/defaults/'. arg(5),
      'title' => t('Imagecache default settings'),
      'access' => user_access('administer products'),
      'callback' => 'uc_product_image_defaults',
      'callback arguments' => array(arg(5)),
      'type' => MENU_CALLBACK_ITEM,
    );
    $items[] = array('path' => 'admin/store/products/classes/'. arg(4),
      'title' => t('Product class'),
      'access' => user_access('administer product classes'),
      'callback' => 'uc_product_class_view',
      'callback arguments' => array(arg(4)),
      'type' => MENU_CALLBACK_ITEM,
    );
    $items[] = array('path' => 'admin/store/products/classes/'. arg(4) .'/edit',
      'title' => t('Edit class'),
      'access' => user_access('administer product classes'),
      'callback' => 'drupal_get_form',
      'callback arguments' => array('uc_product_class_form', arg(4)),
      'type' => MENU_CALLBACK_ITEM,
    );
    $items[] = array('path' => 'admin/store/products/classes/'. arg(4) .'/delete',
      'access' => user_access('administer product classes'),
      'callback' => 'drupal_get_form',
      'callback arguments' => array('uc_product_class_delete_confirm', arg(4)),
      'type' => MENU_CALLBACK_ITEM,
    );
    
    $items[] = array('path' => 'products/field_image_cache/'. arg(2),
      'access' => true,
      'callback' => '_uc_product_get_image_field_filepath',
      'callback arguments' => array(arg(2)),
      'type' => MENU_CALLBACK_ITEM,
    );
    drupal_add_css(drupal_get_path('module', 'uc_product') .'/uc_product.css');
  }
  
  return $items;
}

/**
 * Implementation of hook_help().
 */
function uc_product_help($section = ''){
  // Do things here later. Figure out what you need to say for each section.
  switch($section){
    case 'admin/settings/module#description':
      $output = t('A module to represent items in an online store.');
      break;
  }
  return $output;
}

/**
 * Implementation of hook_perm().
 */
function uc_product_perm(){
  return array('administer products', 'administer product classes', 'create products', 'edit own products', 'edit products');
}

/**
 * Implementation of hook_access().
 */
function uc_product_access($op, $node){
  global $user;
  
  switch ($op){
    case 'create':
      return user_access('create products');
    case 'update':
    case 'delete':
      if ($user->uid == $node->uid){
        return user_access('edit own products');
      }
      else{
        return user_access('edit products');
      }
  }
}

/**
 * Implementation of hook_enable().
 *
 * Set up default imagefield and imagecache settings.
 */
function uc_product_enable(){
  if (module_exists('imagefield')){
    $result = db_query("SELECT field_name FROM {node_field} WHERE field_name = 'field_image_cache' AND type = 'image'");
    if (!db_num_rows($result)){
      db_query("INSERT INTO {node_field} (field_name, type, global_settings, required, multiple, db_storage) VALUES ('field_image_cache', 'image', '%s', 0, 1, 0)", 'a:0:{}');
    }
    foreach (array_keys(uc_product_node_info()) as $type){
      $result = db_query("SELECT * FROM {node_field_instance} WHERE field_name = 'field_imagecache' and type_name = '%s'", $type);
      if (!db_num_rows($result)){
        db_query("INSERT INTO {node_field_instance} VALUES ('field_image_cache', '%s', -2, 'Image', 'image', '%s', '%s', '')", $type, 'a:6:{s:14:"max_resolution";s:1:"0";s:10:"image_path";s:6:"ubercart_images";s:10:"custom_alt";i:1;s:12:"custom_title";i:1;s:13:"teaser_preset";N;s:11:"body_preset";N;}', 'a:3:{s:5:"label";a:1:{s:6:"format";s:6:"hidden";}s:6:"teaser";a:1:{s:6:"format";s:6:"hidden";}s:4:"full";a:1:{s:6:"format";s:6:"hidden";}}');
      }
      switch ($GLOBALS['db_type']){
        case 'mysql':
        case 'mysqli':
          db_query("CREATE TABLE IF NOT EXISTS {content_field_image_cache} (
            `vid` int(10) unsigned NOT NULL default '0',
            `delta` int(10) unsigned NOT NULL default '0',
            `nid` int(10) unsigned NOT NULL default '0',
            `field_image_cache_fid` int(11) NOT NULL default '0',
            `field_image_cache_title` varchar(255) NOT NULL default '',
            `field_image_cache_alt` varchar(255) NOT NULL default '',
            PRIMARY KEY  (`vid`,`delta`)
          ) /*!40100 DEFAULT CHARACTER SET utf8 */;");
        break;
        case 'pgsql':
          $result = db_query("SELECT relname FROM pg_class WHERE relname = '{content_field_image_cache}'");
          if (!db_num_rows($result)){
            db_query('CREATE TABLE {content_field_image_cache} (
              "vid" int(10) unsigned NOT NULL default \'0\',
              "delta" int(10) unsigned NOT NULL default \'0\',
              "nid" int(10) unsigned NOT NULL default \'0\',
              "field_image_cache_fid" int(11) NOT NULL default \'0\',
              "field_image_cache_title" varchar(255) NOT NULL,
              "field_image_cache_alt" varchar(255) NOT NULL,
              PRIMARY KEY  ("vid","delta")
            );');
          }
        break;
      }
    }
    content_clear_type_cache();
  }
  if (module_exists('imagecache')){
    $presets = array('product', 'product_list', 'thumbnail');
    if (module_exists('uc_catalog')){
      $presets[] = 'category';
    }
    if (module_exists('uc_cart')){
      $presets[] = 'cart';
    }
    if (module_exists('uc_manufacturer')){
      $presets[] = 'manufacturer';
    }
    $preset_keys = array();
    foreach ($presets as $preset){
      $preset_keys[$preset] = 0;
    }
    $presets = $preset_keys;
    $result = db_query("SELECT * FROM {imagecache_preset} WHERE presetname IN ('". implode("','", $presets) ."')");
    while ($preset = db_fetch_array($result)){
      $presets[$preset['presetname']] = $preset['presetid'];
    }
    //drupal_set_message('<pre>'. print_r($presets, true) .'</pre>');
    foreach ($presets as $name => $id){
      if ($id == 0){
        $id = db_next_id('{imagecache_preset}_presetid');
        db_query("INSERT INTO {imagecache_preset} (presetid, presetname) VALUES (%d, '%s')", $id, $name);
      }
    }
    $result = db_query("SELECT ia.actionid, ip.presetid, ip.presetname FROM {imagecache_preset} AS ip LEFT JOIN {imagecache_action} AS ia ON ip.presetid = ia.presetid WHERE ip.presetname IN ('". implode("','", array_keys($presets)) ."')");
    $presets = array();
    while ($preset = db_fetch_array($result)){
      if (is_null($preset['actionid'])){
        switch ($preset['presetname']){
          case 'product':
            db_query("INSERT INTO {imagecache_action} (actionid, presetid, weight, data) VALUES (%d, %d, 0, '%s')", db_next_id('{imagecache_action}_actionid'), $preset['presetid'], 'a:4:{s:8:"function";s:5:"scale";s:3:"fit";s:6:"inside";s:5:"width";s:3:"100";s:6:"height";s:3:"100";}');
          break;
          case 'product_list':
            db_query("INSERT INTO {imagecache_action} (actionid, presetid, weight, data) VALUES (%d, %d, 0, '%s')", db_next_id('{imagecache_action}_actionid'), $preset['presetid'], 'a:4:{s:8:"function";s:5:"scale";s:3:"fit";s:6:"inside";s:5:"width";s:3:"100";s:6:"height";s:3:"100";}');
          break;
          case 'thumbnail':
            db_query("INSERT INTO {imagecache_action} (actionid, presetid, weight, data) VALUES (%d, %d, 0, '%s')", db_next_id('{imagecache_action}_actionid'), $preset['presetid'], 'a:4:{s:8:"function";s:5:"scale";s:3:"fit";s:6:"inside";s:5:"width";s:2:"35";s:6:"height";s:2:"35";}');
          break;
          case 'category':
            db_query("INSERT INTO {imagecache_action} (actionid, presetid, weight, data) VALUES (%d, %d, 0, '%s')", db_next_id('{imagecache_action}_actionid'), $preset['presetid'], 'a:4:{s:8:"function";s:5:"scale";s:3:"fit";s:6:"inside";s:5:"width";s:2:"96";s:6:"height";s:2:"96";}');
          break;
          case 'cart':
            db_query("INSERT INTO {imagecache_action} (actionid, presetid, weight, data) VALUES (%d, %d, 0, '%s')", db_next_id('{imagecache_action}_actionid'), $preset['presetid'], 'a:4:{s:8:"function";s:5:"scale";s:3:"fit";s:6:"inside";s:5:"width";s:2:"50";s:6:"height";s:2:"50";}');
          break;
          case 'manufacturer':
            db_query("INSERT INTO {imagecache_action} (actionid, presetid, weight, data) VALUES (%d, %d, 0, '%s')", db_next_id('{imagecache_action}_actionid'), $preset['presetid'], 'a:4:{s:8:"function";s:5:"scale";s:3:"fit";s:6:"inside";s:5:"width";s:2:"80";s:6:"height";s:2:"80";}');
          break;
        }
      }
    }
    cache_clear_all('imagecache:presets', 'cache');
  }
}

/**
 * Implementation of hook_node_info().
 */
function uc_product_node_info($reset = false){
  static $types = array();
  $title_label = t('Name');
  $body_label = t('Description');
  
  if (empty($types) || $reset){
    $types = array();
    $types['product'] = array(
      'name' => t('Product'),
      'module' => 'uc_product', 
      'description' => t('This node displays the representation of a product for sale on the website. It includes 
        all the unique information that can be attributed to a specific model number.'),
      'title_label' => $title_label,
      'body_label' => $body_label,
    );
    
    $result = db_query("SELECT pcid, name, description FROM {uc_product_classes}");
    while ($class = db_fetch_object($result)){
      $types[$class->pcid] = array(
        'name' => $class->name,
        'module' => 'uc_product',
        'description' => $class->description,
        'title_label' => $title_label,
        'body_label' => $body_label,
      );
    }
    $types = array_merge($types, module_invoke_all('product_info'));
  }
  return $types;
}

function uc_product_forms(){
  $products = db_query("SELECT nid FROM {uc_products}");

  while ($product = db_fetch_object($products))
  {
    $forms['uc_product_add_to_cart_form_'. $product->nid] = array('callback' => 'uc_product_add_to_cart_form');
    $forms['uc_catalog_buy_it_now_form_'. $product->nid] = array('callback' => 'uc_catalog_buy_it_now_form');
  }

  return $forms;
}

/**
 * Implementation of hook_form().
 */
function uc_product_form(&$node){
  $location = array();
  $location[] = menu_get_item(null, 'admin');
  $location[] = menu_get_item(null, 'admin/store');
  $location[] = menu_get_item(null, 'admin/store/products');
  $location[] = menu_get_item(null, 'admin/store/settings/products');
  $breadcrumb = drupal_get_breadcrumb();
  foreach ($location as $item){
    $breadcrumb[] = l($item['title'], $item['path']);
  }
  drupal_set_breadcrumb($breadcrumb);
  
  $form['title'] = array('#type' => 'textfield',
    '#title' => t('Name'),
    '#required' => TRUE,
    '#weight' => -5,
    '#default_value' => $node->title,
    '#description' => t('Name of the product.')
  );
  
  $form['body_filter']['body'] = array('#type' => 'textarea',
    '#title' => t('Description'),
    '#required' => FALSE,
    '#default_value' => $node->body,
    '#description' => t('Explain this whatchamacallit.'),
  );
  $form['body_filter']['format'] = filter_form($node->format);
  $form['body_filter']['#weight'] = -4;

  $form['base'] = array('#type' => 'fieldset',
    '#title' => t('Product Information'),
    '#collapsible' => true,
    '#collapsed' => false,
    '#weight' => -1,
    '#attributes' => array('class' => 'product-field'),
  );
  $form['base']['model'] = array('#type' => 'textfield',
    '#title' => t('SKU'),
    '#required' => TRUE,
    '#default_value' => $node->model,
    '#description' => t('Product SKU/model'),
    '#weight' => 1,
    '#size' => 32,
    '#maxlength' => 32,
  );
  
  $form['base']['prices'] = array('#weight' => 2,
    '#theme' => 'uc_product_form_prices',
  );
  
  $form['base']['prices']['list_price'] = array('#type' => 'textfield',
    '#title' => t('List Price'),
    '#required' => FALSE,
    '#default_value' => $node->list_price,
    '#description' => t('How much no one pays.'),
    '#weight' => 0,
    '#size' => 20,
    '#maxlength' => 35,
  );
  $form['base']['prices']['cost'] = array('#type' => 'textfield',
    '#title' => t('Cost'),
    '#required' => FALSE,
    '#default_value' => $node->cost,
    '#description' => t('How much we pay.'),
    '#weight' => 1,
    '#size' => 20,
    '#maxlength' => 35,
  );
  $form['base']['prices']['sell_price'] = array('#type' => 'textfield',
    '#title' => t('Sell Price'),
    '#required' => TRUE,
    '#default_value' => $node->sell_price,
    '#description' => t('How much our customers pay.'),
    '#weight' => 2,
    '#size' => 20,
    '#maxlength' => 35,
  );
  $units = array(
    'lb' => t('Pounds'),
    'kg' => t('Kilograms'),
    'oz' => t('Ounces'),
    'g' => t('Grams'),
  );
  $form['base']['units'] = array('#type' => 'select',
    '#title' => t('Unit of measurement'),
    '#default_value' => $node->units ? $node->units : variable_get('uc_weight_unit', 'lb'),
    '#options' => $units,
    '#weight' => 3,
  );

  $form['base']['weight'] = array('#type' => 'textfield',
    '#title' => t('Weight'),
    '#default_value' => $node->weight,
    '#description' => t('How heavy it is.'),
    '#weight' => 4,
    '#size' => 10,
    '#maxlength' => 15,
  );
/* 
  $result = db_query("SELECT * FROM {uc_product_classes}");
  if (db_num_rows($result)){
    $classes = array('product' => t('--Select product class--'));
    while ($c = db_fetch_object($result)){
      $classes[$c->pcid] = $c->name;
    }
    
    $form['c_fields'] = array('#type' => 'fieldset',
      '#title' => t('Class Fields'),
      '#collapsible' => true,
      '#collapsed' => false,
      '#weight' => -1,
    );
    $form['c_fields']['product_class'] = array('#type' => 'select',
      '#id' => 'edit-class_select',
      '#title' => t('Product class'),
      '#description' => t('Determines additional fields specific to this type of product.'),
      '#default_value' => $node->pcid,
      '#options' => $classes,
      '#weight' => 0,
      '#required' => true,
    );
    
    // Container for class-specific form fields. 
    $form['c_fields']['container'] = array('#type' => 'markup',
      '#value' => '<div id="edit-class_fields"></div>',
    );
  }
  else{
    $form['c_fields']['product_class'] = array('#type' => 'hidden',
      '#value' => 'product',
    );
  }
*/
  $form['#validate']['uc_product_form_validate'] = array();
  //drupal_set_message(print_r($_POST, true));
  return $form;
}

function theme_uc_product_form_prices($prices){
  return '<table><tr><td>'. "\n". drupal_render($prices['list_price'])
    .'</td><td>'. drupal_render($prices['cost'])
    .'</td><td>'. drupal_render($prices['sell_price'])
    ."</td></tr></table>\n";
}

function uc_product_form_validate($form_id, $form_values){
//  drupal_set_message(print_r($form_values, true));
  $pattern = '/^\d*(\.\d*)?$/';
  $price_error = t('Price must be in a valid number format. No commas and only one decimal point.');
  if(!is_numeric($form_values['list_price']['#value']) && !preg_match($pattern, $form_values['list_price']['#value'])){
    form_set_error('list_price', $price_error);
  }
  if(!is_numeric($form_values['cost']['#value']) && !preg_match($pattern, $form_values['cost']['#value'])){
    form_set_error('cost', $price_error);
  }
  if(!is_numeric($form_values['sell_price']['#value']) && !preg_match($pattern, $form_values['sell_price']['#value'])){
    form_set_error('sell_price', $price_error);
  }
  if(!empty($form_values['weight']['#value']) && !is_numeric($form_values['weight']['#value'])){
    form_set_error('weight', t('Weight must be in a valid number format. No commas and only one decimal point.'));
  }
}

/**
 * Implementation of hook_insert().
 */
function uc_product_insert($node){
  db_query("INSERT INTO {uc_products} (nid, model, list_price, cost, sell_price, weight, units, unique_hash) VALUES (%d, '%s', %f, %f, %f, %f, '%s', '%s')",
    $node->nid, $node->model, $node->list_price, $node->cost, $node->sell_price, $node->weight, $node->units,
    md5($node->nid . $node->model . $node->list_price . $node->cost . $node->sell_price . $node->weight . $node->units . time())
  );
}

/**
 * Implementation of hook_update().
 */
function uc_product_update($node){
  db_query("UPDATE {uc_products} SET model = '%s', list_price = %f, cost = %f, sell_price = %f, weight = %f, units = '%s' WHERE nid = %d",
    $node->model, $node->list_price, $node->cost, $node->sell_price, $node->weight, $node->units, $node->nid);
}

/**
 * Implementation of hook_load().
 */
function uc_product_load(&$node) {
  return db_fetch_object(db_query('SELECT p.model, p.list_price, p.cost, p.sell_price, p.weight, p.units, p.unique_hash FROM {uc_products} p WHERE p.nid = %d', $node->nid));
}

/**
 * Implementation of hook_delete().
 */
function uc_product_delete(&$node) {
  db_query("DELETE from {uc_products} WHERE nid = %d", $node->nid);
}

/**
 * Implementation of hook_view().
 */
function uc_product_view($node, $teaser = 0, $page = 0) {
  $node = node_prepare($node, $teaser);
 
  $enabled = variable_get('uc_product_field_enabled', array(
    'image' => 1,
    'display_price' => 1,
    'model' => 1,
    'sell_price' => 1,
    'weight' => 1,
  ));
  $weight = variable_get('uc_product_field_weight', array(
    'image' => -2,
    'display_price' -1,
    'model' => 0,
    'list_price' => 2,
    'cost' => 3,
    'sell_price' => 4,
    'weight' => 5,
  ));
  
  //drupal_set_message('<pre>'. print_r($node->field_image_cache, true) .'</pre>');
  if (isset($node->field_image_cache) && file_exists($node->field_image_cache[0]['filepath'])){
    $node->content['image'] = array('#value' => theme('uc_product_image', $node->field_image_cache),
      '#access' => $enabled['image'] && module_exists('imagecache'),
      '#weight' => $weight['image'],
    );
  }
  $node->content['display_price'] = array('#value' => theme('uc_product_display_price', $node->sell_price),
    '#access' => $enabled['display_price'],
    '#weight' => $weight['display_price'],
  );
  if (!$teaser){
    $node->content['model'] = array('#value' => theme('uc_product_model', $node->model),
      '#access' => $enabled['model'],
      '#weight' => $weight['model'],
    );
    $node->content['body']['#weight'] = 1;
    $node->content['list_price'] = array('#value' => theme('uc_product_price', $node->list_price, 'list_price'),
      '#access' => $enabled['list_price'],
      '#weight' => $weight['list_price'],
    );
    $node->content['cost'] = array('#value' => theme('uc_product_price', $node->cost, 'cost'),
      '#access' => $enabled['cost'] && user_access('administer products'),
      '#weight' => $weight['cost'],
    );
  }
  else {
    $node->content['#attributes'] = array('style' => 'display: inline');
  }
  
  $node->content['sell_price'] = array('#value' => theme('uc_product_sell_price', $node->sell_price, $teaser),
    '#access' => $enabled['sell_price'],
    '#weight' => $weight['sell_price'],
  );
  
  if (!$teaser){
    $node->content['weight'] = array('#value' => theme('uc_product_weight', $node->weight, $node->units),
      '#access' => $enabled['weight'],
      '#weight' => $weight['weight'],
    );
    $node->content['add_to_cart'] = array('#value' => theme('uc_product_add_to_cart', $node),
      '#weight' => 10,
    );
  }
  else if (variable_get('uc_product_add_to_cart_teaser', true)){
    $node->content['add_to_cart'] = array('#value' => theme('uc_product_add_to_cart', $node),
      '#weight' => 10,
    );
  }
  //drupal_set_message('<pre>'. print_r($breadcrumb, true) .'</pre>');
  return $node;
}

function uc_product_form_alter($form_id, &$form){
  if ($form_id == 'search_form' && arg(0) == 'admin' && arg(1) == 'store' && arg(2) == 'products' && user_access('use advanced search')) {
    // Keyword boxes:
    $form['advanced'] = array(
      '#type' => 'fieldset',
      '#title' => t('Advanced search'),
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
      '#attributes' => array('class' => 'search-advanced'),
    );
    $form['advanced']['keywords'] = array(
      '#prefix' => '<div class="criterion">',
      '#suffix' => '</div>',
    );
    $form['advanced']['keywords']['or'] = array(
      '#type' => 'textfield',
      '#title' => t('Containing any of the words'),
      '#size' => 30,
      '#maxlength' => 255,
    );
    $form['advanced']['keywords']['phrase'] = array(
      '#type' => 'textfield',
      '#title' => t('Containing the phrase'),
      '#size' => 30,
      '#maxlength' => 255,
    );
    $form['advanced']['keywords']['negative'] = array(
      '#type' => 'textfield',
      '#title' => t('Containing none of the words'),
      '#size' => 30,
      '#maxlength' => 255,
    );

    // Taxonomy box:
    if ($taxonomy = module_invoke('taxonomy', 'form_all', 1)) {
      $form['advanced']['category'] = array(
        '#type' => 'select',
        '#title' => t('Only in the category(s)'),
        '#prefix' => '<div class="criterion">',
        '#size' => 10,
        '#suffix' => '</div>',
        '#options' => $taxonomy,
        '#multiple' => TRUE,
      );
    }

    // Node types:
    $types = array();
    $node_types = uc_product_node_info();
    foreach ($node_types as $id => $type){
      $types[$id] = $type['name'];
    }
    $form['advanced']['type'] = array(
      '#type' => 'checkboxes',
      '#title' => t('Only of the type(s)'),
      '#prefix' => '<div class="criterion">',
      '#suffix' => '</div>',
      '#options' => $types,
    );
    $form['advanced']['submit'] = array(
      '#type' => 'submit',
      '#value' => t('Advanced search'),
      '#prefix' => '<div class="action clear-block">',
      '#suffix' => '</div>',
    );

    $form['#validate']['node_search_validate'] = array();
  }
}

function uc_product_search($op, $keys = null){
  switch ($op){
    case 'name':
      return t('Products');
  }
}

/******************************************************************************
 * TAPIr Hooks                                                                *
 ******************************************************************************/

function uc_product_table_settings(){
  $tables = array();
  
  $tables[] = array(
    'id' => 'uc_product_table',
    'description' => t('Lists a group of products in an abbreviated format.'),
    'path' => 'admin/store/settings/tables',
    'access' => 'administer store',
    'preview' => FALSE,
  );
  
  return $tables;
}

function uc_product_table($op, $args = array()){
  switch($op){
    case 'fields':
      $fields = array();
      $fields[] = array('name' => 'image', 'title' => t('Image'), 'weight' => -5, 'enabled' => module_exists('imagecache'));
      $fields[] = array('name' => 'name', 'title' => t('Name'), 'weight' => 0, 'enabled' => true, 'attributes' => array('field' => 'n.title'));
      $fields[] = array('name' => 'price', 'title' => t('Price'), 'weight' => 5, 'enabled' => true, 'attributes' => array('field' => 'p.sell_price'));
      if (arg(0) != 'admin' || $_GET['q'] == 'admin/store/settings/tables/uc_product_table'){
        $fields[] = array(
          'name' => 'add_to_cart',
          'title' => t('Add to cart'),
          'weight' => 10,
          'enabled' => false,
          'attributes' => array('nowrap' => 'nowrap'),
        );
      }
      return $fields;
    case 'data':
      $data = array();
      foreach ($args['nids'] as $nid){
        $node = node_load($nid);
        if ($node->type != 'image'){
          if (module_exists('imagecache') && isset($node->field_image_cache) && file_exists($node->field_image_cache[0]['filepath'])){
            $data['image'][] = l(theme('imagecache', 'product_list', $node->field_image_cache[0]['filepath']), 'node/'. $node->nid, array(), null, null, false, true);
          }
          else{
            $data['image'][] = t('n/a');
          }
          $data['name'][] = array('data' => l($node->title, 'node/'. $node->nid), 'width' => '100%');
          $data['price'][] = array('data' => theme('uc_product_sell_price', $node->sell_price, true), 'nowrap' => 'nowrap');
          if (arg(0) != 'admin'){
            $data['add_to_cart'][] = drupal_get_form('uc_catalog_buy_it_now_form_'. $node->nid, $node);
          }
        }
      }
      return $data;
    case 'attributes':
      return $args['attributes'];
  }
}

function uc_catalog_buy_it_now_form($node){
  $form = array();
  $form['#base'] = 'uc_catalog_buy_it_now_form';
  $form['nid'] = array('#type' => 'hidden', '#value' => $node->nid);
  $form['submit'] = array('#type' => 'submit', '#value' =>  variable_get('uc_teaser_add_to_cart_text', t('Add to cart')), );
  return $form;
}

function uc_catalog_buy_it_now_form_submit($form_id, $form_values){
  $node = node_load($form_values['nid']);
  if (module_exists('uc_attribute')){
    $attributes = uc_product_get_attributes($node->nid);
    if (!empty($attributes)){
      drupal_set_message('This product has options that need to be selected before purchase. Please select them in the form below.');
      return drupal_get_path_alias('node/'. $form_values['nid']);
    }
    if (is_array($node->products)){
      foreach($node->products as $nid => $product){
        $attributes = uc_product_get_attributes($nid);
        if (!empty($attributes)){
          drupal_set_message('This product has options that need to be selected before purchase. Please select them in the form below.');
          return drupal_get_path_alias('node/'. $form_values['nid']);
        }
      }
    }
  }
  return uc_cart_add_item($form_values['nid'], 1,  module_invoke_all('add_to_cart_data', $form_values));
}

/* function uc_product_table_alter($table_id, $op, $args){
  
} */

/******************************************************************************
 * Übercart Hooks                                                             *
 ******************************************************************************/

function uc_product_store_status(){
  $title = t('Images');
  if (!module_exists('imagefield') || !module_exists('imagecache')){
    $status = 'error';
    $description = t('In order to display product images, please <a href="!href">enable</a> the <a href="http://drupal.org/project/cck">Content</a>, <a href="http://drupal.org/project/imagefield">CCK Image field</a>, and the <a href="http://drupal.org/project/imagecache">Imagecache</a> modules.', array('!href' => url('admin/build/modules')));
  }
  else{
    $result = db_query("SELECT field_name, type FROM {node_field} WHERE field_name = 'field_image_cache' AND type = 'image'");
    $field_check = (bool)db_num_rows($result);
    $result = db_query("SELECT field_name, type_name FROM {node_field_instance} WHERE field_name = 'field_image_cache' AND type_name = 'product'");
    $product_field_check = (bool)db_num_rows($result);
    $presets = array('product', 'product_list', 'thumbnail');
    if (module_exists('uc_catalog')){
      $presets[] = 'category';
    }
    if (module_exists('uc_cart')){
      $presets[] = 'cart';
    }
    if (module_exists('uc_manufacturer')){
      $presets[] = 'manufacturer';
    }
    $result = db_query("SELECT presetid FROM {imagecache_preset} WHERE presetname IN ('". implode("','", $presets) ."')");
    $preset_check = (db_num_rows($result) == count($presets));
    $actions = array();
    while ($preset_id = db_fetch_array($result)){
      $actions[$preset_id['presetid']] = db_result(db_query("SELECT actionid FROM {imagecache_action} WHERE presetid = %d", $preset_id['presetid']));
    }
    $action_check = (count(array_filter($actions)) == count($presets));
    if ($field_check && $product_field_check && $preset_check && $action_check){
      $status = 'ok';
      $description = t("Imagefield and Imagecache have been set up to display product images.");
    }
    else{
      $status = 'warning';
      $checks = ($field_check << 3) + ($product_field_check << 2) + ($preset_check << 1) + $action_check;
      $description = t('Click <strong><a href="!path">here</a></strong> to create defaults for the following problems:', array('!path' => url('admin/store/settings/products/defaults/'. $checks)));
      $description .= "\n<br /><ul>\n";
      if (!$field_check){
        $description .= "<li>". t("The Image field has not been created for CCK.") ."</li>\n";
      }
      if (!$product_field_check){
        $description .= "<li>". t("The Image field has not been attached to Product nodes.") ."</li>\n";
      }
      if (!$preset_check){
        $description .= "<li>". t('The expected Imagecache presets ("!presets") have not been created.', array('!presets' => implode('", "', $presets))) ."</li>\n";
      }
      if (!$action_check){
        $description .= "<li>". t('The Imagecache presets do not contain actions to perform on images. Images may be displayed in their original formats.') ."</li>\n";
      }
      $description .= "</ul>";
    }
  }
  
  return array(array('status' => $status, 'title' => $title, 'desc' => $description));
}

/**
 * Implementation of Übercart hook_cart_display().
 */
function uc_product_cart_display($item){
  $node = node_load($item->nid);
  $element = array();
  $element['nid'] = array('#type' => 'value', '#value' => $node->nid);
  $element['module'] = array('#type' => 'value', '#value' => 'uc_product');
  $element['remove'] = array('#type' => 'checkbox');
  $op_names = '';
  if (module_exists('uc_attribute')){
    $op_names = "<ul class=\"cart-options\">\n";
    foreach ($item->options as $option){
      $op_names .= '<li>'. $option['attribute'] .': '. $option['name'] ."</li>\n";
    }
    $op_names .= "</ul>\n";
  }
  $element['options'] = array('#value' => $op_names);
  $element['title'] = array(
    '#value' => l($node->title, 'node/'. $node->nid),
  );
  $element['#total'] = $item->price * $item->qty;
  $element['data'] = array('#type' => 'hidden', '#value' => serialize($item->data));
  $element['qty'] = array(
    '#type' => 'textfield',
    '#default_value' => $item->qty,
    '#size' => 3,
    '#maxlength' => 3
  );
  return $element;
}

/**
 * Update information about a specific item in current cart.
 */
function uc_product_update_cart_item($nid, $data = array(), $qty, $cid = NULL) {
  if (!$nid) return NULL;
  $cid = !(is_null($cid) || empty($cid)) ? $cid : uc_cart_get_id();
  if ($qty < 1){
    uc_cart_remove_item($nid, $cid, $data);
  }
  else{
    db_query("UPDATE {uc_cart_products} SET qty = %d, changed = %d WHERE nid = %d AND cart_id = '%s' AND data = '%s'", $qty, time(), $nid, $cid, serialize($data));
    cache_clear_all();
  }

  // Rebuild the items hash
  uc_cart_get_contents(NULL, 'rebuild');
  if (!substr(request_uri(), 'cart', -4)) {
    drupal_set_message(t('Your item(s) have been updated.'));
  }
}

function uc_product_add_to_cart_data($form_values){
  return array('module' => 'uc_product');
}

/******************************************************************************
 * Menu Callbacks                                                             *
 ******************************************************************************/

function uc_product_default(){
  $header = tapir_get_header('uc_product_table', array());
  $order = substr(tablesort_sql($header), 10);
  if (empty($order)){
    $order = 'n.title';
  }
  $table_nids = array();
  $result = pager_query(db_rewrite_sql("SELECT n.nid FROM {node} AS n RIGHT JOIN {uc_products} AS p ON n.nid = p.nid ORDER BY ". $order), variable_get('uc_product_nodes_per_page', 10), 0, null);
  while ($node = db_fetch_object($result)){
    $table_nids[] = $node->nid;
  }
  $table_args = array('nids' => $table_nids);
  $output = tapir_get_table('uc_product_table', $table_args);
  $output .= theme('pager');
  return $output;
}

function uc_product_image_defaults($checks){
  $field_check = $checks & 8;
  $product_field_check = $checks & 4;
  $preset_check = $checks & 2;
  $action_check = $checks & 1;
  
  $presets = array('product', 'product_list', 'thumbnail');
  if (module_exists('uc_catalog')){
    $presets[] = 'category';
  }
  if (module_exists('uc_cart')){
    $presets[] = 'cart';
  }
  if (module_exists('uc_manufacturer')){
    $presets[] = 'manufacturer';
  }

  if (!$field_check){
    db_query("INSERT INTO {node_field} (field_name, type, global_settings, required, multiple, db_storage) VALUES ('field_image_cache', 'image', '%s', 0, 1, 0)", 'a:0:{}');
    content_clear_type_cache();
  }
  if (!$product_field_check){
    db_query("INSERT INTO {node_field_instance} VALUES ('field_image_cache', 'product', -2, 'Image', 'image', '%s', '%s', '')", 'a:6:{s:14:"max_resolution";s:1:"0";s:10:"image_path";s:6:"ubercart_images";s:10:"custom_alt";i:1;s:12:"custom_title";i:1;s:13:"teaser_preset";N;s:11:"body_preset";N;}', 'a:3:{s:5:"label";a:1:{s:6:"format";s:6:"hidden";}s:6:"teaser";a:1:{s:6:"format";s:6:"hidden";}s:4:"full";a:1:{s:6:"format";s:6:"hidden";}}');
    switch ($GLOBALS['db_type']){
      case 'mysql':
      case 'mysqli':
        db_query("CREATE TABLE IF NOT EXISTS {content_field_image_cache} (
          `vid` int(10) unsigned NOT NULL default '0',
          `delta` int(10) unsigned NOT NULL default '0',
          `nid` int(10) unsigned NOT NULL default '0',
          `field_image_cache_fid` int(11) NOT NULL default '0',
          `field_image_cache_title` varchar(255) NOT NULL default '',
          `field_image_cache_alt` varchar(255) NOT NULL default '',
          PRIMARY KEY  (`vid`,`delta`)
        ) /*!40100 DEFAULT CHARACTER SET utf8 */;");
      break;
      case 'pgsql':
        db_query('CREATE TABLE {content_field_image_cache} (
          "vid" int(10) unsigned NOT NULL default \'0\',
          "delta" int(10) unsigned NOT NULL default \'0\',
          "nid" int(10) unsigned NOT NULL default \'0\',
          "field_image_cache_fid" int(11) NOT NULL default \'0\',
          "field_image_cache_title" varchar(255) NOT NULL,
          "field_image_cache_alt" varchar(255) NOT NULL,
          PRIMARY KEY  ("vid","delta")
        );');
      break;
    }
    content_clear_type_cache();
  }
  if (!$preset_check){
    $result = db_query("SELECT * FROM {imagecache_preset} WHERE presetname IN ('". implode("','", $presets) ."')");
    $preset_keys = array();
    foreach ($presets as $preset){
      $preset_keys[$preset] = 0;
    }
    $presets = $preset_keys;
    while ($preset = db_fetch_array($result)){
      $presets[$preset['presetname']] = $preset['presetid'];
    }
    //drupal_set_message('<pre>'. print_r($presets, true) .'</pre>');
    foreach ($presets as $name => $id){
      if ($id == 0){
        $id = db_next_id('{imagecache_preset}_presetid');
        db_query("INSERT INTO {imagecache_preset} (presetid, presetname) VALUES (%d, '%s')", $id, $name);
      }
    }
  }
  if (!$action_check){
    $result = db_query("SELECT ia.actionid, ip.presetid, ip.presetname FROM {imagecache_preset} AS ip LEFT JOIN {imagecache_action} AS ia ON ip.presetid = ia.presetid WHERE ip.presetname IN ('". implode("','", array_keys($presets)) ."')");
    $presets = array();
    while ($preset = db_fetch_array($result)){
      if (is_null($preset['actionid'])){
        switch ($preset['presetname']){
          case 'product':
            db_query("INSERT INTO {imagecache_action} (actionid, presetid, weight, data) VALUES (%d, %d, 0, '%s')", db_next_id('{imagecache_action}_actionid'), $preset['presetid'], 'a:4:{s:8:"function";s:5:"scale";s:3:"fit";s:6:"inside";s:5:"width";s:3:"100";s:6:"height";s:3:"100";}');
          break;
          case 'product_list':
            db_query("INSERT INTO {imagecache_action} (actionid, presetid, weight, data) VALUES (%d, %d, 0, '%s')", db_next_id('{imagecache_action}_actionid'), $preset['presetid'], 'a:4:{s:8:"function";s:5:"scale";s:3:"fit";s:6:"inside";s:5:"width";s:3:"100";s:6:"height";s:3:"100";}');
          break;
          case 'thumbnail':
            db_query("INSERT INTO {imagecache_action} (actionid, presetid, weight, data) VALUES (%d, %d, 0, '%s')", db_next_id('{imagecache_action}_actionid'), $preset['presetid'], 'a:4:{s:8:"function";s:5:"scale";s:3:"fit";s:6:"inside";s:5:"width";s:2:"35";s:6:"height";s:2:"35";}');
          break;
          case 'category':
            db_query("INSERT INTO {imagecache_action} (actionid, presetid, weight, data) VALUES (%d, %d, 0, '%s')", db_next_id('{imagecache_action}_actionid'), $preset['presetid'], 'a:4:{s:8:"function";s:5:"scale";s:3:"fit";s:6:"inside";s:5:"width";s:2:"96";s:6:"height";s:2:"96";}');
          break;
          case 'cart':
            db_query("INSERT INTO {imagecache_action} (actionid, presetid, weight, data) VALUES (%d, %d, 0, '%s')", db_next_id('{imagecache_action}_actionid'), $preset['presetid'], 'a:4:{s:8:"function";s:5:"scale";s:3:"fit";s:6:"inside";s:5:"width";s:2:"50";s:6:"height";s:2:"50";}');
          break;
          case 'manufacturer':
            db_query("INSERT INTO {imagecache_action} (actionid, presetid, weight, data) VALUES (%d, %d, 0, '%s')", db_next_id('{imagecache_action}_actionid'), $preset['presetid'], 'a:4:{s:8:"function";s:5:"scale";s:3:"fit";s:6:"inside";s:5:"width";s:2:"80";s:6:"height";s:2:"80";}');
          break;
        }
      }
    }
  }
  file_check_directory(file_create_path('ubercart_images'), FILE_CREATE_DIRECTORY);
  cache_clear_all('imagecache:presets', 'cache');
  drupal_goto('admin/store');
}

function uc_product_overview(){
  drupal_add_css(drupal_get_path('module', 'uc_store') .'/uc_store.css');
  drupal_add_js(drupal_get_path('module', 'uc_store') .'/uc_store.js', 'module');
  drupal_add_js("var text_show = '". t('- Show links -') ."';\nvar text_hide = '". t('- Hide links -') ."';\n", 'inline');

  $main_menu = menu_get_item(NULL, 'admin/store/products');
  usort($main_menu['children'], '_menu_sort');
  foreach ($main_menu['children'] as $mid) {
    if ($mid > 0) {
      $submenu[] = menu_get_item($mid);
    }
  }

  $output = '<table class="uc-store-admin-table" align="center"><tr valign="top">';

  $panels = 0;
  if (is_array($submenu)) {
    if (variable_get('uc_store_display_links', FALSE)) {
      $disp = '';
      $title = t('- Hide links -');
    }
    else {
      $disp = 'display: none;';
      $title = t('- Show links -');
    }
    foreach ($submenu as $menu) {
      $panel++;
      if ($panel % 4 == 0) {
        $output .= '</tr><tr valign="top">';
      }
      switch ($menu['path']){
        case 'admin/store/products/view':
          $file = 'file:search';
        break;
        case 'admin/store/products/create_product':
          $file = 'file:cut-n-measure';
        break;
        case 'admin/store/products/categories':
          $file = 'file:footprints';
        break;
        case 'admin/store/products/orphans':
          $file = 'file:missing';
        break;
        case 'admin/store/products/classes':
          $file = 'file:attachment';
        break;
        case 'admin/store/products/attributes':
          $file = 'file:paint';
        break;
        default:
          $file = $menu['path'];
        break;
      }
      $panel_title = $menu['title'];
      $panel_links = theme('admin_block_content', system_admin_menu_block($menu));
      $panel_table = '<table width="100%"><tr>'
                    .'<td>'. l(uc_store_get_icon($file), $menu['path'],
                               array(), NULL, NULL, FALSE, TRUE) .'</td>'
                    .'<td class="panel-title">'. l($menu['title'], $menu['path'])
                    .'</td></tr>';
      if (strlen($panel_links) > 0) {
        $panel_table .= '<tr><td nowrap colspan="2" class="panel-links" style="'. $disp .'">'
                     . $panel_links .'</td></tr><tr>'
                      .'<td align="center" colspan="2" class="panel-show-link" '
                      .'id="show-links-'. $panel .'"><a>'. $title
                      .'</a></td></tr>';
      }
      $panel_table .= '</table>';
      $output .= '<td class="uc-store-admin-panel" id="panel-'. $panel .'">'
               . $panel_table .'</td>';
    }
  }
  $output .= '</tr></table>';

  return $output;
}

/**
 * Lists the subcategories of product administration.
 */
function uc_product_administration(){
  $nids = array();
  $args = func_get_args();
  foreach ($args as $nid){
    if (is_numeric($nid)){
      $nids[] = (int)$nid;
    }
  }
  drupal_add_js(drupal_get_path('module', 'uc_product') .'/uc_product.js', 'module');
  $types = array_keys(module_invoke_all('product_info'));
  $types[] = 'product';
  $result = db_query("SELECT v.vid, v.name FROM {vocabulary} AS v LEFT JOIN {vocabulary_node_types} AS vnt ON v.vid = vnt.vid WHERE vnt.type IN ('". implode("','", $types) ."')");
  $vocab_options = array();
  while ($option = db_fetch_array($result)){
    $vocab_options[$option['vid']] = $option['name'];
  }
  $form['vocabs'] = array('#type' => 'select',
    '#id' => 'ubrowser-vocab-select',
    //'#parents' => array(),
    '#title' => t('Vocabulary'),
    '#default_value' => variable_get('uc_catalog_vid', variable_get('uc_manufacturer_vid', 0)),
    '#options' => $vocab_options,
  );
  drupal_add_js('$(document).ready(function(){
    $("#ubrowser-vocab-select").change(function(){
      switch_vocabulary("'. base_path() .'");
    });
  })', 'inline');
  drupal_prepare_form('vocab-switcher', $form);
  $output = drupal_render($form);
  $settings = array(
    'div' => '#products-selector',
    'class' => 'product-ubrowser',
    'vid' => variable_get('uc_catalog_vid', 0),
    'filter' => implode(',', array_keys(uc_product_node_info())),
    'search' => 'true',
    'nids' => 'true',
    'nodesg' => 'product',
    'nodepl' => 'products',
    'multi' => 'true',
    'select' => 'buffer_products("'. base_path() .'","'. file_create_url('') .'")',
  );

  if (module_exists('uc_catalog')) {
    $output .= ubrowser($settings, 'products-selector');
    $output .= drupal_get_form('uc_product_buffer_form', $nids);
  }
  if (!count($nids)){
    $header = tapir_get_header('uc_product_table', array());
    $order = substr(tablesort_sql($header), 10);
    if (empty($order)){
      $order = 'n.title';
    }
    $table_nids = array();
    $result = pager_query(db_rewrite_sql("SELECT n.nid FROM {node} AS n WHERE n.type IN ('". implode("','", array_keys(uc_product_node_info())) ."') ORDER BY ". $order), variable_get('uc_product_nodes_per_page', 10), 0, null);
    while ($node = db_fetch_object($result)){
      $table_nids[] = $node->nid;
    }
    $nids = $table_nids;
  }
  $args = array('nids' => $nids, 'attributes' => array('class' => 'product-list'));
  $output .= tapir_get_table('uc_product_table', $args);
  $output .= theme('pager');
  
  return $output;
}

function uc_product_buffer_form($nids){
  $buffer = '';
  foreach ($nids as $nid){
    $node = node_load($nid);
    $buffer .= theme('imagecache', 'thumbnail', $node->field_image_cache['filepath']);
  }
  $form['#attributes'] = array('class' => 'product-buffer');
  $form['thumbnails'] = array('#type' => 'markup',
    '#value' => '<div id="buffer-images"></div>',
  );
  $form['products'] = array('#type' => 'hidden',
  );
  $form['reset'] = array('#type' => 'submit',
    '#value' => t('Reset'),
  );
  $form['submit'] = array('#type' => 'submit',
    '#value' => t('List'),
  );

  return $form;
}

function uc_product_buffer_form_submit($form_id, $form_values){
  $item = menu_get_item(menu_get_active_item());
  //drupal_set_message(print_r($form_values, true));
  if ($form_values['op'] == t('Reset')){
    return $item['path'];
  }
  else{
    return $item['path'] . $form_values['products'];
  }
}

function uc_product_settings_overview() {
  $items[] = t('Teaser and catalog pages = %text', array('%text' => variable_get('uc_teaser_add_to_cart_text', t('Add to cart'))));
  $items[] = t('Product view pages = %text', array('%text' => variable_get('uc_product_add_to_cart_text', t('Add to cart'))));
  $buttons = t('<em>Add to Cart</em> submit button text:')
           . theme('item_list', $items);
  $sections[] = array(
    'edit' => 'admin/store/settings/products/edit',
    'title' => t('Product settings'),
    'items' => array(
      t('Showing !number products per page.', array('!number' => variable_get('uc_product_nodes_per_page', 10))),
      t('The <em>Add to Cart</em> form is !status in product teasers.', array('!status' => variable_get('uc_product_add_to_cart_teaser', TRUE) ? t('enabled') : t('disabled'))),
      t('The Quantity field in the <em>Add to Cart</em> form is !status.', array('!status' => variable_get('uc_product_add_to_cart_qty', FALSE) ? t('enabled') : t('disabled'))),
      $buttons,
    ),
  );

  $options = array(
    'model' => t('Model'),
    'image' => t('Image'),
    'display_price' => t('Display Price'),
    'list_price' => t('List Price'),
    'cost' => t("Cost (seen only by 'administer products' permission)"),
    'sell_price' => t('Sell Price'),
    'weight' => t('Weight'),
  );
  $enabled = variable_get('uc_product_field_enabled', array(
    'model' => 'model',
    'image' => 'image',
    'display_price' => 'display_price',
    'sell_price' => 'sell_price',
    'weight' => 'weight',
  ));
  $weight = variable_get('uc_product_field_weight', array(
    'image' => -2,
    'display_price' -1,
    'model' => 0,
    'list_price' => 2,
    'cost' => 3,
    'sell_price' => 4,
    'weight' => 5,
  ));
  $fields = array();
  foreach ($options as $field => $label){
    if ($enabled[$field]){
      $fields[$field] = array('enabled' => $enabled[$field],
        'weight' => $weight[$field],
        'data' => $label,
      );
    }
  }
  uasort($fields, 'uc_weight_sort');
  
  $sections[] = array(
    'edit' => 'admin/store/settings/products/edit/fields',
    'title' => t('Product fields'),
    'items' => array(
      t('Displayed product fields: !list', array('!list' => theme('item_list', $fields))),
    ),
  );

  $output = theme('uc_settings_overview', $sections);

  return $output;
}

function uc_product_settings_form() {
  $form['uc_product_nodes_per_page'] = array(
    '#type' => 'select',
    '#title' => t('Products per page'),
    '#description' => t('The number of products per page in a list.'),
    '#default_value' => variable_get('uc_product_nodes_per_page', 10),
    '#options' => drupal_map_assoc(uc_range(10, 100, 10)),
  );
  
  $form['uc_product_add_to_cart_teaser'] = array(
    '#type' => 'radios',
    '#title' => t('<em>Add to Cart</em> form in node teasers is'),
    '#options' => array(1 => t('Enabled'), 0 => t('Disabled')),
    '#default_value' => variable_get('uc_product_add_to_cart_teaser', TRUE),
  );
  $form['uc_product_add_to_cart_qty'] = array(
    '#type' => 'radios',
    '#title' => t('Quantity field in <em>Add to Cart</em> form is'),
    '#options' => array(1 => t('Enabled'), 0 => t('Disabled')),
    '#default_value' => variable_get('uc_product_add_to_cart_qty', FALSE),
  );
  
  $form['uc_add_to_cart_text'] = array(
    '#type' => 'fieldset',
    '#title' => t('<em>Add to Cart</em> button text'),
    '#description' => t('Use the textboxes to adjust the text of the submit button for <em>Add to Cart</em> forms in various places on the site.'),
    '#collapsed' => FALSE,
    '#collapsible' => FALSE,
  );
  $form['uc_add_to_cart_text']['uc_teaser_add_to_cart_text'] = array(
    '#type' => 'textfield',
    '#title' => t('Teaser forms'),
    '#description' => t('For the form displayed on teasers and catalog pages.'),
    '#default_value' => variable_get('uc_teaser_add_to_cart_text', t('Add to cart')),
  );
  $form['uc_add_to_cart_text']['uc_product_add_to_cart_text'] = array(
    '#type' => 'textfield',
    '#title' => t('Product view'),
    '#description' => t('For the form displayed on the product view page.'),
    '#default_value' => variable_get('uc_product_add_to_cart_text', t('Add to cart')),
  );

  return system_settings_form($form);
}

/**
 * Allows store administrators to control what product information is relavent to their store.
 */
function uc_product_field_settings_form() {
  $form = array();

  $options = array(
    'model',
    'image',
    'display_price',
    'list_price',
    'cost',
    'sell_price',
    'weight',
  );
  $enabled = variable_get('uc_product_field_enabled', array(
    'model' => 'model',
    'image' => 'image',
    'display_price' => 'display_price',
    'sell_price' => 'sell_price',
    'weight' => 'weight',
  ));
  $weight = variable_get('uc_product_field_weight', array(
    'image' => -2,
    'display_price' -1,
    'model' => 0,
    'list_price' => 2,
    'cost' => 3,
    'sell_price' => 4,
    'weight' => 5,
  ));
  $fields = array();
  foreach ($options as $field){
    $fields[$field] = array('enabled' => $enabled[$field], 'weight' => $weight[$field]);
  }
  uasort($fields, 'uc_weight_sort');
  $form['fields'] = array('#tree' => true);
  foreach ($fields as $label => $field){
    $form['fields'][$label]['enabled'] = array('#type' => 'checkbox',
      '#default_value' => $field['enabled'],
    );
    $form['fields'][$label]['weight'] = array('#type' => 'weight',
      '#delta' => 10,
      '#default_value' => $field['weight'],
    );
  }
  
  $form['submit'] = array('#type' => 'submit', '#value' => t('Save settings'));
  
  return $form;
}

function theme_uc_product_field_settings_form($form){
  $options = array(
    'model' => t('Model'),
    'image' => t('Image'),
    'display_price' => t('Display Price'),
    'list_price' => t('List Price'),
    'cost' => t("Cost (seen only by 'administer products' permission)"),
    'sell_price' => t('Sell Price'),
    'weight' => t('Weight'),
  );
  
  $header = array(t('Enable'), t('Product Field'), t('Weight'));
  $rows = array();
  foreach (element_children($form['fields']) as $field){
    $row = array();
    $row[] = drupal_render($form['fields'][$field]['enabled']);
    $row[] = $options[$field];
    $row[] = drupal_render($form['fields'][$field]['weight']);
    $rows[] = $row;
  }
  $output .= theme('table', $header, $rows);
  
  $output .= drupal_render($form);
  return $output;
}

function uc_product_field_settings_form_submit($form_id, $form_values){
  $enabled = array();
  $weight = array();
  foreach ($form_values['fields'] as $id => $field){
    $enabled[$id] = $field['enabled'];
    $weight[$id] = $field['weight'];
  }
  variable_set('uc_product_field_enabled', $enabled);
  variable_set('uc_product_field_weight', $weight);
}

function uc_product_class_default(){
  $result = db_query("SELECT * FROM {uc_product_classes}");
  $header = array(t('Class ID'), t('Name'), t('Description'), array('data' => t('Operations'), 'colspan' => '2'));
  $rows = array();
  while($class = db_fetch_object($result)){
    $rows[] = array(
      $class->pcid,
      $class->name,
      $class->description,
      l(t('edit'), 'admin/store/products/classes/'. $class->pcid .'/edit'),
      l(t('delete'), 'admin/store/products/classes/'. $class->pcid .'/delete'),
    );
  }
  if (count($rows) == 0){
    $rows[] = array(array('data' => t('No product classes have been defined yet.'), 'colspan' => '5'));
  }
  
  $output = theme('table', $header, $rows);
  $output .= '<h2>'. t('Add a Class') .'</h2>';
  $output .= drupal_get_form('uc_product_class_form');
  
  return $output;
}

/**
 *  Form builder for product classes.
 */
function uc_product_class_form($pcid = null){
  if ($pcid){
    $class = uc_product_class_load($pcid);
    $form['pcid'] = array('#type' => 'hidden', '#value' => $pcid);
    
    $crumbs = drupal_get_breadcrumb();
    $crumbs[] = l(t('Classes'), 'admin/store/products/classes');
    drupal_set_breadcrumb($crumbs);
  }
  $form['name'] = array('#type' => 'textfield',
    '#title' => t('Class name'),
    '#default_value' => $class->name,
    '#required' => true,
  );
  $form['description'] = array('#type' => 'textarea',
    '#title' => t('Description'),
    '#default_value' => $class->description,
  );
  $form['op'] = array('#type' => 'submit',
    '#value' => t('Submit'),
  );
  
  return $form;
}

function uc_product_class_form_submit($form_id, $form_values){
  if (isset($form_values['pcid'])){
    $is_new = false;
    $pcid = $form_values['pcid'];
    db_query("UPDATE {uc_product_classes} SET name = '%s', description = '%s' WHERE pcid = '%s'", $form_values['name'], $form_values['description'], $pcid);
    uc_product_node_info(true);
    module_invoke_all('product_class', $pcid, 'update');
  }
  else{
    $is_new = true;
    // Convert whitespace to underscores, and remove other non-alphanumeric characters.
    $pcid = preg_replace(array('/\s+/', '/\W/'), array('_', ''), strtolower($form_values['name']));
    // Search for class ids of the form $pcid_# where # is any character.
    $similar = db_num_rows(db_query("SELECT pcid FROM {uc_product_classes} WHERE pcid LIKE '%s\\__' OR pcid LIKE '%s'", $pcid, $pcid));
    if ($similar){
      $pcid = $pcid .'_'. $similar;
    }
    db_query("INSERT INTO {uc_product_classes} (pcid, name, description) VALUES ('%s', '%s', '%s')", $pcid, $form_values['name'], $form_values['description']);
    uc_product_node_info(true);
    variable_set('node_options_'. $pcid, variable_get('node_options_product', array('status', 'promote')));
    if (module_exists('comment')){
      variable_set('comment_'. $pcid, variable_get('comment_product', COMMENT_NODE_READ_WRITE));
    }
    module_invoke_all('product_class', $pcid, 'insert');
  }
  
  node_types_rebuild();
  menu_rebuild();
  if ($is_new){
    drupal_execute('_content_admin_field_add_existing', array('type_name' => $pcid, 'field_name' => 'field_image_cache'), $pcid);
  }
  
  return 'admin/store/products/classes';
}

function uc_product_class_delete_confirm($class_id){
  $result = db_query("SELECT COUNT(*) AS number FROM {node} WHERE type = '%s'", $class_id);
  $products = db_fetch_object($result);
  $form['pcid'] = array('#type' => 'value', '#value' => $class_id);
  $form['#redirect'] = 'admin/store/products/classes';
  $output = confirm_form($form, t('Be very sure you want to delete the %type product class. ', array('%type' => $class_id)), 'admin/store/products/classes',
    format_plural($products->number, 'There is @count %type. It will be converted to the Product node type. ', 'There are @count %types. They will be converted to the Product node type', array('%type' => $class_id)),
    t('Continue'), t('Cancel'));
  
  return $output;
}

function uc_product_class_delete_confirm_submit($form_id, $form_values){
  if ($form_values['confirm']){
    db_query("UPDATE {node} SET type = 'product' WHERE type = '%s'", $form_values['pcid']);

    node_type_delete($form_values['pcid']);
    $t_args = array('%name' => $form_values['pcid']);
    drupal_set_message(t('The content type %name has been deleted.', $t_args));
    watchdog('menu', t('Deleted content type %name.', $t_args), WATCHDOG_NOTICE);

    db_query("DELETE FROM {uc_product_classes} WHERE pcid = '%s'", $form_values['pcid']);
    module_invoke_all('product_class', $form_values['pcid'], 'delete');
    uc_product_node_info(true);
    node_types_rebuild();
    menu_rebuild();
    
    drupal_set_message(t('Product class %type deleted.', array('%type' => $form_values['pcid'])));  
  }
}

/******************************************************************************
 * Module Functions                                                           *
 ******************************************************************************/
 
function uc_product_is_product($node){
  if (is_object($node)){
    $type = $node->type;
  }
  elseif (is_array($node)){
    $type = $node['type'];
  }
  elseif (is_string($node)){
    $type = $node;
  }
  
  if (!$type){
    return false;
  }
  
  $types = uc_product_node_info();
  return isset($types[$type]);
}

/**
 * Format a product's model number.
 *
 * @ingroup themeable
 */
function theme_uc_product_model($model){
  $output = '<div class="model">';
  $output .= t('!m', array('!m' => $model));
  $output .= '</div>';
  return $output;
}

/**
 * Wrap the "Add to Cart" form in a <div>.
 *
 * @ingroup themeable
 */
function theme_uc_product_add_to_cart($node){
  $output = '<div class="add_to_cart">';
  $output .= drupal_get_form('uc_product_add_to_cart_form_'. $node->nid, $node);
  $output .= '</div>';
  return $output;
}

function uc_product_add_to_cart_form($node){
  $form = array();
  $form['#base'] = 'uc_product_add_to_cart_form';
  $form['nid'] = array('#type' => 'value', '#value' => $node->nid);
  if (variable_get('uc_product_add_to_cart_qty', false)){
    $form['qty'] = array('#type' => 'textfield',
      '#title' => t('Quantity'),
      '#default_value' => 1,
      '#size' => 3,
    );
  }
  else{
    $form['qty'] = array('#type' => 'hidden', '#value' => 1);
  }
  $form['submit'] = array('#type' => 'submit', '#value' =>  variable_get('uc_product_add_to_cart_text', t('Add to cart')), );
  return $form;
}

function uc_product_add_to_cart_form_validate($form_id, $form_values){
  if (!is_numeric($form_values['qty'])){
    form_set_error('qty', t('Numeric quantities only, please.'));
  }
  else if ($form_values['qty'] < 0){
    form_set_error('qty', t('Go to <a href="!cart">your cart</a> if you want to remove items.', array('!cart' => url('cart'))));
  }
  else if ($form_values['qty'] == 0){
    form_set_error('qty', t('OK, nothing added to your cart.'));
  }
}

function uc_product_add_to_cart_form_submit($form_id, $form_values){
  return uc_cart_add_item($form_values['nid'], $form_values['qty'],  module_invoke_all('add_to_cart_data', $form_values));
}

/**
 * Format a product's price.
 *
 * @param $price
 *   The amount to print.
 * @param $class
 *   Determines the label and the CSS class of the <div>.
 * @ingroup themeable
 */
function theme_uc_product_price($price, $class){
  $label = preg_replace(array('/_/', '/\b(\w)/e'), array(' ', 'drupal_strtoupper($1)'), $class);
  $output = '<div class="'. $class .'">';
  $output .= t('@label: !price', array('@label' => $label, '!price' => uc_currency_format($price)));
  $output .= '</div>';
  return $output;
}

/**
 * Format the selling price based on the view mode.
 *
 * @param $price
 *   The price amount.
 * @param $teaser
 *   Passed from uc_product_view().
 * @ingroup themeable
 */
function theme_uc_product_sell_price($price, $teaser){
  if ($teaser){
    $output = '<span class="sell_price">';
    $output .= t('!price', array('!price' => uc_currency_format($price)));
    $output .= '</span>';
  }
  else{
    $output = '<div class="sell_price">';
    $output .= t('Price: !price', array('!price' => uc_currency_format($price)));
    $output .= '</div>';
  }
  return $output;
}

/**
 * Format a product's weight.
 *
 * @ingroup themeable
 */
function theme_uc_product_weight($weight, $unit = null){
  $output = '<div class="weight">';
  $output .= t('Weight: !weight', array('!weight' => uc_weight_format($weight, $unit)));
  $output .= '</div>';
  return $output;
}

/**
 * @ingroup themeable
 */
function theme_uc_product_image($images){
  static $rel_count = 0;
  $first = array_shift($images);
  $output = '<div class="product_image">';
  $output .= '<a href="'. check_url(file_create_url($first['filepath'])) .'" title="'. $first['title'] .'" class="thickbox" rel="field_image_cache_'. $rel_count .'">';
  $output .= theme('imagecache', 'product', $first['filepath'], $first['alt'], $first['title']);
  /* if (count($images)){
    $output .= '<br />'. t('Click for more images.');
  } */
  $output .= '</a><br />';
  foreach ($images as $thumbnail){
    $output .= '<a href="'. check_url(file_create_url($thumbnail['filepath'])) .'" title="'. $thumbnail['title'] .'" class="thickbox" rel="field_image_cache_'. $rel_count .'">';
    $output .= theme('imagecache', 'thumbnail', $thumbnail['filepath'], $thumbnail['alt'], $thumbnail['title']);
    $output .= '</a>';
  }
  $output .= '</div>';
  $rel_count++;
  return $output;
}

/**
 * @ingroup themeable
 */
function theme_uc_product_display_price($price){
  $output = '<div class="display_price">';
  $output .= uc_currency_format($price);
  $output .= '</div>';
  return $output;
}

/**
 * Get the cost of a product node.
 *
 * @param $node_id
 *   nid of the selected node
 * @return
 *   float - cost
 */
function uc_product_get_cost($node_id){
  $product = node_load($node_id);
  return $product->cost;
}

/**
 * Get the selling price of a product node.
 *
 * @param $node_id
 *   nid of the selected node
 * @return
 *   float - sell price
 */
/* function uc_product_get_price($node_id){
  $product = node_load($node_id);
  return $product->sell_price;
} */

/**
 * Returns an HTML img tag based on a node's attached image.
 *
 * @param $node_id
 *   The node's id.
 * @param $format
 *   By default, 'thumbnail', with possible values of '_original', 'thumbnail', and 'preview'.
 * @return
 *   An HTML img. When $format is 'thumbnail', the image is a link to the node.
 *   When $format is 'preview', the image is a link to the image file.
 */
function uc_product_get_picture($node_id, $format = 'product'){
  $img = '';
  $product = node_load($node_id);
  if (!module_exists('imagecache')){
    return '';
  }
  $path = $product->field_image_cache[0]['filepath'];
  if (file_exists($path)){
    $img = theme('imagecache', $format, $path);
    if ($format == 'product'){
      $img = '<a href="'. check_url(file_create_url($path)) .'" class="thickbox" rel="field_image_cache">'. $img .'</a>';
    }
    else{
      $img = l($img, 'node/'. $product->nid, array(), null, null, false, true);
    }
  }  
  return $img;
}

/**
 * Implementation of hook_load().
 */
function uc_product_class_load($class_id){
  static $classes = array();
  
  if (empty($classes[$class_id])){
    $result = db_query("SELECT * FROM {uc_product_classes} WHERE pcid = '%s'", $class_id);
    $class = db_fetch_object($result);
    $classes[$class_id] = $class;
  }
  
  return $classes[$class_id];
}

function _uc_product_get_image_field_filepath($nid){
  $result = db_result(db_query("SELECT filepath FROM {files} WHERE nid = %d ORDER BY fid LIMIT 1", $nid));
  if ($result){
    print $result;
  }
  else{
    print 'false';
  }
  exit();
}
