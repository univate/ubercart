<?php
// $Id: uc_product_kit.module,v 1.3 2007-04-10 16:21:23 rszrama Exp $

/**
 * @file
 * The product kit module for Ãœbercart.
 *
 * Product kits are groups of products that are sold as a unit.
 *
 * Coded by: Lyle Mantooth
 */

/******************************************************************************
 * Drupal Hooks                                                               *
 ******************************************************************************/

/**
 * Implementation of hook_menu().
 */
function uc_product_kit_menu($may_cache){
  $items = array();
  if ($may_cache){
/*    $items[] = array('path' => 'admin/store/products/kits',
      'title' => t('Kits'),
      'access' => user_access('administer products'),
      'callback' => 'drupal_get_form',
      'callback arguments' => 'uc_product_kit_admin_settings',
    );*/
    $items[] = array('path' => 'admin/store/products/create_kit',
      'title' => t('Create product kit'),
      'access' => user_access('administer products'),
      'callback' => 'node_add',
      'callback arguments' => array('kit'),
      'type' => MENU_NORMAL_ITEM,
      'weight' => -8,
    );
  }
  return $items;
}

/**
 * Implementation of hook_node_info().
 */
function uc_product_kit_node_info(){
  return array('kit' => array('name' => t('Product kit'), 'module' => 'uc_product_kit', 'description' => 
    'This node represents two or more products that have been listed together. This presents a logical and'
    . ' convenient grouping of items to the customer.'),
    'title_label' => t('Name'),
    'body_label' => t('Description'),
  );
}

/**
 * Implementation of hook_insert().
 */
function uc_product_kit_insert(&$node){
  $values = array();
  $placeholders = '';
  foreach ($node->products as $product){
    $values[] = $node->nid;
    $values[] = $product;
    $values[] = 1;
    $placeholders .= '(%d, %d, %d), ';
  }
  $placeholders = rtrim($placeholders, ', ');
  db_query("INSERT INTO {uc_product_kits} (nid, product_id, qty) VALUES $placeholders", $values);
  if(function_exists('image_prepare') && function_exists('image_insert')){
    image_prepare($node, 'image');
    if ($node->images['_original'] != ''){
      image_insert($node);
    }
  }
  //drupal_set_message($placeholders . print_r($values, true));
}

/**
 * Implementation of hook_update().
 */
function uc_product_kit_update(&$node){
  db_query("DELETE FROM {uc_product_kits} WHERE nid = %d", $node->nid);
  $values = array();
  $placeholders = '';
  foreach ($node->products as $i => $product){
    $values[] = $node->nid;
    $values[] = $product;
    $values[] = $node->items[$i]['qty'];
    $placeholders .= '(%d, %d, %d), ';
  }
  $placeholders = rtrim($placeholders, ', ');
  db_query("INSERT INTO {uc_product_kits} (nid, product_id, qty) VALUES $placeholders", $values);
  if(function_exists('image_prepare') && function_exists('image_update')){
    image_prepare($node, 'image');
    if ($node->images['_original'] != ''){
      image_update($node);
    }
  }
  //drupal_set_message($placeholders . print_r($values, true));
}

/**
 * Implementation of hook_delete().
 */
function uc_product_kit_delete(&$node) {
  db_query("DELETE from {uc_product_kits} WHERE nid = %d", $node->nid);
}

/**
 * Implementation of hook_load().
 */
function uc_product_kit_load(&$node){
  $products = array();
  $result = db_query("SELECT product_id, qty FROM {uc_product_kits} WHERE nid = %d", $node->nid);
  while ($prod = db_fetch_object($result)){
    $product = node_load($prod->product_id);
    $product_info = new stdClass();
    $product_info->nid = $product->nid;
    $product_info->title = $product->title;
    $product_info->model = $product->model;
    $product_info->list_price = $product->list_price;
    $product_info->cost = $product->cost;
    $product_info->sell_price = $product->sell_price;
    $product_info->weight = $product->weight;
    $product_info->pcid = $product->pcid;
    $product_info->fields = $product->fields;
    $product_info->qty = $prod->qty;
    $products[$prod->product_id] = $product_info;
  }
  $obj = new stdClass();
  $obj->products = $products;
  $obj->model = '';
  $obj->list_price = 0;
  $obj->cost = 0;
  $obj->sell_price = 0;
  $obj->weight = 0;
  foreach ($obj->products as $product){
    $obj->model .= $product->model . ' / ';
    $obj->list_price += $product->list_price * $product->qty;
    $obj->cost += $product->cost * $product->qty;
    $obj->sell_price += $product->sell_price * $product->qty;
    $obj->weight += $product->weight * $product->qty;
  }
  $obj->model = rtrim($obj->model, '/ ');
  if (function_exists('image_load')){
    image_load($node);
  }
  return $obj;
}

/**
 * Implementation of hook_form().
 */
function uc_product_kit_form(&$node){
  $form = array();
  
  $result = db_query("SELECT nid, title FROM {node} WHERE type = 'product'");
  $products = array();
  while ($product = db_fetch_object($result)){
    $products[$product->nid] = $product->title;
  }
  
  $options = array(
    'model' => t('Model'),
    'list_price' => t('List Price'),
    'cost' => t('Cost'),
    'sell_price' => t('Sell Price'),
    'weight' => t('Weight'),
  );
  if (module_exists('image')){
    $options['image'] = t('Image');
  }
  $defaults = variable_get('uc_product_default_fields', array_keys($options));
  
  $form['title'] = array('#type' => 'textfield',
    '#title' => t('Name'),
    '#required' => TRUE,
    '#weight' => -5,
    '#default_value' => $node->title,
    '#description' => t('Name of the product kit')
  );
  $form['body'] = array('#type' => 'textarea',
    '#title' => t('Description'),
    '#required' => FALSE,
    '#weight' => -4,
    '#default_value' => $node->body,
    '#description' => t('Explain these whatchamacallits.'),
  );
  $form['products'] = array('#type' => 'select',
    '#multiple' => true,
    '#required' => true,
    '#title' => t('Products'),
    '#options' => $products,
    '#default_value' => isset($node->products) ? array_keys($node->products) : array(),
  );
  $form['items'] = array('#tree' => true);
  if (isset($node->products)){
    foreach ($node->products as $i => $product){
      $form['items'][$i]['qty'] = array('#type' => 'textfield',
        '#title' => $product->title . t(' Quantity'),
        '#default_value' => $product->qty,
        '#size' => 4,
      );
    }
  }
  if ($defaults['image']){
    $form['image'] = array('#type' => 'file',
      '#title' => t('Image file'),
      //'#default_value' => $node->images['_original'],
      '#description' => t('// Put size guidelines here.'),
      '#weight' => 5,
    );
  }
  
  return $form;
}

/**
 * Implementation of hook_view().
 */
function uc_product_kit_view($node, $teaser = 0, $page = 0){
  drupal_set_breadcrumb(array(l(t('Catalog'), 'catalog')));
  $content = theme('uc_product_kit', $node, $teaser);
  $node->content['body'] = array('#value' => $content);
  if ($teaser){
    $node->content['#attributes'] = array('style' => 'display: inline');
  }
  //print '<pre>'. print_r($node, true) .'</pre>';
  return $node;
}

/**
 * A modified version of theme_uc_product().
 *
 * @ingroup themeable
 */
function theme_uc_product_kit($node, $teaser){
  $output = '';
  $defaults = variable_get('uc_product_default_fields', array(
    'model' => 'model',
    'list_price' => 'list_price',
    'cost' => 'cost',
    'sell_price' => 'sell_price',
    'weight' => 'weight',
  ));
  $output .= '<div class="uc_product_view">';
  if ($defaults['image']){
    if (isset($node->images['_original']) && $node->images['_original'] != ''){
      $output .= theme('uc_product_image', $node->images, $teaser);
    }
  }
  if ($defaults['sell_price']){
    $output .= theme('uc_product_display_price', $node->sell_price);
  }
  if (!$teaser){
    if ($defaults['model']){
      $output .= theme('uc_product_model', $node->model);
    }
    $output .= '<p>'. $node->body .'</p>';
    if ($defaults['list_price']){
      $output .= theme('uc_product_price', $node->list_price, 'list_price');
    }
    if ($defaults['cost'] && user_access('administer products')){
      $output .= theme('uc_product_price', $node->cost, 'cost');
    }
  }
  if ($defaults['sell_price']){
    $output .= theme('uc_product_sell_price', $node->sell_price, $teaser);
  }
  if (!$teaser){
    if ($defaults['weight']){
      $output .= theme('uc_product_weight', $node->weight);
    }
    foreach ($node->products as $product){
      $output .= $product->qty .' x '. l($product->title, 'node/'. $product->nid);
      $output .= theme('uc_product_class', $product);
    }
    $output .= theme('uc_product_kit_add_to_cart', $node);
  }
  $output .= '</div>';
  return $output;
}

/**
 * Wrap the "Add to Cart" form in a <div>.
 *
 * @ingroup themeable
 */
function theme_uc_product_kit_add_to_cart($node){
  $output = '<div class="add_to_cart" title="'. t('Click to add to cart.') .'">';
  $output .= drupal_get_form('uc_product_kit_add_to_cart_form', $node);
  $output .= '</div>';
  return $output;
}

/**
 * Lets the cart know how many of which products are included in a kit.
 *
 * uc_attribute_form_alter hooks into this form to add attributes to each
 * element in $form['products'].
 */
function uc_product_kit_add_to_cart_form($node){
  $form = array();
  //$form['#form_id'] = array('#type' => 'value', '#value' => 'uc_product_add_to_cart_form');
  $form['nid'] = array('#type' => 'value', '#value' => $node->nid, );
  $form['products'] = array('#tree' => true);
  foreach ($node->products as $i => $product){
    $form['products'][$i] = array('#type' => 'fieldset', '#title' => $product->title);
    $form['products'][$i]['nid'] = array('#type' => 'hidden', '#value' => $product->nid);
    $form['products'][$i]['qty'] = array('#type' => 'hidden', '#value' => $product->qty);
  }
  $form['submit'] = array('#type' => 'submit', '#value' =>  t('Add to cart.'), );
  return $form;
}

/**
 * Submit function for uc_product_kit_add_to_cart_form().
 *
 * Iterates through the kit's product list and adds each to the cart in the
 * correct quantities.
 */
function uc_product_kit_add_to_cart_form_submit($form_id, $form_values){
  $unique = rand();
  foreach ($form_values['products'] as $product){
    $data = array('kit_id' => $form_values['nid'], 'unique_id' => $unique, 'module' => 'uc_product_kit');
    $return = uc_cart_add_item($product['nid'], $product['qty'], $data + module_invoke_all('add_to_cart_data', $product));
  }
  return $return;
}

/******************************************************************************
 * Ãœbercart Hooks                                                             *
 ******************************************************************************/

/**
 * Implementation of Ãœbercart's hook_cart_display().
 *
 * Displays either the kit as a whole, or each individual product based on the
 * store configuration. Each product in the cart that was added by uc_product_kit
 * was also given a unique kit id in order to help prevent collisions. The side
 * effect is that identical product kits are listed separately if added separately.
 * The customer may still change the quantity of kits like other products.
 *
 * @param $item
 *   An item in the shopping cart.
 * @return
 *   A form element array to be processed by uc_cart_view_form().
 */
function uc_product_kit_cart_display($item){
  static $element;
  static $products;
  $data = $item->data;
  $kit = node_load($data['kit_id']);
  //print '<pre>'. print_r($kit, true) .'</pre>';
  if (variable_get('uc_product_kit_mutable', false)){ // false is a default value, not being compared to
    return uc_product_cart_display($item);
  }
  else{
    if (!isset($products[$data['unique_id']])){
      // Initialize table row
      $element = array();
      $element['nid'] = array('#type' => 'value', '#value' => $kit->nid);
      $element['module'] = array('#type' => 'value', '#value' => 'uc_product_kit');
      $element['remove'] = array('#type' => 'checkbox');
      $element['options'] = array('#value' => "<ul class=\"cart_options\">\n");
      $element['title'] = array('#value' => l($kit->title, 'node/'. $kit->nid));
      $element['#total'] = $kit_discount; // TODO: Actually get a kit discount from somewhere
      // $kit->products indexed by node id, so $kit->products[0] doesn't exist.
      $element['qty'] = array(
        '#type' => 'textfield',
        '#default_value' => $item->qty / $kit->products[$item->nid]->qty,
        '#size' => 3,
        '#maxlength' => 3,
      );
    }
    // Add product specific information
    $op_names = '';
    foreach($item->options as $option){
      $op_names .= $option['name'] .', ';
    }
    $op_names = substr($op_names, 0, strlen($op_names) - 2);
    if ($op_names){
      $op_names = '-- '. $op_names;
    }
    $element['options']['#value'] .= '<li>'. $item->qty .' x '. l($item->title, 'node/'. $item->nid) ." <em>$op_names</em></li>\n";
    $element['data'][$item->nid] = $item;
    $element['#total'] += $item->price * $item->qty;
    $products[$data['unique_id']][] = $item->nid;
    // Check if all products in this kit have been accounted for.
    $done = true;
    foreach($kit->products as $product){
      if (!in_array($product->nid, $products[$data['unique_id']])){
        $done = false;
        break;
      }
    }
    if ($done){
      $element['data'] = array('#type' => 'value', '#value' => serialize($element['data']));
      $element['options']['#value'] .= "</ul>\n";
      unset($products[$data['unique_id']]);
      return $element;
    }
  }
  return array();
}

/**
 * Implementation of Ãœbercart's hook_update_cart_item().
 *
 * Handles individual products or kits.
 */
function uc_product_kit_update_cart_item($nid, $data = array(), $qty, $cid = null){
  if (!$nid) return NULL;
  $cid = !(is_null($cid) || empty($cid)) ? $cid : uc_cart_get_id();
  if ($qty < 1){
    foreach ($data as $p_nid => $product){
      uc_cart_remove_item($p_nid, $cid, $product->data);
    }
  }
  else{
    if (isset($data['kit_id'])){ // Product was listed individually
      uc_product_update_cart_item($nid, $data, $qty, $cid);
    }
    else{
      $kit = node_load($nid);
      foreach ($data as $p_nid => $product){
        uc_product_update_cart_item($p_nid, $product->data, $qty * $kit->products[$p_nid]->qty, $cid);
      }
    }
  }
}

/******************************************************************************
 * Menu Callbacks                                                             *
 ******************************************************************************/

/*function uc_product_kit_admin_settings(){
  $form = array();
  
  $form['uc_product_kit_mutable'] = array('#type' => 'radios',
    '#title' => t('Can product kits be modified after they are put in the cart?'),
    '#options' => array(t('No'), t('Yes')),
    '#default_value' => variable_get('uc_product_kit_mutable', 0),
  );
  
  return system_settings_form($form);
}*/

function uc_product_kit_form_alter($form_id, &$form) {
  if ($form_id == 'uc_product_settings') {
    $form['uc_product_kit_mutable'] = array('#type' => 'radios',
      '#title' => t('How are product kits handled by the cart?'),
      '#options' => array(t('As a unit. Customers may only change how many kits they are buying.'), t('As individual products. Customers may add or remove kit components at will.')),
      '#default_value' => variable_get('uc_product_kit_mutable', 0),
      '#weight' => -5,
    );
  }
}

/******************************************************************************
 * Module Functions                                                           *
 ******************************************************************************/
