<?php
// $Id: uc_product_kit.module,v 1.10 2007-11-05 20:32:00 rszrama Exp $

/**
 * @file
 * The product kit module for Ãœbercart.
 *
 * Product kits are groups of products that are sold as a unit.
 *
 * Coded by: Lyle Mantooth
 */

/******************************************************************************
 * Drupal Hooks                                                               *
 ******************************************************************************/

/**
 * Implementation of hook_access().
 */
function uc_product_kit_access($op, $node){
  global $user;
  
  switch ($op){
    case 'create':
      return user_access('create products');
    case 'update':
    case 'delete':
      if ($user->uid == $node->uid){
        return user_access('edit own products');
      }
      else{
        return user_access('edit products');
      }
  }
}

/**
 * Implementation of hook_insert().
 *
 * Add a row to {uc_products} to make a product. Extra information about the
 *   component products are stored in {uc_product_kits}.
 * @param &$node The node object being saved.
 * @see uc_product_insert
 */
function uc_product_kit_insert(&$node){
  $obj = new stdClass();
  $obj->vid = $node->vid;
  $obj->nid = $node->nid;
  $obj->model = '';
  $obj->list_price = 0;
  $obj->cost = 0;
  $obj->sell_price = 0;
  $obj->weight = 0;
  $obj->weight_units = variable_get('uc_weight_unit', 'lb');
  $obj->ordering = $node->ordering;

  $values = array();
  $placeholders = array();
  foreach ($node->products as $product){
    $values[] = $node->vid;
    $values[] = $node->nid;
    $values[] = $product;
    $values[] = $node->mutable;
    $values[] = 1;
    $placeholders[] = '(%d, %d, %d, %d, %d)';
    
    $product = node_load($product);
    $obj->model .= $product->model . ' / ';
    $obj->list_price += $product->list_price * $product->qty;
    $obj->cost += $product->cost * $product->qty;
    $obj->sell_price += $product->sell_price * $product->qty;
    $obj->weight += $product->weight * $product->qty * uc_weight_conversion($product->weight_units, $obj->weight_units);
  }
  db_query("INSERT INTO {uc_product_kits} (vid, nid, product_id, mutable, qty) VALUES ". implode(',', $placeholders), $values);
  $obj->model = rtrim($obj->model, ' / ');
  db_query("INSERT INTO {uc_products} (vid, nid, model, list_price, cost, sell_price, weight, weight_units, unique_hash, ordering) VALUES (%d, %d, '%s', %f, %f, %f, %f, '%s', '%s', %d)",
    $obj->vid, $obj->nid, $obj->model, $obj->list_price, $obj->cost, $obj->sell_price, $obj->weight, $obj->weight_units,
    md5($obj->vid . $obj->nid . $obj->model . $obj->list_price . $obj->cost . $obj->sell_price . $obj->weight . $obj->weight_units . $obj->ordering . time()),
    $obj->ordering
  );
}

/**
 * Implementation of hook_update().
 *
 * Updates information in {uc_products} as well as {uc_product_kits}. Because
 *   component products are known when the form is loaded, discount information
 *   can be input and saved.
 * @param &$node The node to be updated.
 * @see uc_product_update
 */
function uc_product_kit_update(&$node){
  $obj = new stdClass();
  $obj->vid = $node->vid;
  $obj->nid = $node->nid;
  $obj->model = '';
  $obj->list_price = 0;
  $obj->cost = 0;
  $obj->sell_price = 0;
  $obj->weight = 0;
  $obj->weight_units = variable_get('uc_weight_unit', 'lb');
  $obj->ordering = $node->ordering;
  
  $values = array();
  $placeholders = array();
  foreach ($node->products as $i => $product){
    $values[] = $node->vid;
    $values[] = $node->nid;
    $values[] = $product;
    $values[] = $node->mutable;
    $values[] = $node->items[$i]['qty'];
    $values[] = $node->items[$i]['discount'];
    $values[] = $node->items[$i]['ordering'];
    $placeholders[] = '(%d, %d, %d, %d, %d, %f, %d)';

    $product = node_load($product);
    $product->qty = $node->items[$i]['qty'];
    if ($node->items[$i]['discount'] !== ''){
      if ($node->items[$i]['discount'] < 0){
        $product->sell_price += $node->items[$i]['discount'];
      }
      else{
        $product->sell_price = $node->items[$i]['discount'];
      }
    }
    $obj->model .= $product->model . ' / ';
    $obj->list_price += $product->list_price * $product->qty;
    $obj->cost += $product->cost * $product->qty;
    $obj->sell_price += $product->sell_price * $product->qty;
    $obj->weight += $product->weight * $product->qty * uc_weight_conversion($product->weight_units, $obj->weight_units);
  }
  $obj->model = rtrim($obj->model, ' / ');
  if (!$node->revision){
    db_query("DELETE FROM {uc_product_kits} WHERE nid = %d", $node->nid);
  }
  db_query("INSERT INTO {uc_product_kits} (vid, nid, product_id, mutable, qty, discount, ordering) VALUES ". implode(',', $placeholders), $values);
  if ($node->revision){
    db_query("INSERT INTO {uc_products} (vid, nid, model, list_price, cost, sell_price, weight, weight_units, unique_hash, ordering) VALUES (%d, %d, '%s', %f, %f, %f, %f, '%s', '%s', %d)",
      $obj->vid, $obj->nid, $obj->model, $obj->list_price, $obj->cost, $obj->sell_price, $obj->weight, $obj->weight_units,
      md5($obj->vid . $obj->nid . $obj->model . $obj->list_price . $obj->cost . $obj->sell_price . $obj->weight . $obj->weight_units . $obj->ordering . time()),
      $obj->ordering
    );
  }
  else{
    db_query("UPDATE {uc_products} SET model = '%s', list_price = %f, cost = %f, sell_price = %f, weight = %f, weight_units = '%s', ordering = %d WHERE vid = %d",
      $obj->model, $obj->list_price, $obj->cost, $obj->sell_price, $obj->weight, $obj->weight_units, $obj->ordering, $obj->vid);
    if (!db_affected_rows()){
      db_query("INSERT INTO {uc_products} (vid, nid, model, list_price, cost, sell_price, weight, weight_units, unique_hash, ordering) VALUES (%d, %d, '%s', %f, %f, %f, %f, '%s', '%s', %d)",
        $obj->vid, $obj->nid, $obj->model, $obj->list_price, $obj->cost, $obj->sell_price, $obj->weight, $obj->weight_units,
        md5($obj->vid . $obj->nid . $obj->model . $obj->list_price . $obj->cost . $obj->sell_price . $obj->weight . $obj->weight_units . $obj->ordering . time()),
        $obj->ordering
      );
    }
  }
}

/**
 * Implementation of hook_delete().
 */
function uc_product_kit_delete(&$node){
  if (module_exists('uc_cart')){
    db_query("DELETE FROM {uc_cart_products} WHERE data LIKE '%%s:6:\"kit_id\";s:%d:\"%s\";%%'", strlen($node->nid), $node->nid);
  }
  db_query("DELETE FROM {uc_product_kits} WHERE nid = %d", $node->nid);
  db_query("DELETE FROM {uc_products} WHERE nid = %d", $node->nid);
}

/**
 * Implementation of hook_load().
 */
function uc_product_kit_load(&$node){
  $obj = new stdClass();

  $products = array();
  $result = db_query("SELECT product_id, mutable, qty, discount, ordering FROM {uc_product_kits} WHERE vid = %d ORDER BY ordering", $node->vid);
  while ($prod = db_fetch_object($result)){
    $obj->mutable = $prod->mutable;
    $product = node_load($prod->product_id);
    $product->qty = $prod->qty;
    $product->discount = $prod->discount;
    $product->ordering = $prod->ordering;
    $products[$prod->product_id] = $product;
  }
  uasort($products, '_uc_product_kit_sort_products');
  $obj->products = $products;
  if ($extra = uc_product_load($node)) {
    foreach ($extra as $key => $value) {
      $obj->$key = $value;
    }
  }

  return $obj;
}

/**
 * Register an "Add to Cart" form for each product kit.
 * @see uc_product_kit_add_to_cart_form
 * @see uc_catalog_buy_it_now_form
 */
function uc_product_kit_forms(){
  $products = db_query("SELECT DISTINCT nid FROM {uc_product_kits}");

  while ($prodrow = db_fetch_object($products)){
    $forms['uc_product_kit_add_to_cart_form_'. $prodrow->nid] = array('callback' => 'uc_product_kit_add_to_cart_form');
    $forms['uc_catalog_buy_it_now_form_'. $prodrow->nid] = array('callback' => 'uc_catalog_buy_it_now_form');
  }

  return $forms;
}

/**
 * Add product kit settings to the product settings form.
 */
function uc_product_kit_form_alter($form_id, &$form) {
  if ($form_id == 'uc_product_settings_form') {
    $form['uc_product_kit_mutable'] = array('#type' => 'radios',
      '#title' => t('How are product kits handled by the cart?'),
      '#options' => array(t('As a unit. Customers may only change how many kits they are buying.'), t('As individual products. Customers may add or remove kit components at will.')),
      '#default_value' => variable_get('uc_product_kit_mutable', 0),
      '#weight' => -5,
    );
  }
}

/**
 * Implementation of hook_form().
 *
 * @ingroup forms
 */
function uc_product_kit_form(&$node){
  $form = array();
  
  $form['title'] = array('#type' => 'textfield',
    '#title' => t('Name'),
    '#required' => TRUE,
    '#weight' => -5,
    '#default_value' => $node->title,
    '#description' => t('Name of the product kit')
  );
  $form['body'] = array('#type' => 'textarea',
    '#title' => t('Description'),
    '#required' => FALSE,
    '#weight' => -4,
    '#default_value' => $node->body,
    '#description' => t('Explain these whatchamacallits.'),
  );
  
  $product_types = uc_product_node_info();
  unset($product_types['product_kit']);
  $result = db_query("SELECT nid, title FROM {node} WHERE type IN ('". implode("','", array_keys($product_types)) ."')");
  $products = array();
  while ($product = db_fetch_object($result)){
    $products[$product->nid] = $product->title;
  }
  $form['base'] = array('#type' => 'fieldset',
    '#title' => t('Product Information'),
    '#collapsible' => true,
    '#collapsed' => false,
    '#weight' => -1,
    '#attributes' => array('class' => 'product-field'),
  );
  $form['base']['mutable'] = array('#type' => 'radios',
    '#title' => t('How is this product kit handled by the cart?'),
    '#options' => array(t('As a unit. Customers may only change how many kits they are buying.'), t('As individual products. Customers may add or remove kit components at will.')),
    '#default_value' => $node->mutable,
  );
  $form['base']['products'] = array('#type' => 'select',
    '#multiple' => true,
    '#required' => true,
    '#title' => t('Products'),
    '#options' => $products,
    '#default_value' => isset($node->products) ? array_keys($node->products) : array(),
  );
  $form['base']['items'] = array('#tree' => true);
  if (isset($node->products)){
    foreach ($node->products as $i => $product){
      $form['base']['items'][$i] = array('#type' => 'fieldset',
        //'#title' => $product->title,
      );
      $form['base']['items'][$i]['link'] = array('#type' => 'item',
        '#value' => l(t('@product', array('@product' => $product->title)), 'node/'. $i),
      );
      $form['base']['items'][$i]['qty'] = array('#type' => 'textfield',
        '#title' => t('Quantity'),
        '#default_value' => $product->qty,
        '#size' => 5,
      );
      $form['base']['items'][$i]['ordering'] = array('#type' => 'weight',
        '#title' => t('Ordering'),
        '#default_value' => $product->ordering,
      );
      $item = node_load($i);
      $form['base']['items'][$i]['discount'] = array('#type' => 'textfield',
        '#title' => t('Discount'),
        '#description' => t('Enter a negative value to lower the item price by that amount. Enter a postive value to set the item price to that amount. This discount is applied to each %product in the kit.', array('%product' => $product->title)),
        '#default_value' => (is_null($product->discount) || $product->discount === '' ? $item->sell_price : $product->discount),
        '#size' => 5,
      );
    }
  }
  $form['base']['ordering'] = array('#type' => 'weight',
    '#title' => t('List order'),
    '#delta' => 25,
    '#default_value' => $node->ordering,
    '#weight' => 30,
  );
  
  return $form;
}

/**
 * Implementation of hook_view().
 */
function uc_product_kit_view($node, $teaser = 0, $page = 0){
  $node = node_prepare($node, $teaser);
 
  $enabled = variable_get('uc_product_field_enabled', array(
    'image' => 1,
    'display_price' => 1,
    'model' => 1,
    'sell_price' => 1,
    'weight' => 1,
  ));
  $weight = variable_get('uc_product_field_weight', array(
    'image' => -2,
    'display_price' -1,
    'model' => 0,
    'list_price' => 2,
    'cost' => 3,
    'sell_price' => 4,
    'weight' => 5,
  ));
  
  //drupal_set_message('<pre>'. print_r($node->field_image_cache, true) .'</pre>');
  if (isset($node->field_image_cache) && file_exists($node->field_image_cache[0]['filepath'])){
    $node->content['image'] = array('#value' => theme('uc_product_image', $node->field_image_cache),
      '#access' => $enabled['image'] && module_exists('imagecache'),
      '#weight' => $weight['image'],
    );
  }
  $node->content['display_price'] = array('#value' => theme('uc_product_display_price', $node->sell_price),
    '#access' => $enabled['display_price'],
    '#weight' => $weight['display_price'],
  );
  if (!$teaser){
    $node->content['model'] = array('#value' => theme('uc_product_model', $node->model),
      '#access' => $enabled['model'],
      '#weight' => $weight['model'],
    );
    $node->content['body']['#weight'] = 1;
    $node->content['list_price'] = array('#value' => theme('uc_product_price', $node->list_price, 'list_price'),
      '#access' => $enabled['list_price'],
      '#weight' => $weight['list_price'],
    );
    $node->content['cost'] = array('#value' => theme('uc_product_price', $node->cost, 'cost'),
      '#access' => $enabled['cost'] && user_access('administer products'),
      '#weight' => $weight['cost'],
    );
  }
  else {
    $node->content['#attributes'] = array('style' => 'display: inline');
  }
  
  $node->content['sell_price'] = array('#value' => theme('uc_product_sell_price', $node->sell_price, $teaser),
    '#access' => $enabled['sell_price'],
    '#weight' => $weight['sell_price'],
  );
  
  if (!$teaser){
    $node->content['weight'] = array('#value' => theme('uc_product_weight', $node->weight, $node->weight_units),
      '#access' => $enabled['weight'],
      '#weight' => $weight['weight'],
    );
    $node->content['products'] = array('#weight' => 6);
    foreach ($node->products as $product){
      $node->content['products'][$product->nid]['qty'] = array('#value' => '<div class="product-qty">'. $product->qty .' x '. l($product->title, 'node/'. $product->nid) .'</div>');
      $node->content['products'][$product->nid]['#weight'] = $product->ordering;
    }
    $node->content['add_to_cart'] = array('#value' => theme('uc_product_kit_add_to_cart', $node),
      '#weight' => 10,
    );
  }
  else if (variable_get('uc_product_add_to_cart_teaser', true)){
    $node->content['add_to_cart'] = array('#value' => theme('uc_product_kit_add_to_cart', $node),
      '#weight' => 10,
    );
  }
  //print '<pre>'. print_r($node, true) .'</pre>';
  return $node;
}

/**
 * Wrap the "Add to Cart" form in a <div>.
 *
 * @ingroup themeable
 */
function theme_uc_product_kit_add_to_cart($node){
  $output = '<div class="add_to_cart" title="'. t('Click to add to cart.') .'">';
  $output .= drupal_get_form('uc_product_kit_add_to_cart_form_'. $node->nid, $node);
  $output .= '</div>';
  return $output;
}

/**
 * Lets the cart know how many of which products are included in a kit.
 *
 * uc_attribute_form_alter() hooks into this form to add attributes to each
 * element in $form['products'].
 * @ingroup forms
 * @see uc_product_kit_add_to_cart_form_submit
 */
function uc_product_kit_add_to_cart_form($node){
  $form = array();
  $form['#base'] = 'uc_product_kit_add_to_cart_form';
  $form['nid'] = array('#type' => 'value', '#value' => $node->nid, );
  $form['products'] = array('#tree' => true);
  foreach ($node->products as $i => $product){
    $form['products'][$i] = array(/* '#type' => 'fieldset',  */'#title' => $product->title);
    $form['products'][$i]['nid'] = array('#type' => 'hidden', '#value' => $product->nid);
    $form['products'][$i]['qty'] = array('#type' => 'hidden', '#value' => $product->qty);
  }
  $form['submit'] = array('#type' => 'submit', '#value' => variable_get('uc_product_add_to_cart_text', t('Add to cart')), );
  return $form;
}

/**
 * Submit function for uc_product_kit_add_to_cart_form().
 *
 * Iterates through the kit's product list and adds each to the cart in the
 * correct quantities.
 */
function uc_product_kit_add_to_cart_form_submit($form_id, $form_values){
  $unique = rand();
  foreach ($form_values['products'] as $product){
    $data = array('kit_id' => $form_values['nid'], 'unique_id' => $unique, 'module' => 'uc_product_kit');
    $return = uc_cart_add_item($product['nid'], $product['qty'], $data + module_invoke_all('add_to_cart_data', $product));
  }
  return $return;
}

/******************************************************************************
 * Ãœbercart Hooks                                                             *
 ******************************************************************************/

/**
 * Implementation of Ãœbercart's hook_product_info().
 *
 * @return Node type information for product kits.
 */
function uc_product_kit_product_info(){
  return array(
    'product_kit' => array(
      'name' => t('Product kit'),
      'module' => 'uc_product_kit',
      'description' => t('This node represents two or more products that have been listed together. This presents a logical and convenient grouping of items to the customer.'),
      'title_label' => t('Name'),
      'body_label' => t('Description'),
    ),
  );
}

/**
 * Implementation of Ãœbercart's hook_cart_item().
 */
function uc_product_kit_cart_item($op, &$item){
  switch ($op){
    case 'load':
      if (isset($item->data['kit_id']) && ($kit = node_load($item->data['kit_id'])) && !$kit->mutable){
        $kit_discount = $kit->products[$item->nid]->discount;
        if ($kit_discount !== ''){
          if ($kit_discount < 0){
            $item->price += $kit_discount;
          }
          else{
            $item->price += $kit_discount - $kit->products[$item->nid]->sell_price;
          }
        }
      }
    break;
  }
}

/**
 * Implementation of Ãœbercart's hook_cart_display().
 *
 * Displays either the kit as a whole, or each individual product based on the
 * store configuration. Each product in the cart that was added by uc_product_kit
 * was also given a unique kit id in order to help prevent collisions. The side
 * effect is that identical product kits are listed separately if added separately.
 * The customer may still change the quantity of kits like other products.
 *
 * @param $item
 *   An item in the shopping cart.
 * @return
 *   A form element array to be processed by uc_cart_view_form().
 */
function uc_product_kit_cart_display($item){
  static $element;
  static $products;
  $data = $item->data;
  $kit = node_load($data['kit_id']);
  //print '<pre>'. print_r($kit, true) .'</pre>';
  if ($kit->mutable){
    return uc_product_cart_display($item);
  }
  else{
    if (!isset($products[$data['unique_id']])){
      // Initialize table row
      $element = array();
      $element['nid'] = array('#type' => 'value', '#value' => $kit->nid);
      $element['module'] = array('#type' => 'value', '#value' => 'uc_product_kit');
      $element['remove'] = array('#type' => 'checkbox');
      $element['options'] = array('#value' => "<ul class=\"cart_options\">\n");
      $element['title'] = array('#value' => l($kit->title, 'node/'. $kit->nid));
      $element['#total'] = 0;
      $element['qty'] = array(
        '#type' => 'textfield',
        '#default_value' => $item->qty / $kit->products[$item->nid]->qty,
        '#size' => 3,
        '#maxlength' => 3,
      );
    }
    // Add product specific information
    $op_names = '';
    foreach($item->options as $option){
      $op_names .= $option['name'] .', ';
    }
    $op_names = substr($op_names, 0, strlen($op_names) - 2);
    if ($op_names){
      $op_names = '-- '. $op_names;
    }
    $element['options']['#value'] .= '<li>'. $item->qty .' x '. l($item->title, 'node/'. $item->nid) ." <em>$op_names</em></li>\n";
    $element['#total'] += $item->price * $item->qty;
    $element['data'][$item->nid] = $item;
    $products[$data['unique_id']][] = $item->nid;
    // Check if all products in this kit have been accounted for.
    $done = true;
    foreach($kit->products as $product){
      if (!in_array($product->nid, $products[$data['unique_id']])){
        $done = false;
        break;
      }
    }
    if ($done){
      $element['data'] = array('#type' => 'value', '#value' => serialize($element['data']));
      $element['options']['#value'] .= "</ul>\n";
      unset($products[$data['unique_id']]);
      return $element;
    }
  }
  return array();
}

/**
 * Implementation of Ãœbercart's hook_update_cart_item().
 *
 * Handles individual products or entire kits.
 */
function uc_product_kit_update_cart_item($nid, $data = array(), $qty, $cid = null){
  if (!$nid) return NULL;
  $cid = !(is_null($cid) || empty($cid)) ? $cid : uc_cart_get_id();
  if ($qty < 1){
    foreach ($data as $p_nid => $product){
      uc_cart_remove_item($p_nid, $cid, $product->data);
    }
  }
  else{
    if (isset($data['kit_id'])){ // Product was listed individually
      uc_product_update_cart_item($nid, $data, $qty, $cid);
    }
    else{
      $kit = node_load($nid);
      foreach ($data as $p_nid => $product){
        uc_product_update_cart_item($p_nid, $product->data, $qty * $kit->products[$p_nid]->qty, $cid);
      }
    }
  }
}

/**
 * usort() callback.
 */
function _uc_product_kit_sort_products($a, $b){
  if ($a->ordering == $b->ordering){
    return 0;
  }
  else{
    return ($a->ordering < $b->ordering) ? -1 : 1;
  }
}
