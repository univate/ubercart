<?php
// $Id: uc_store.module,v 1.6 2007-05-08 21:13:24 rszrama Exp $

/**
 * @file
 * Contains global Ubercart functions and store administration functionality.
 *
 * The store module is a container of sorts for various helper functions used
 * in different parts of the Ubercart core.  It also provides screens and
 * settings pages for use in store administration.
 *
 * Development sponsored by the Ubercart project.  http://www.ubercart.org
 */

/*******************************************************************************
 * Hook Functions (Drupal)
 ******************************************************************************/

/**
 * Implementation of hook_menu().
 */
function uc_store_menu($may_cache) {
  $items = array();

  if ($may_cache) {
    $items[] = array(
      'path' => 'admin/store',
      'title' => t('Store administration'),
      'description' => t('Administer store settings, products, orders, and more.'),
      'callback' => 'uc_store_admin',
      'access' => user_access('administer store'),
      'type' => MENU_NORMAL_ITEM,
    );
    $items[] = array(
      'path' => 'admin/store/customers',
      'title' => t('Customers'),
      'description' => t('View and modify customer information and orders.'),
      'callback' => 'uc_store_customers',
      'callback arguments' => array(NULL, NULL, NULL, 25),
      'access' => user_access('view customers'),
      'weight' => -6,
      'type' => MENU_NORMAL_ITEM,
    );
    $items[] = array(
      'path' => 'admin/store/customers/view',
      'title' => t('View customers'),
      'description' => t('View and modify customer information and orders.'),
      'callback arguments' => array(NULL, NULL, NULL, 25),
      'access' => user_access('view customers'),
      'weight' => -10,
      'type' => MENU_NORMAL_ITEM,
    );
    $items[] = array(
      'path' => 'admin/store/customers/search',
      'title' => t('Search customers'),
      'description' => t('Search through your customer list.'),
      'callback' => 'uc_store_customer_search',
      'access' => user_access('view customers'),
      'weight' => -5,
      'type' => MENU_NORMAL_ITEM,
    );
    $items[] = array(
      'path' => 'admin/store/reports',
      'title' => t('Reports'),
      'description' => t('Browse various store reports.'),
      'callback' => 'uc_store_reports',
      'access' => user_access('view store reports'),
      'weight' => 2,
      'type' => MENU_NORMAL_ITEM,
    );
    $items[] = array(
      'path' => 'admin/store/settings',
      'title' => t('Configuration'),
      'description' => t('Adjust configuration settings for Ubercart.'),
      'callback' => 'uc_store_configuration',
      'access' => user_access('administer store'),
      'weight' => 6,
      'type' => MENU_NORMAL_ITEM,
    );
    $items[] = array(
      'path' => 'admin/store/help',
      'title' => t('Help'),
      'description' => t('Links to get help!'),
      'callback' => 'uc_store_ubercart_help',
      'access' => user_access('administer store'),
      'weight' => 10,
      'type' => MENU_NORMAL_ITEM,
    );
    $items[] = array(
      'path' => 'admin/store/settings/countries',
      'title' => t('Country settings'),
      'callback' => 'drupal_get_form',
      'callback arguments' => array('uc_country_settings'),
      'access' => user_access('administer store'),
      'description' => t('Configure country specific settings.'),
      'type' => MENU_NORMAL_ITEM,
    );
    $items[] = array(
      'path' => 'admin/store/settings/store',
      'title' => t('Store settings'),
      'callback' => 'drupal_get_form',
      'callback arguments' => array('uc_store_settings'),
      'access' => user_access('administer store'),
      'description' => t('Configure the main store settings.'),
      'type' => MENU_NORMAL_ITEM,
    );
    $items[] = array(
      'path' => 'admin/store/settings/store/initials',
      'title' => t('User initials'),
      'callback' => 'drupal_get_form',
      'callback arguments' => array('uc_store_initials'),
      'access' => user_access('administer store'),
      'description' => t('Assign initials to user accounts.'),
      'type' => MENU_NORMAL_ITEM,
    );
    $items[] = array(
      'path' => 'admin/store/settings/store/census',
      'title' => t('Census settings'),
      'callback' => 'drupal_get_form',
      'callback arguments' => array('uc_store_census_settings'),
      'access' => user_access('administer store'),
      'description' => t('Control information reported to www.ubercart.org.'),
      'type' => MENU_NORMAL_ITEM,
    );
    $items[] = array(
      'path' => 'admin/store/settings/tables',
      'title' => t('Table display settings'),
      'callback' => 'uc_store_tables',
      'access' => user_access('administer store'),
      'description' => t('Configure the display of tables in your store.'),
      'type' => MENU_NORMAL_ITEM,
    );
  }
  else {
    $items[] = array(
      'path' => 'uc_js_util/'. arg(1),
      'title' => t('JS utilities'),
      'callback' => 'uc_store_js_util',
      'callback arguments' => array(arg(1)),
      'access' => user_access('access content'),
      'type' => MENU_CALLBACK,
    );
    if (arg(2) == 'customers') {
      $items[] = array(
        'path' => 'admin/store/customers/orders/'. arg(4),
        'title' => t('Customer orders'),
        'callback' => 'uc_store_customer_orders',
        'callback arguments' => array(intval(arg(4))),
        'description' => t('View a list of orders placed by this customer.'),
        'access' => user_access('view all orders'),
        'weight' => -5,
        'type' => MENU_CALLBACK,
      );
    }
    if (is_numeric(arg(4))) {
      $items[] = array(
        'path' => 'admin/store/settings/countries/'. arg(4) .'/disable',
        'title' => t('Disable a country'),
        'description' => t('Disable a country from use.'),
        'callback' => 'uc_country_disable',
        'callback arguments' => array(arg(4)),
        'access' => user_access('administer store'),
        'type' => MENU_CALLBACK,
      );
      $items[] = array(
        'path' => 'admin/store/settings/countries/'. arg(4) .'/enable',
        'title' => t('Enable a country'),
        'description' => t('Enable a disabled country.'),
        'callback' => 'uc_country_enable',
        'callback arguments' => array(arg(4)),
        'access' => user_access('administer store'),
        'type' => MENU_CALLBACK,
      );
      $items[] = array(
        'path' => 'admin/store/settings/countries/'. arg(4) .'/remove',
        'title' => t('Remove a country'),
        'description' => t('Remove an installed country.'),
        'callback' => 'drupal_get_form',
        'callback arguments' => array('uc_country_remove_form', arg(4)),
        'access' => user_access('administer store'),
        'type' => MENU_CALLBACK,
      );
      $items[] = array(
        'path' => 'admin/store/settings/countries/'. arg(4) .'/update/'. arg(6),
        'title' => t('Update a country'),
        'description' => t('Update an installed country.'),
        'callback' => 'uc_country_update',
        'callback arguments' => array(arg(4), arg(6)),
        'access' => user_access('administer store'),
        'type' => MENU_CALLBACK,
      );
    }
  }

  return $items;
}

function uc_store_help($section){
  switch ($section){
    case 'admin/store/settings/store/census':
      $output = t('Ubercart reports to www.ubercart.org once a day to provide update reminders and security alerts. It is neccessary to provide at least module versions in order to prevent monetary losses from security vulnerabilites. Additional optional information may also be sent to calculate statistical data.');
  }
  return $output;
}
 
/**
 * Implementation of hook_cron().
 */
function uc_store_cron(){
  if (variable_get('uc_store_opt_in', 1)){
    $prev_time = variable_get('uc_store_prev_time', 0);
    $later = strtotime("tomorrow", $prev_time);
    if (time() > $later){ // Run updates once a day.
      $vars = array();
      $vars['site_id'] = variable_get('uc_store_site_id', null);
      if (variable_get('uc_store_opt_in_hostname', 1)){
        $vars['server_name'] = $_SERVER['SERVER_NAME'];
      }
      $vars['php_version'] = PHP_VERSION;
      $vars['drupal_version'] = VERSION;
      $vars['db_type'] = $GLOBALS['db_type'];
      $vars['db_version'] = db_version();
      if (variable_get('uc_store_opt_in_modules', 1)){
        $result = db_query("SELECT name, filename FROM {system} WHERE type = 'module' AND status = 1 ORDER BY filename ASC");
        while ($module = db_fetch_object($result)){
          $info = _module_parse_info_file(dirname($module->filename) .'/'. $module->name .'.info');
          $return = array('name' => $module->name);
          if (isset($info['version'])){
            $return['version'] = $info['version'];
            if ($module->name == 'uc_store'){
              $vars['ubercart_version'] = $info['version'];
            }
          }
          else if (defined(drupal_strtoupper($module) .'_VERSION')){
            $return['version'] = constant(drupal_strtoupper($module) .'_VERSION');
          }
          $vars['modules'][] = $return;
        }
      }
        
      $result = db_query("SELECT COUNT(DISTINCT o.order_id) AS orders, SUM(o.order_total) AS sales FROM {uc_orders} AS o WHERE o.order_status = 4 GROUP BY o.order_status");
      if ($stats = db_fetch_array($result)){
        if (variable_get('uc_store_opt_in_orders', 1)){
          $vars['orders'] = $stats['orders'];
        }
        if (variable_get('uc_store_opt_in_sales', 1)){
          $vars['sales'] = $stats['sales'];
        }
      }
      $result = db_query("SELECT SUM(op.qty) AS products FROM {uc_order_products} AS op LEFT JOIN {uc_orders} AS o ON op.order_id = o.order_id WHERE o.order_status = 4 GROUP BY o.order_status");
      if ($stats = db_fetch_array($result)){
        if (variable_get('uc_store_opt_in_products', 1)){
          $vars['products'] = $stats['products'];
        }
      }
    }
    variable_set('uc_store_prev_time', $later - 10);
    $response = drupal_http_request('http://www.ubercart.org/statistics/gather', array('Content-Type' => 'application/x-www-form-urlencoded'), 'POST', drupal_query_string_encode($vars));
    $sid = $response->data;
    variable_set('uc_store_site_id', $sid);
  }
}

/**
 * Implementation of hook_block().
 */
function uc_store_block($op = 'list', $delta = 0, $edit = array()) {
  if ($op == 'list') {
    $blocks[0]['info'] = t('Store Links');
    return $blocks;
  }
  else if ($op == 'view') {
    switch($delta) {
      case 0:
        if (!user_access('administer store')) {
          break;
        }

        drupal_add_js(drupal_get_path('module', 'uc_store') .'/uc_store.js');

        $menu = menu_get_item(null, 'admin/store');
        $output = '<ul id="store-links">'. "\n";
        $output .= theme('uc_store_block_links', $menu);
        $output .= "</ul>\n";
        $block['subject'] = t('Store Links');
        $block['content'] = $output . '<br class="clear" /><br />';
        break;
    }
    return $block;
  }
}

/**
 * Implementation of hook_perm().
 */
function uc_store_perm() {
  return array('administer store', 'view customers', 'view store reports');
}

function uc_store_footer($main = 0){
  drupal_add_css(drupal_get_path('module', 'uc_store') .'/uc_store.css');
  $path = drupal_get_normal_path($_GET['q']);
  $parts = explode('/', $path);
  switch ($parts[0]){
    case 'admin':
      if ($parts[1] != 'store'){
        break;
      }
      // else fall through
    case 'node':
      if (is_numeric($parts[1]) && $node = node_load($parts[1])){
        if (function_exists('uc_catalog_node_types') && !in_array($node->type, uc_catalog_node_types())){
          break;
        }
        // else fall through
      }
    case 'catalog':
    case 'cart':
    case 'manufacturer':
      return '<div id="store-footer">'. t('E-commerce powered by Ubercart, the <a href="!url">free e-commerce shopping cart software.</a>', array('!url' => 'http://www.ubercart.org/')) .'</div>';
  }
}

/******************************************************************************
 * Übercart Hooks                                                             *
 ******************************************************************************/

/* function uc_store_store_status(){
  $updates = variable_get('uc_store_updates', array());
  $list = '';
  foreach ($updates as $update){
    $list .= '<li>'. $update['module'] .': '. $update['version'] .'</li>';
  }
  if (strlen($list)){
    $status = 'warning';
    $message = t('The following modules have newer versions available at <a href="http://www.ubercart.org/">Ubercart.org</a>. Please update your Übercart files.!list', array('!list' => '<ul>'. $list .'</ul>'));
  }
  else{
    $status = 'ok';
    $message = t('All &Uuml;bercart modules are up to date.');
  }
  $statuses[] = array('status' => $status, 'title' => t('Module Versions'), 'desc' => $message);
  
  return $statuses;
} */

/******************************************************************************
 * Callback Functions, Forms, and Tables
 ******************************************************************************/

function uc_store_admin() {
  drupal_add_js(drupal_get_path('module', 'uc_store') .'/uc_store.js', 'module');
  drupal_add_js("var text_show = '". t('- Show links -') ."';\nvar text_hide = '". t('- Hide links -') ."';\n", 'inline');

  $main_menu = menu_get_item(NULL, 'admin/store');
  usort($main_menu['children'], '_menu_sort');
  foreach ($main_menu['children'] as $mid) {
    if ($mid > 0) {
      $submenu[] = menu_get_item($mid);
    }
  }

  $output = '<table class="uc-store-admin-table" align="center"><tr valign="top">';

  $panels = 0;
  if (is_array($submenu)) {
    if (variable_get('uc_store_display_links', TRUE)) {
      $disp = '';
      $title = t('- Hide links -');
    }
    else {
      $disp = 'display: none;';
      $title = t('- Show links -');
    }
    foreach ($submenu as $menu) {
      $panel++;
      if ($panel % 4 == 0) {
        $output .= '</tr><tr valign="top">';
      }
      $panel_title = $menu['title'];
      $panel_links = theme('admin_block_content', system_admin_menu_block($menu));
      $panel_table = '<table width="100%"><tr>'
                    .'<td>'. l(uc_store_get_icon($menu['path']), $menu['path'],
                               array(), NULL, NULL, FALSE, TRUE) .'</td>'
                    .'<td class="panel-title">'. l($menu['title'], $menu['path'])
                    .'</td></tr>';
      if (strlen($panel_links) > 0) {
        $panel_table .= '<tr><td nowrap colspan="2" class="panel-links" style="'. $disp .'">'
                     . $panel_links .'</td></tr><tr>'
                      .'<td align="center" colspan="2" class="panel-show-link" '
                      .'id="show-links-'. $panel .'"><a>'. $title
                      .'</a></td></tr>';
      }
      $panel_table .= '</table>';
      $output .= '<td class="uc-store-admin-panel" id="panel-'. $panel .'">'
               . $panel_table .'</td>';
    }
  }
  $output .= '</tr></table>';

  $results = module_invoke_all('store_status');

  foreach ($results as $message) {
    switch ($message['status']) {
      case 'warning':
        $icon = base_path() . drupal_get_path('module', 'uc_store') .'/images/alert.gif';
        break;
      case 'error':
        $icon = base_path() . drupal_get_path('module', 'uc_store') .'/images/error.gif';
        break;
      case 'ok':
      default:
        $icon = base_path() . drupal_get_path('module', 'uc_store') .'/images/info.gif';
    }
      
    $rows[] = array('data' => array(
      array('data' => '<img src="'. $icon .'" />'),
      array('data' => '<strong>'. $message['title'] .'</strong>', 'nowrap' => 'nowrap'),
      array('data' => $message['desc'], 'width' => '100%')), 'valign' => 'top');
  }

  $header = array('&nbsp;', t('Title'), t('Description'));

  $output .= '<div style="clear: both;"><h2>'. t('Status messages:') .'</h2>'
           . theme_table($header, $rows) .'</div>';

  return $output;
}

/**
 * Display customer administration page.
 */
function uc_store_customers($message = NULL, $query = NULL, $count_query = NULL, $page_length = 25) {
  if (is_null($query)) {
    $query = "SELECT DISTINCT o.uid, u.mail, o.billing_first_name,"
            ."o.billing_last_name, o.billing_city, o.billing_zone, "
            ."o.billing_country FROM {uc_orders} AS o LEFT JOIN "
            ."{users} AS u ON o.uid = u.uid WHERE o.uid > 0 AND "
            ."o.order_status > 0 ORDER BY billing_last_name ASC";
    $count_query = "SELECT COUNT(DISTINCT o.uid, o.billing_first_name, "
                  ."o.billing_last_name, u.mail) FROM {uc_orders} AS o "
                  ."LEFT JOIN {users} AS u ON o.uid = u.uid WHERE o.uid > 0 "
                  ."AND o.order_status > 0 ORDER BY billing_last_name ASC";
    $message = t('The following users on your site have placed orders:');
  }

  $address = variable_get('uc_customer_list_address', 'billing');
  if ($address == 'shipping') {
      $query = str_replace('billing', 'delivery', $query);
      $count_query = str_replace('billing', 'delivery', $count_query);
  }
  else {
    $address = 'billing';
  }

  $result = pager_query($query, $page_length, 0, $count_query);

  $header = array(t('View'), t('Name'), t('E-mail'), t('City'), t('ID'));

  while ($customer = db_fetch_object($result)) {
    $icons = l(uc_store_get_icon('admin/store/customers', TRUE),
               'user/'. $customer->uid, array('title' => t('View user details.')),
               NULL, NULL, FALSE, TRUE)
           . l(uc_store_get_icon('admin/store/orders', TRUE),
               'admin/store/customers/orders/'. $customer->uid,
               array('title' => t("View customer's order.")), NULL, NULL, FALSE, TRUE);
    if ($address == 'shipping') {
      $name = ucfirst($customer->delivery_last_name) .', '
            . ucfirst($customer->delivery_first_name);
      $city = ucfirst($customer->delivery_city) .', '
            . uc_get_zone_code($customer->delivery_zone);
    }
    else {
      $name = ucfirst($customer->billing_last_name) .', '
            . ucfirst($customer->billing_first_name);
      $city = ucfirst($customer->billing_city) .', '
            . uc_get_zone_code($customer->billing_zone);
    }
    $rows[] = array(
      'data' => array(
        array('data' => $icons),
        array('data' => $name),
        array('data' => $customer->mail),
        array('data' => $city),
        array('data' => $customer->uid)),
      'id' => 'customer-'. $customer->uid,
    );
  }

  drupal_add_js(drupal_get_path('module', 'uc_store') .'/uc_store.js');
  uc_add_base_path_js();
  $output = '<p>'. $message .'</p>'
          . theme_table($header, $rows, array('width' => '100%', 'class' => 'uc-customer-table'))
           .'<br />'. theme_pager(NULL, $page_length);

  return $output;
}

function uc_store_customer_orders($uid) {
  $result = pager_query("SELECT * FROM {uc_orders} WHERE uid = %d AND "
                       ."order_status > 0 ORDER BY created DESC", 50, 0,
                        NULL, $uid);

  $header = array(t('View'), t('Order ID'), t('Date'), t('Billing Name'),
                  t('Shipping Name'), t('Items'), t('Total'));

  if (db_num_rows($result) == 0) {
    $rows[] = array(
      array('data' => t('No orders found.'), 'colspan' => 7)
    );
  }
  else {
    $totals = array('orders' => 0, 'items' => 0, 'total' => 0);
    while ($order = db_fetch_object($result)) {
      $icons = l(uc_store_get_icon('file:order_view'),
                 'admin/store/orders/'. $order->order_id,
                 array('title' => t("View order !order_id.",
                       array('!order_id' => $order->order_id))),
                 NULL, NULL, FALSE, TRUE)
             . l(uc_store_get_icon('file:order_edit'),
                 'admin/store/orders/'. $order->order_id .'/edit',
                 array('title' => t("Edit order !order_id.",
                       array('!order_id' => $order->order_id))),
                 NULL, NULL, FALSE, TRUE);
      $bname = ucfirst($order->billing_first_name) .' '
             . ucfirst($order->billing_last_name);
      $sname = ucfirst($order->delivery_first_name) .' '
             . ucfirst($order->delivery_last_name);
      $result2 = db_query("SELECT COUNT(*) FROM {uc_order_products} WHERE "
                         ."order_id = %d", $order->order_id);
      $item_count = db_fetch_array($result2);

      $totals['orders'] += 1;
      $totals['items'] += $item_count['COUNT(*)'];
      $totals['total'] += $order->order_total;

      $rows[] = array(
        'data' => array(
          array('data' => $icons),
          array('data' => $order->order_id),
          array('data' => date('m/d/Y', $order->created)),
          array('data' => $bname),
          array('data' => $sname),
          array('data' => $item_count['COUNT(*)']),
          array('data' => uc_currency_format($order->order_total))),
        'id' => 'order-'. $order->order_id,
      );
    }
  }

  drupal_add_js(drupal_get_path('module', 'uc_store') .'/uc_store.js');
  uc_add_base_path_js();
  $output = '<p>'. l(t('Create an order for this customer.'),
                     'admin/store/orders/create/'. $uid) .'</p>';
  $output .= '<p>'. t('!totals_orders orders shown match that account with !totals_items items purchased and !totals_total spent:',
                     array('!totals_orders' => $totals['orders'],
                           '!totals_items' => $totals['items'],
                           '!totals_total' => uc_currency_format($totals['total']))) .'</p>'
           . theme_table($header, $rows, array('width' => '100%', 'class' => 'uc-cust-orders-table'))
            .'<br />'. theme_pager(NULL, 50);

  return $output;
}

/**
 * Display the customer search page.
 */
function uc_store_customer_search() {
  $output = drupal_get_form('uc_store_customer_search_form');

  if (arg(4) == 'results') {
    $first_name = str_replace('*', '%', check_plain(arg(5)));
    $last_name = str_replace('*', '%', check_plain(arg(6)));
    $email = str_replace('*', '%', check_plain(arg(7)));

    if ($first_name !== '0' && $first_name !== '%') {
      $where .= " AND o.billing_first_name LIKE '". $first_name ."'";
    }
    if ($last_name !== '0' && $last_name !== '%') {
      $where .= " AND o.billing_last_name LIKE '". $last_name ."'";
    }
    if ($email !== '0' && $email !== '%') {
      $where .= " AND o.primary_email LIKE '". $email ."'";
    }

    $query = "SELECT DISTINCT o.uid, u.mail, o.billing_first_name,"
            ."o.billing_last_name, o.billing_city, o.billing_zone, "
            ."o.billing_country FROM {uc_orders} AS o LEFT JOIN "
            ."{users} AS u ON o.uid = u.uid WHERE o.uid > 0 AND "
            ."o.order_status > 0". $where ." ORDER BY o.billing_last_name ASC";
    $count_query = "SELECT COUNT(DISTINCT o.uid, o.billing_first_name, "
                  ."o.billing_last_name, u.mail) FROM {uc_orders} AS o "
                  ."LEFT JOIN {users} AS u ON o.uid = u.uid WHERE o.uid > 0 AND "
                  ."o.order_status > 0". $where ." ORDER BY o.billing_last_name ASC";
    $message = t('Search returned the following results:');

    $output .= uc_store_customers($message, $query, $count_query, 100);
  }

  return $output;
}

function uc_store_customer_search_form() {
  $form['search'] = array(
    '#type' => 'fieldset',
    '#title' => t('Search options'),
    '#collapsible' => TRUE,
    '#collapsed' => arg(4) == 'results' ? TRUE : FALSE,
  );

  $form['search']['table1'] = array('#value' => '<table><tr><td colspan="4">');

  $form['search']['desc'] = array(
    '#value' => '<div>'. t("Search for customers based on any of the following fields.  Use * as a wildcard to match any character.<br/>For example, searching by last name for 's*' will return all customers whose last name starts with an s.<br/>(<em>Leave a field empty to ignore it in the search.</em>)"). '</div>',
  );

  $form['search']['table2'] = array('#value' => '</td></tr><tr><td>');

  $form['search']['first_name'] = array(
    '#type' => 'textfield',
    '#title' => t('First name'),
    '#default_value' => arg(5) != '0' ? arg(5) : '',
    '#size' => 24,
    '#maxlength' => 32,
  );

  $form['search']['table3'] = array('#value' => '</td><td>');

  $form['search']['last_name'] = array(
    '#type' => 'textfield',
    '#title' => t('Last name'),
    '#default_value' => arg(6) != '0' ? arg(6) : '',
    '#size' => 24,
    '#maxlength' => 32,
  );

  $form['search']['table4'] = array('#value' => '</td><td>');

  $form['search']['email'] = array(
    '#type' => 'textfield',
    '#title' => t('E-mail'),
    '#default_value' => arg(7) != '0' ? arg(7) : '',
    '#size' => 24,
    '#maxlength' => 96,
  );

  $form['search']['table5'] = array('#value' => '</td><td>');

  $form['search']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Search'),
  );

  $form['search']['table6'] = array('#value' => '</td></tr></table>');

  return $form;
}

function uc_store_customer_search_form_submit($form_id, $form_values) {
  if (strlen(trim($form_values['first_name'])) == 0) {
    $first_name = '0';
  }
  else {
    $first_name = strtolower(trim($form_values['first_name']));
  }

  if (strlen(trim($form_values['last_name'])) == 0) {
    $last_name = '0';
  }
  else {
    $last_name = strtolower(trim($form_values['last_name']));
  }

  if (strlen(trim($form_values['email'])) == 0) {
    $email = '0';
  }
  else {
    $email = strtolower(trim($form_values['email']));
  }

  drupal_goto('admin/store/customers/search/results/'. $first_name .'/'
            . $last_name .'/'. $email);
}

/**
 * Display main reports page.
 */
function uc_store_reports() {
  $output = "Display report list here.";

  return $output;
}

/**
 * Display store configuration page.
 */
function uc_store_configuration() {
  $menu = menu_get_item(NULL, 'admin/store/settings');
  $content = system_admin_menu_block($menu);

  $output = theme('admin_block_content', $content);

  return $output;
}

/**
 * Display store help page.
 */
function uc_store_ubercart_help() {
  $output = '<p>'. t('Use the following links to find documentation and support:') .'</p>';

  $items[] = l(t("Ubercart User's Guide"), 'http://www.ubercart.org/ubercart_users_guide');
  $items[] = l(t('Support Forums'), 'http://www.ubercart.org/forum');
  $items[] = l(t('Drupal Handbook'), 'http://drupal.org/node/258');
  $output .= theme_item_list($items);

  return $output;
}

/**
 * Form for country settings page.
 */
function uc_country_settings() {
  $result = db_query("SELECT * FROM {uc_countries} ORDER BY country_name ASC");
  while ($country = db_fetch_object($result)) {
    $countries[] = $country;
  }
  $files = _country_import_list();

  $header = array(t('Country'), t('Code'), t('Version'), t('Operations'));
  if (is_array($countries)) {
    foreach ($countries as $country) {
      $row = array(
        $country->country_name,
        $country->country_iso_code_3,
        array('data' => $country->version, 'align' => 'center')
      );
  
      $ops = array();
      if ($country->version < 0) {
        $ops[] = l(t('enable'), 'admin/store/settings/countries/'. $country->country_id .'/enable');
      }
      else {
        $ops[] = l(t('disable'), 'admin/store/settings/countries/'. $country->country_id .'/disable');
      }
      if ($country->version < $files[$country->country_id]['version'] && $country->version > 0) {
        $ops[] = l(t('update'), 'admin/store/settings/countries/'. $country->country_id .'/update/'. $files[$country->country_id]['version']);
      }
      $ops[] = l(t('remove'), 'admin/store/settings/countries/'. $country->country_id .'/remove');
      $row[] = implode(' ', $ops);
  
      $rows[] = $row;
      unset($files[$country->country_id]);
    }
  }

  foreach ($files as $file) {
    $import_list[$file['file']] = $file['file'];
  }

  $form['import'] = array(
    '#type' => 'fieldset',
    '#title' => t('Imported countries'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
  );
  $form['import']['text'] = array(
    '#value' => '<div><p>'. theme('table', $header, $rows) .'</p><br><p>'
              . t('To import new country data, make sure the file has been placed in the<br>Ubercart folder uc_store/countries, select it in the list, and click <em>Import</em>:') .'</p></div>',
  );
  $form['import']['table1'] = array('#value' => '<table cellpadding="2" style="width: auto;"><tbody style="border-top: 0px;"><tr><td><b>'. t('Country:') .'</b></td><td>');
  $form['import']['import_file'] = array(
    '#type' => 'select',
    '#options' => is_array($import_list) ? $import_list : array(t('-None available-')),
  );
  $form['import']['table2'] = array('#value' => '</td><td>');
  $form['import']['import_button'] = array(
    '#type' => 'submit',
    '#value' => t('Import'),
    '#disabled' => is_array($import_list) ? FALSE : TRUE,
  );
  $form['import']['table3'] = array('#value' => '</td></tr></tbody></table>');

  $form['instructions'] = array(
    '#type' => 'fieldset',
    '#title' => t('Address variables instructions'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );
  $header = array(t('Variable'), t('Description'));
  $rows = array(
    array('!first_name', t("customer's first name")),
    array('!last_name', t("customer's last name")),
    array('!company', t('company name')),
    array('!street1', t('first street address field')),
    array('!street2', t('second street address field')),
    array('!city', t('city name')),
    array('!zone_name', t('full name of the zone')),
    array('!zone_code', t('abbreviation of the zone')),
    array('!postal_code', t('postal code')),
    array('!country_name', t('name of the country')),
    array('!country_code2', t('2 digit country abbreviation')),
    array('!country_code3', t('3 digit country abbreviation')),
  );
  $form['instructions']['text'] = array(
    '#value' => '<div>'. t('The following variables should be used in configuring addresses for the countries you ship to:') .'<p>'
              . theme('table', $header, $rows) .'</p><p>'. t('*Adding _if to any country variable will make it only display for addresses<br>whose country is different than the default store country.') .'</div>',
  );

  if (is_array($countries)) {
    $form['countries'] = array(
      '#tree' => TRUE,
    );
    foreach ($countries as $country) {
      $form['countries'][$country->country_id] = array(
        '#type' => 'fieldset',
        '#title' => $country->country_name,
        '#collapsible' => TRUE,
        '#collapsed' => TRUE,
      );
      $form['countries'][$country->country_id]['address_format'] = array(
        '#type' => 'textarea',
        '#title' => t('Address format'),
        '#default_value' => variable_get('uc_address_format_'. $country->country_id, ''),
        '#description' => t('Uses the variables mentioned in the instructions to format an address for this country.'),
        '#rows' => 6,
      );
    }
  }

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Submit changes'),
  );

  return $form;
}

function uc_country_settings_submit($form_id, $form_values) {
  switch ($form_values['op']) {
    case t('Submit changes'):
      foreach ($form_values['countries'] as $country_id => $data) {
        variable_set('uc_address_format_'. $country_id, $data['address_format']);
      }
      drupal_set_message(t('Country settings saved.'));
      break;
    case t('Import'):
      $file = $form_values['import_file'];

      $pieces = explode('_', substr($file, 0, strlen($file) - 4));
      $country_id = $pieces[count($pieces) - 2];
      $version = $pieces[count($pieces) - 1];
      $country = substr($file, 0, strlen($file) - strlen($country_id) - strlen($version) - 6);

      require_once(drupal_get_path('module', 'uc_store') .'/countries/'. $file);
      $func = $country .'_install';
      if (function_exists($func)) {
        $func();
        drupal_set_message(t('Country file !file imported.', array('!file' => $file)));
      }
      else {
        drupal_set_message(t('Country file had no install function.'));
      }

      break;
  }
}

/**
 * Disable a country so it remains installed but is no longer selectable.
 */
function uc_country_disable($country_id) {
  $result = db_query("SELECT * FROM {uc_countries} WHERE country_id = %d", $country_id);
  if (($country = db_fetch_object($result))) {
    if ($country->version > 0) {
      db_query("UPDATE {uc_countries} SET version = %d WHERE country_id = %d",
               0 - $country->version, $country_id);
      drupal_set_message(t('!country disabled.', array('!country' => $country->country_name)));
    }
    else {
      drupal_set_message(t('!country is already disabled.', array('!country' => $country->country_name)), 'error');
    }
  }
  else {
    drupal_set_message(t('Attempted to disable an invalid country.'), 'error');
  }
  drupal_goto('admin/store/settings/countries');
}

/**
 * Enable a disabled country.
 */
function uc_country_enable($country_id) {
  $result = db_query("SELECT * FROM {uc_countries} WHERE country_id = %d", $country_id);
  if (($country = db_fetch_object($result))) {
    if ($country->version < 0) {
      db_query("UPDATE {uc_countries} SET version = %d WHERE country_id = %d",
               abs($country->version), $country_id);
      drupal_set_message(t('!country enabled.', array('!country' => $country->country_name)));
    }
    else {
      drupal_set_message(t('!country is already enabled.', array('!country' => $country->country_name)), 'error');
    }
  }
  else {
    drupal_set_message(t('Attempted to enable an invalid country.'), 'error');
  }
  drupal_goto('admin/store/settings/countries');
}

/**
 * Completely remove a country!
 */
function uc_country_remove_form($country_id) {
  if ($_POST['op'] == t('Cancel')) {
    drupal_goto('admin/store/settings/countries');
  }

  if ($_POST['op'] != t('Remove')) {
    $result = db_query("SELECT COUNT(order_id) AS orders FROM {uc_orders} WHERE "
                      ."delivery_country = %d OR billing_country = %d",
                       $country_id, $country_id);
    if (($data = db_fetch_object($result))) {
      if ($data->orders > 0) {
        drupal_set_message(t('Warning: !number orders were found with addresses in this country. Removing this country now will cause errors to show on those order pages. You might consider simply disabling this country instead.', array('!number' => $data->orders)), 'error');
      }
    }
  }

  $form['text'] = array(
    '#value' => '<p>'. t('Are you sure you wish to completely remove this country?') .'</p>',
  );
  $form['country_id'] = array(
    '#type' => 'hidden',
    '#value' => $country_id,
  );

  $form['cancel'] = array(
    '#type' => 'submit',
    '#value' => t('Cancel'),
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Remove'),
  );

  return $form;
}

function uc_country_remove_form_submit($form_id, $form_values) {
  $country_id = $form_values['country_id'];

  $result = db_query("SELECT * FROM {uc_countries} WHERE country_id = %d", $country_id);
  if (!($country = db_fetch_object($result))) {
    drupal_set_message(t('Attempted to remove an invalid country.'), 'error');
    drupal_goto('admin/store/settings/countries');
  }

  db_query("DELETE FROM {uc_countries} WHERE country_id = %d", $country_id);
  db_query("DELETE FROM {uc_zones} WHERE zone_country_id = %d", $country_id);
  variable_del('uc_address_format_'. $country_id);

  $func_base = _country_import_include($country_id, $country->version);
  if ($func_base !== FALSE) {
    $func = $func_base .'_uninstall';
    if (function_exists($func)) {
      $func();
    }
  }

  drupal_set_message(t('!country removed.', array('!country' => $country->country_name)));
  drupal_goto('admin/store/settings/countries');
}

/**
 * Update a country to its latest version.
 */
function uc_country_update($country_id, $version) {
  $result = db_query("SELECT * FROM {uc_countries} WHERE country_id = %d", $country_id);
  if (!($country = db_fetch_object($result))) {
    drupal_set_message(t('Attempted to update an invalid country.'));
    drupal_goto('admin/store/settings/countries');
  }

  if ($version < $country->version) {
    drupal_set_message(t('You cannot update to a previous version.'));
    drupal_goto('admin/store/settings/countries');
  }

  $func_base = _country_import_include($country_id, $version);
  if ($func_base !== FALSE) {
    $func = $func_base .'_update';
    if (function_exists($func)) {
      for ($i = $country->version; $i <= $version; $i++) {
        $func($i);
      }
    }
    db_query("UPDATE {uc_countries} SET version = %d WHERE country_id = %d", $version, $country_id);
    drupal_set_message(t('Country update complete.'));
  }
  else {
    drupal_set_message(t('Attempted to update an invalid country.'));
  }

  drupal_goto('admin/store/settings/countries');
}

/**
 * Form for store settings page.
 */
function uc_store_settings() {
  $form['general'] = array(
    '#type' => 'fieldset',
    '#title' => t('General settings'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE
  );
  $form['general']['uc_store_name'] = uc_textfield(t('Store Name'), variable_get('uc_store_name', NULL), FALSE, NULL, 64);
  $form['general']['uc_store_owner'] = uc_textfield(t('Store Owner'), variable_get('uc_store_owner', NULL), FALSE, NULL, 64);
  $form['general']['uc_store_email'] = uc_textfield(t('E-mail Address'), variable_get('uc_store_email', NULL), FALSE, NULL, 128);
  $form['general']['uc_store_email_from'] = uc_textfield(t('E-mail From Address'), variable_get('uc_store_email_from', NULL), FALSE, NULL, 128);
  $form['general']['uc_store_phone'] = uc_textfield(t('Phone Number'), variable_get('uc_store_phone', NULL), FALSE);
  $form['general']['uc_store_fax'] = uc_textfield(t('Fax Number'), variable_get('uc_store_fax', NULL), FALSE);
  $form['general']['uc_store_street1'] = uc_textfield(t('Street Address 1'), variable_get('uc_store_street1', NULL), FALSE, NULL, 128);
  $form['general']['uc_store_street2'] = uc_textfield(t('Street Address 2'), variable_get('uc_store_street2', NULL), FALSE, NULL, 128);
  $form['general']['uc_store_city'] = uc_textfield(t('City'), variable_get('uc_store_city', NULL), FALSE);
  if (isset($_POST['uc_store_country'])) {
    $country_id = intval($_POST['uc_store_country']);
  }
  else {
    $country_id = variable_get('uc_store_country', 840);
  }
  $form['general']['uc_store_zone'] = uc_zone_select(t('Zone'), variable_get('uc_store_zone', NULL), NULL, $country_id);
  $form['general']['uc_store_postal_code'] = uc_textfield(t('Postal Code'), variable_get('uc_store_postal_code', NULL), FALSE, NULL, 10);
  $form['general']['uc_store_country'] = uc_country_select(t('Country'), variable_get('uc_store_country', 840));

  $form['display'] = array(
    '#type' => 'fieldset',
    '#title' => t('Display settings'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );
  $form['display']['uc_store_display_links'] = array(
    '#type' => 'checkbox',
    '#title' => t('Display store links on administration page by default.'),
    '#default_value' => variable_get('uc_store_display_links', TRUE),
  );
  $desc = t('Select the address to be used on customer lists and summaries.');
  if (module_exists('uc_notify')) {
    $desc .= ' '. t('Also applies to notification e-mails.');
  }
  $form['display']['uc_customer_list_address'] = array(
    '#type' => 'radios',
    '#title' => t('Primary customer address'),
    '#description' => $desc,
    '#options' => array(
      'billing' => t('Billing address'),
      'shipping' => t('Shipping address'),
    ),
    '#default_value' => variable_get('uc_customer_list_address', 'billing'),
  );

  $form['currency'] = array(
    '#type' => 'fieldset',
    '#title' => t('Currency format'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );
  $form['currency']['example'] = array(
    '#type' => 'textfield',
    '#title' => t('Current Format'),
    '#value' => uc_currency_format(1000.1234),
    '#disabled' => TRUE,
    '#size' => 10,
  );
  $form['currency']['uc_currency_sign'] = uc_textfield(t('Currency Sign'), variable_get('uc_currency_sign', '$'), TRUE, NULL, 10, 10);
  $form['currency']['uc_sign_after_amount'] = array(
    '#type' => 'checkbox',
    '#title' => t('Display currency sign after amount.'),
    '#default_value' => variable_get('uc_sign_after_amount', FALSE),
  );
  $form['currency']['uc_currency_thou'] = uc_textfield(t('Thousands Marker'), variable_get('uc_currency_thou', ','), TRUE, NULL, 10, 10);
  $form['currency']['uc_currency_dec'] = uc_textfield(t('Decimal Marker'), variable_get('uc_currency_dec', '.'), TRUE, NULL, 10, 10);

  $form['currency']['uc_currency_prec'] = array(
    '#type' => 'select',
    '#title' => t('Number of Decimal Places'),
    '#options' => drupal_map_assoc(array(0, 1, 2)),
    '#default_value' => variable_get('uc_currency_prec', 2),
  );
  
  $form['weight'] = array(
    '#type' => 'fieldset',
    '#title' => t('Weight format'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );
  $form['weight']['instructions'] = array(
    '#value' => '<div>'. t('Supply a format string for each unit. !value represents the weight value.') .'</div>',
  );
  $units = array(
    'lb.' => t('Pounds'),
    'oz.' => t('Ounces'),
    'kg' => t('Kilograms'),
    'g' => t('Grams'),
  );
  $form['weight']['uc_weight_unit'] = array(
    '#type' => 'select',
    '#title' => t('Default unit of measurement'),
    '#default_value' => variable_get('uc_weight_unit', 'lb.'),
    '#options' => $units,
  );
  foreach ($units as $unit => $name){
    $form['weight']['uc_weight_format_'. $unit] = array(
      '#type' => 'textfield',
      '#title' => t('@unit format string', array('@unit' => $name)),
      '#default_value' => variable_get('uc_weight_format_'. $unit, '!value '. $unit),
    );
  }

  $form['date'] = array(
    '#type' => 'fieldset',
    '#title' => t('Date format'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );
  $form['date']['instructions'] = array(
    '#value' => '<div>'. t('Supply a format string using !link syntax.', array('!link' => l(t('PHP date'), 'http://www.php.net/date'))) .'</div>',
  );
  $form['date']['uc_date_format_default'] = array(
    '#type' => 'textfield',
    '#title' => t('Default format string'),
    '#default_value' => variable_get('uc_date_format_default', 'm/d/Y'),
  );

  $form['address_fields'] = array(
    '#type' => 'fieldset',
    '#title' => t('Address field settings'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );
  $form['address_fields']['titles'] = array(
    '#type' => 'fieldset',
    '#title' => t('Field titles'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );
  $form['address_fields']['titles']['uc_field_first_name'] = uc_textfield(t('First Name'), uc_get_field_name('first_name'), FALSE, NULL);
  $form['address_fields']['titles']['uc_field_last_name'] = uc_textfield(t('Last Name'), uc_get_field_name('last_name'), FALSE, NULL);
  $form['address_fields']['titles']['uc_field_email'] = uc_textfield(t('E-mail'), uc_get_field_name('email'), FALSE, NULL);
  $form['address_fields']['titles']['uc_field_phone'] = uc_textfield(t('Phone Number'), uc_get_field_name('phone'), FALSE, NULL);
  $form['address_fields']['titles']['uc_field_company'] = uc_textfield(t('Company Name'), uc_get_field_name('company'), FALSE, NULL);
  $form['address_fields']['titles']['uc_field_address'] = uc_textfield(t('Address'), uc_get_field_name('address'), FALSE, NULL);
  $form['address_fields']['titles']['uc_field_street'] = uc_textfield(t('Street Address'), uc_get_field_name('street'), FALSE, NULL);
  $form['address_fields']['titles']['uc_field_street1'] = uc_textfield(t('Street Address 1'), uc_get_field_name('street1'), FALSE, NULL);
  $form['address_fields']['titles']['uc_field_street2'] = uc_textfield(t('Street Address 2'), uc_get_field_name('street2'), FALSE, NULL);
  $form['address_fields']['titles']['uc_field_city'] = uc_textfield(t('City'), uc_get_field_name('city'), FALSE, NULL);
  $form['address_fields']['titles']['uc_field_zone'] = uc_textfield(t('Zone'), uc_get_field_name('zone'), FALSE, NULL);
  $form['address_fields']['titles']['uc_field_country'] = uc_textfield(t('Country'), uc_get_field_name('country'), FALSE, NULL);
  $form['address_fields']['titles']['uc_field_postal_code'] = uc_textfield(t('Postal Code'), uc_get_field_name('postal_code'), FALSE, NULL);

  $form['address_fields']['enable_disable'] = array(
    '#type' => 'fieldset',
    '#title' => t('Enable/disable fields'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );
  $form['address_fields']['enable_disable']['description'] = array(
    '#value' => '<div>'. t('Use these boxes to turn fields on or off in checkout.') .'</div>',
  );
  $form['address_fields']['enable_disable']['uc_address_fields'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Check a box to enable that field for customer addresses'),
    '#options' => array(
      'first_name' => uc_get_field_name('first_name'),
      'last_name' => uc_get_field_name('last_name'),
      'phone' => uc_get_field_name('phone'),
      'company' => uc_get_field_name('company'),
      'street1' => uc_get_field_name('street1'),
      'street2' => uc_get_field_name('street2'),
      'city' => uc_get_field_name('city'),
      'zone' => uc_get_field_name('zone'),
      'country' => uc_get_field_name('country'),
      'postal_code' => uc_get_field_name('postal_code'),
    ),
    '#default_value' => variable_get('uc_address_fields', array('first_name', 'last_name', 'phone', 'company', 'street1', 'street2', 'city', 'zone', 'postal_code', 'country')),
  );

  return system_settings_form($form);
}

/**
 * Form to enter initials for an administrative user.
 */
function uc_store_initials() {
  $form['username'] = array(
    '#type' => 'textfield',
    '#title' => t('User name'),
    '#description' => t('Enter the name of the user whose initials you want to adjust.'),
    '#required' => TRUE,
    '#size' => 32,
    '#autocomplete_path' => 'user/autocomplete',
  );
  $form['initials'] = array(
    '#type' => 'textfield',
    '#title' => t('Initials'),
    '#description' => t('Enter initials or leave blank to erase current initials.'),
    '#size' => 6,
    '#maxlength' => 32,
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Submit'),
  );

  return $form;
}

function uc_store_initials_submit($form_id, $form_values) {
  $result = db_query("SELECT uid FROM {users} WHERE name = '%s'", $form_values['username']);
  if ($user = db_fetch_object($result)) {
    if ($form_values['initials'] == '') {
      variable_del('user_initials_'. $user->uid);
      drupal_set_message(t('Initials for !username deleted.', array('!username' => $form_values['username'])));
    }
    else {
      variable_set('user_initials_'. $user->uid, $form_values['initials']);
      drupal_set_message(t('Initials for !username set to !initials.',
                           array('!username' => $form_values['username'],
                                 '!initials' => $form_values['initials'])));
    }
  }
}

function uc_store_census_settings(){
  $form['uc_store_opt_in'] = array('#type' => 'radios',
    '#title' => t('Send Information to &Uuml;bercart'),
    '#options' => array(1 => t('Yes'), 0 => t('No')),
    '#default_value' => variable_get('uc_store_opt_in', 1),
    '#description' => t('While this option is set to Yes, anonymous data about your site is reported for fun statistical purposes. We collect your PHP, Drupal, and database versions, plus any additional information you select below.'),
  );
  $form['uc_store_opt_in_hostname'] = array('#type' => 'checkbox',
    '#title' => t('Host Name'),
    '#default_value' => variable_get('uc_store_opt_in_hostname', 1),
  );
  $form['uc_store_opt_in_modules'] = array('#type' => 'checkbox',
    '#title' => t('List of enabled modules'),
    '#default_value' => variable_get('uc_store_opt_in_modules', 1),
  );
  $form['uc_store_opt_in_orders'] = array('#type' => 'checkbox',
    '#title' => t('Total fulfilled orders'),
    '#default_value' => variable_get('uc_store_opt_in_orders', 1),
  );
  $form['uc_store_opt_in_sales'] = array('#type' => 'checkbox',
    '#title' => t('Total sales'),
    '#default_value' => variable_get('uc_store_opt_in_sales', 1),
  );
  $form['uc_store_opt_in_products'] = array('#type' => 'checkbox',
    '#title' => t('Total products sold'),
    '#default_value' => variable_get('uc_store_opt_in_products', 1),
  );
  
  return system_settings_form($form);
}

/**
 * List of extensible TAPIr tables used by Ubercart.
 */
function uc_store_tables() {
  $output = '<p>'. t('The following tables are used to display various parts of your store to your administrators and customers. Click on a table id to configure the display of that table.');
  $output .= '<p>'. tapir_table_list('admin/store/settings/tables') .'</p>';

  return $output;
}

/**
 * A handler for Javascript helper functions...
 */
function uc_store_js_util($func) {
  switch ($func) {
    case 'currency_format':
      $amount = is_numeric($_POST['amount']) ? $_POST['amount'] : 0;
      $output = uc_currency_format($amount);
      break;
    case 'zone_select':
      $country_id = intval($_POST['country_id']) > 0 ? intval($_POST['country_id']) : variable_get('uc_store_country', 840);
      $title = isset($_POST['title']) ? check_plain($_POST['title']) : NULL;
      $display = isset($_POST['display']) ? check_plain($_POST['display']) : 'name';
      $select = uc_zone_select($title, NULL, NULL, $country_id, $display);
      $select['#parents'] = array();
      $match = array('`<[/]*div[^>]*>`', '`<[/]*select[^>]*>`', '`\n|\r`');
      $replace = array('', '', '');
      $output = preg_replace($match, $replace, theme('select', $select));
  }

  print $output;
  exit();
}


/*******************************************************************************
 * Module and Helper Functions
 ******************************************************************************/

function theme_uc_store_block_links($menu){
  if (!($menu['type'] & MENU_VISIBLE_IN_TREE)){
    return '';
  }
  $depth = count(explode('/', $menu['path']));
  $link_title = uc_store_get_icon($menu['path'], TRUE) .' '. $menu['title'];
  $output = str_repeat("  ", $depth) .'<li>'
          . l($link_title, $menu['path'], array(), NULL, NULL, FALSE, TRUE);
  if (is_array($menu['children']) && !empty($menu['children'])){
    usort($menu['children'], '_menu_sort');
    $output .= "\n". str_repeat(" ", 2 * $depth + 1) ."<ul>\n";
    foreach ($menu['children'] as $child){
      $output .= theme('uc_store_block_links', menu_get_item($child));
    }
    $output .= str_repeat(" ", 2 * $depth + 1) ."</ul>\n". str_repeat("  ", $depth);
  }
  $output .= "</li>\n";
  return $output;
}

/**
 * Return the IMG tag for a store icon.
 *
 * @param $path
 *   The Drupal path of the menu item. Atlernately may specify a filename by
 *   passing this string as file:filename.png.
 * @param $small
 *   Pass TRUE to get a link to the small version of the icon. If specifying a
 *   filename, you should let this be FALSE.
 * @return
 *   HTML output for the image.
 */
function uc_store_get_icon($path, $small = FALSE, $class = 'uc-store-icon') {
  $file = FALSE;

  switch ($path) {
    case 'admin/store':
      $file = 'store_monitor';
      break;
    case 'admin/store/orders':
      $file = 'menu_orders';
      break;
    case 'admin/store/customers':
      $file = 'menu_customers';
      break;
    case 'admin/store/products':
      $file = 'menu_products';
      break;
    case 'admin/store/reports':
      $file = 'menu_reports';
      break;
    case 'admin/store/settings':
      $file = 'menu_store_settings';
      break;
    case 'admin/store/help':
      $file = 'menu_help';
      break;
  }

  if (substr($path, 0, 5) == 'file:') {
    $file = substr($path, 5);
  }

  if (!$file) {
    // See if it's hooked in anywhere else...
    return '';
  }

  if ($small) {
    $file .= '_small';
  }

  $output = '<img src="'. base_path() . drupal_get_path('module', 'uc_store')
           .'/images/'. $file .'.gif" class="'. $class .'" />';

  return $output;
}

/**
 * Format an amount for display with the store's currency settings.
 */
function uc_currency_format($value, $sign = TRUE, $thou = TRUE, $dec = NULL) {
  if (variable_get('uc_currency_prec', 2) > 0) {
    if (abs($value) < '.'. str_repeat('0', variable_get('uc_currency_prec', 2) - 1) .'1') {
      $value = 0;
    }
  }
  
  if ($value < 0) {
    $value = abs($value);
    $format = '-';
  }

  if ($sign && !variable_get('uc_sign_after_amount', FALSE)) {
    $format .= variable_get('uc_currency_sign', '$');
  }

  $format .= number_format($value, variable_get('uc_currency_prec', 2), !is_null($dec) ? $dec : variable_get('uc_currency_dec', '.'), $thou ? variable_get('uc_currency_thou', ',') : '');

  if ($sign && variable_get('uc_sign_after_amount', FALSE)) {
    $format .= variable_get('uc_currency_sign', '$');
  }

  return $format;
}

/**
 * Format a weight value for display.
 */
function uc_weight_format($value, $unit = NULL) {
  $vars = array('!value' => $value);
  
  if (is_null($unit)){
    $unit = variable_get('uc_weight_unit', 'lb.');
  }

  $pattern = variable_get('uc_weight_format_'. $unit, '!value '. $unit);
  if (strpos($pattern, '!value') === FALSE) {
    $pattern = '!value '. $unit;
  }

  $format = strtr($pattern, $vars);

  return $format;
}

/**
 * Format a date value for display.
 */
function uc_date_format($month, $day, $year, $class = 'default') {
  $time = strtotime($month .'/'. $day .'/'. $year);

  $pattern = variable_get('uc_date_format_'. $class, 'm/d/Y');
  if (strlen($pattern) < 3) {
    $pattern = 'm/d/Y';
  }

  return date($pattern, $time);
}

/**
 * Save the address format for a country.
 */
function uc_set_address_format($country_id, $format) {
  $country = intval($country_id);
  variable_set('uc_address_format_'. $country_id, $format);
}

/**
 * Format an address for display based on a country's address format.
 */
function uc_address_format($first_name, $last_name, $company, $street1, $street2, $city, $zone, $postal_code, $country) {
  $result = db_query("SELECT * FROM {uc_zones} WHERE zone_id = %d", $zone);
  if (!($zone_data = db_fetch_array($result))) {
    $zone_data = array('zone_code' => t('N/A'), 'zone_name' => t('Unknown'));
  }
  $result = db_query("SELECT * FROM {uc_countries} WHERE country_id = %d", $country);
  if (!($country_data = db_fetch_array($result))) {
    $country_data = array(
      'country_name' => t('Unknown'),
      'country_iso_code_2' => t('N/A'),
      'country_iso_code_3' => t('N/A'),
    );
  }

  $variables = array(
    "\r\n" => '<br>',
    '!company' => $company,
    '!first_name' => $first_name,
    '!last_name' => $last_name,
    '!street1' => $street1,
    '!street2' => $street2,
    '!city' => $city,
    '!zone_code' => $zone_data['zone_code'],
    '!zone_name' => $zone_data['zone_name'],
    '!postal_code' => $postal_code,
    '!country_name' => $country_data['country_name'],
    '!country_code2' => $country_data['country_iso_code_2'],
    '!country_code3' => $country_data['country_iso_code_3'],
  );

  if (variable_get('uc_store_country', 840) != $country) {
    $variables['!country_name_if'] = $country_data['country_name'];
    $variables['!country_code2_if'] = $country_data['country_iso_code_2'];
    $variables['!country_code3_if'] = $country_data['country_iso_code_3'];
  }
  else {
    $variables['!country_name_if'] = '';
    $variables['!country_code2_if'] = '';
    $variables['!country_code3_if'] = '';
  }

  $format = variable_get('uc_address_format_'. $country, "!company\r\n!first_name !last_name\r\n!street1\r\n!street2\r\n!city, !zone_code !postal_code\r\n!country_name_if");
  $address = strtr($format, $variables);
  $address = strtr($address, array("\n" => '<br>'));
  if (substr($address, 0, 4) == '<br>') {
    $address = substr($address, 4);
  }
  if (substr($address, -4) == '<br>') {
    $address = substr($address, 0, strlen($address) - 4);
  }

  return str_replace('<br><br>', '<br>', $address);
}

/**
 * Return the code abbreviation for a zone based on the zone ID or name.
 */
function uc_get_zone_code($zone = NULL) {
  if (is_null($zone))
    return FALSE;

  if (is_numeric($zone)) {
    $result = db_query("SELECT zone_code FROM {uc_zones} WHERE zone_id = %d", $zone);
  }
  else {
    $result = db_query("SELECT zone_code FROM {uc_zones} WHERE zone_name = '%s'", $zone);
  }

  if ($row = db_fetch_object($result))
    return $row->zone_code;

  return FALSE;
}

/**
 * Returns the rows of countries whose data matches the fields specified in the
 * $fields array.
 */
function uc_get_country_data($match = array(), $sort = 'country_name') {
  $valid_fields = array('country_id', 'country_name', 'country_iso_code_2', 'country_iso_code_3', 'version');

  if (!is_array($match)) {
    $match = array();
  }
  if (!in_array($sort, $valid_fields)) {
    $sort = 'country_name';
  }

  $query = 'SELECT * FROM {uc_countries}';
  if (count($match) > 0) {
    $where = '';
    foreach ($match as $key => $value) {
      if (!in_array($key, $valid_fields)) {
        continue;
      }
      if (strlen($where) == 0) {
        $where = ' WHERE ';
      }
      if (strlen($where) > 7) {
        $where .= ' AND ';
      }
      $where .= $key ." = '". check_plain($value) ."'";
    }
  }
  $query .= $where .' ORDER BY '. check_plain($sort);

  $result = db_query($query);

  if (db_num_rows($result) == 0) {
    return FALSE;
  }

  while ($row = db_fetch_array($result)) {
    $countries[] = $row;
  }

  return $countries;
}

/**
 * Return the name of an address field.
 */
function uc_get_field_name($field) {
  switch ($field) {
    case 'first_name':
      $default = t('First Name');
      break;
    case 'last_name':
      $default = t('Last Name');
      break;
    case 'email':
      $default = t('E-mail');
      break;
    case 'phone':
      $default = t('Phone Number');
      break;
    case 'company':
      $default = t('Company');
      break;
    case 'address':
      $default = t('Address');
      break;
    case 'street':
      $default = t('Street Address');
      break;
    case 'street1':
      $default = t('Street Address 1');
      break;
    case 'street2':
      $default = t('Street Address 2');
      break;
    case 'city':
      $default = t('City');
      break;
    case 'zone':
      $default = t('State');
      break;
    case 'postal_code':
      $default = t('Zip Code');
      break;
    case 'country':
      $default = t('Country');
      break;
    default:
      drupal_set_message(t('The field title %field is being accessed incorrectly.', array('%field' => $field)), 'error');
      return '';
  }

  return variable_get('uc_field_'. $field, $default);
}

/**
 * Return TRUE if a field is enabled.
 */
function uc_address_field_enabled($field) {
  $fields = variable_get('uc_address_fields', array('first_name', 'last_name', 'phone', 'company', 'street1', 'street2', 'city', 'zone', 'postal_code', 'country'));

  if ($fields[$field] == FALSE) {
    return FALSE;
  }
  else {
    return TRUE;
  }
}

/**
 * A simple Forms API textfield generator...
 */
function uc_textfield($title, $default = NULL, $required = TRUE, $description = NULL, $maxlength = 32, $size = 32) {
  if (is_null($title) || empty($title))
    return NULL;

  $textfield = array(
    '#type' => 'textfield',
    '#title' => $title,
    '#description' => $description,
    '#size' => $size,
    '#maxlength' => $maxlength,
    '#required' => $required,
    '#default_value' => $default
  );

  return $textfield;
}

/**
 * Create a zone select box for a form.
 * $display can be 'code' or 'name'.
 */
function uc_zone_select($title, $default = NULL, $description = NULL, $country_id = NULL, $display = 'name') {
  if (empty($country_id)) {
    $country_id = variable_get('uc_store_country', 840);
  }
  $result = db_query("SELECT * FROM {uc_zones} WHERE zone_country_id = %d ORDER BY %s", $country_id, ($display == 'code') ? 'zone_code' : 'zone_name');
  if (db_num_rows($result) == 0) {
    $options[] = t('Not applicable');
  }
  else {
    $options[] = t('Please Select');
  }
  while ($zone = db_fetch_object($result)) {
    $options[$zone->zone_id] = ($display == 'code') ? $zone->zone_code : $zone->zone_name;
  }

  $select = array(
    '#type' => 'select',
    '#title' => $title,
    '#description' => $description,
    '#options' => $options,
    '#default_value' => $default
  );

  return $select;
}

/**
 * Create a country select box for a form.
 * $display can be 'name', 'code2' for the 2-digit code, or 'code3' for the 3-digit code.
 */
function uc_country_select($title, $default = NULL, $description = NULL, $display = 'name') {
  if ($display == 'name') {
    $order_by = 'country_name';
  }
  elseif ($display == 'code2') {
    $order_by = 'country_iso_code_2';
  }
  elseif ($display == 'code3') {
    $order_by = 'country_iso_code_3';
  }

  $result = db_query("SELECT * FROM {uc_countries} WHERE version > 0 ORDER BY %s", $order_by);
  
  $options = array();
  while ($country = db_fetch_array($result)) {
    $options[$country['country_id']] = $country[$order_by];
  }
  if (count($options) == 0) {
    $options[] = t('No countries found.');
  }

  $select = array(
    '#type' => 'select',
    '#title' => $title,
    '#description' => $description,
    '#options' => $options,
    '#default_value' => empty($default) ? variable_get('uc_store_country', 840) : $default,
  );

  drupal_add_js(drupal_get_path('module', 'uc_store') .'/uc_country_select.js');
  uc_add_base_path_js();

  return $select;
}

/**
 * Create a day select box for a form.
 */
function uc_select_day($title = NULL, $default = NULL) {
  $select = array(
    '#type' => 'select',
    '#title' => (is_null($title) ? t('Day') : $title),
    '#options' => drupal_map_assoc(range(1, 31)),
    '#default_value' => (is_null($default) ? 1 : $default),
  );

  return $select;
}

/**
 * Create a month select box for a form.
 */
function uc_select_month($title = NULL, $default = NULL) {
  $select = array(
    '#type' => 'select',
    '#title' => (is_null($title) ? t('Month') : $title),
    '#options' => array(1 => t('01 - January'), 2 => t('02 - February'), 3 => t('03 - March'),
                        4 => t('04 - April'), 5 => t('05 - May'), 6 => t('06 - June'),
                        7 => t('07 - July'), 8 => t('08 - August'), 9 => t('09 - September'),
                        10 => t('10 - October'), 11 => t('11 - November'), 12 => t('12 - December')),
    '#default_value' => (is_null($default) ? 1 : $default),
  );

  return $select;
}

/**
 * Create a year select box for a form.
 */
function uc_select_year($title = NULL, $default = NULL, $min = NULL, $max = NULL) {
  $min = is_null($min) ? intval(date('Y')) : $min;
  $max = is_null($max) ? intval(date('Y')) + 8 : $max;

  $select = array(
    '#type' => 'select',
    '#title' => (is_null($title) ? t('Year') : $title),
    '#options' => drupal_map_assoc(range($min, $max)),
    '#default_value' => (is_null($default) ? 0 : $default),
  );

  return $select;
}

/**
 * Create an address select box based on a user's previous orders.
 *
 * @param $uid
 *   The user's ID to search for in the orders table.
 * @param $type
 *   Choose either 'shipping' or 'billing'.
 */
function uc_select_address($uid, $type = 'billing', $onchange = '', $title = NULL, $icon_suffix = FALSE) {
  $addresses = uc_get_addresses($uid, $type);

  if (!is_array($addresses) || count($addresses) == 0) {
    return NULL;
  }

  $options = array('0' => t('Select one...'));
  foreach ($addresses as $address) {
    $options[drupal_to_js($address)] = $address['street1'];
  }

  $select = array(
    '#type' => 'select',
    '#title' => is_null($title) ? t('Address book') : $title,
    '#options' => $options,
    '#attributes' => array('onchange' => $onchange),
    '#suffix' => $icon_suffix ? uc_store_get_icon('file:address_book', FALSE, 'address-book-icon') : NULL,
  );

  return $select;
}

function uc_get_addresses($uid, $type = 'billing') {
  if ($uid == 0) {
    return NULL;
  }

  if ($type == 'delivery') {
    $type = 'delivery';
  }
  else {
    $type = 'billing';
  }

  $result = db_query("SELECT DISTINCT ". $type ."_first_name AS first_name, "
                   . $type ."_last_name AS last_name, ". $type ."_phone AS phone, "
                   . $type ."_company AS company, ". $type ."_street1 AS street1, "
                   . $type ."_street2 AS street2, ". $type ."_city AS city, "
                   . $type ."_zone AS zone, ". $type ."_postal_code AS postal_code, "
                   . $type ."_country AS country FROM {uc_orders} WHERE uid = %d "
                    ."AND order_status > 0 ORDER BY created ASC", $uid);

  $addresses = array();
  while ($address = db_fetch_array($result)) {
    $addresses[] = $address;
  }

  return $addresses;
}

/**
 * Strip <form> tags and form_token and form_id hidden fields from form HTML for
 * use in an AJAX populated div. (Enables these values to be access via $_POST.)
 */
function uc_strip_form($html) {
  $html = preg_replace('`</?form.*>`', '', $html);
  $html = preg_replace('`<input.*name="form_(token|id)".*>`', '', $html);

  return $html;
}

/**
 * Return the initials for a user account.
 */
function uc_get_initials($uid) {
  if ($uid == 0 || $uid == NULL) {
    return '-';
  }
  return variable_get('user_initials_'. $uid, $uid);
}

/**
 * Add the base_path as a global JS variable.
 */
function uc_add_base_path_js() {
  drupal_add_js("var base_path = '". base_path() ."';", 'inline');
}

/**
 * Return an array of country files in ubercart/uc_store/countries that can
 * be installed or updated.
 */
function _country_import_list() {
  $dir = drupal_get_path('module', 'uc_store') .'/countries/';

  $countries = array();
  if (is_dir($dir)) {
    if ($dh = opendir($dir)) {
      while (($file = readdir($dh)) !== false) {
        switch (filetype($dir . $file)) {
          case 'file':
            if (substr($file, -4, 4) == '.cif') {
              $pieces = explode('_', substr($file, 0, strlen($file) - 4));
              $country_id = intval($pieces[count($pieces) - 2]);
              $version = $pieces[count($pieces) - 1];
              
              if (!isset($countries[$country_id])) {
                $countries[$country_id]['version'] = $version;
                $countries[$country_id]['file'] = $file;
              }
              else {
                if ($version > $countries[$country_id]['version']) {
                  $countries[$country_id]['version'] = $version;
                  $countries[$country_id]['file'] = $file;
                }
              }
            }
            break;
        }
      }
      closedir($dh);
    }
  }

  return $countries;
}

/**
 * Include the appropriate country file and return the base for hooks.
 */
function _country_import_include($country_id, $version) {
  $dir = drupal_get_path('module', 'uc_store') .'/countries/';
  $match = '_'. $country_id .'_'. $version .'.cif';
  $matchlen = strlen($match);

  $countries = array();
  if (is_dir($dir)) {
    if ($dh = opendir($dir)) {
      while (($file = readdir($dh)) !== false) {
        switch (filetype($dir . $file)) {
          case 'file':
            if (substr($file, -$matchlen) == $match) {
              require_once($dir . $file);
              return substr($file, 0, strlen($file) - $matchlen);
            }
            break;
        }
      }
      closedir($dh);
    }
  }

  return FALSE;
}

/**
 * Return an array of IDs to use for country file zone INSERTs!
 */
function uc_get_zone_ids($num) {
  for ($i = 0; $i < $num; $i++) {
    $ids[] = db_next_id('{uc_zones}_zone_id');
  }
  return $ids;
}

/**
 * Call a function that sometimes needs the first argument to be a reference.
 * This is particularly used for pane and payment method/gateway functions.
 */
function uc_func_call($func, $op, &$arg1) {
  $args = func_get_args();
  $args = array_merge(array($op, &$arg1), array_slice($args, 3));

  return call_user_func_array($func, $args);
}

/**
 * Invoke a hook in cases where the first argument must be passed by reference.
 */
function uc_invoke_all($hook, $op, &$arg1) {
  $args = func_get_args();
  $args = array_merge(array($op, &$arg1), array_slice($args, 3));

  foreach (module_implements($hook) as $module) {
    $function = $module .'_'. $hook;
    call_user_func_array($function, $args);
  }
}
