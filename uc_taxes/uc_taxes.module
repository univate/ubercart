<?php
// $Id: uc_taxes.module,v 1.12.2.4 2008-10-24 21:12:33 islandusurper Exp $

/**
 * @file
 * Übercart Taxes module.
 *
 * Allows tax rules to be set up and applied to orders.
 *
 * Coded by Lyle Mantooth
 */

/******************************************************************************
 * Drupal Hooks                                                               *
 ******************************************************************************/

function uc_taxes_help($path, $arg) {
  $output = '';
  switch ($path) {
    case 'admin/store/settings/taxes':
      $output .= t('After setting up tax rates and rules on this page, go to the
  <a href="!link">Conditional actions settings</a> to add
  conditions to the taxes. Especially important are the geographic area
  conditions for the delivery address.', array('!link' => url('admin/settings/ca')));
    break;
  }
  return $output;
}

/**
 * Implementation of hook_perm().
 */
function uc_taxes_perm() {
  return array('configure taxes');
}

/**
 * Implementation of hook_menu().
 */
function uc_taxes_menu() {
  $items = array();

  $items['admin/store/settings/taxes'] = array(
    'title' => 'Tax rates and settings',
    'description' => 'Configure the tax rates and settings.',
    'page callback' => 'uc_taxes_admin_settings',
    'access arguments' => array('configure taxes'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'uc_taxes.admin.inc',
  );
  $items['admin/store/settings/taxes/edit'] = array(
    'title' => 'Edit tax rule',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('uc_taxes_form'),
    'access arguments' => array('configure taxes'),
    'type' => MENU_CALLBACK,
    'file' => 'uc_taxes.admin.inc',
  );
  $items['admin/store/settings/taxes/copy'] = array(
    'page callback' => 'uc_taxes_copy',
    'access arguments' => array('configure taxes'),
    'type' => MENU_CALLBACK,
    'file' => 'uc_taxes.admin.inc',
  );
  $items['admin/store/settings/taxes/delete'] = array(
    'title' => 'Delete tax rule',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('uc_taxes_delete'),
    'access arguments' => array('configure taxes'),
    'type' => MENU_CALLBACK,
    'file' => 'uc_taxes.admin.inc',
  );
  $items['taxes/calculate'] = array(
    'page callback' => 'uc_taxes_javascript',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  return $items;
}

function uc_taxes_init() {
  require_once('uc_taxes.ca.inc');
}

function uc_taxes_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == 'uc_cart_checkout_form') {
    if (isset($form['panes']['payment'])) {
      drupal_add_js(array('ucTaxWeight' => variable_get('uc_li_tax_weight', 9)), 'setting');
      drupal_add_js(drupal_get_path('module', 'uc_taxes') .'/uc_taxes.js');
    }
  }
  else if ($form_id == 'uc_order_edit_form') {
    if (isset($form['quotes'])) {
      drupal_add_js(drupal_get_path('module', 'uc_taxes') .'/uc_taxes.js');
    }
  }
}

/*******************************************************************************
 * Übercart Hooks
 ******************************************************************************/

/**
 * Implementation of Übercart's hook_line_item().
 */
function uc_taxes_line_item() {
  $items[] = array(
    'id' => 'tax',
    'title' => t('Tax'),
    'callback' => 'uc_line_item_tax',
    'weight' => 9,
    'stored' => TRUE,
    'default' => FALSE,
    'calculated' => TRUE,
    'display_only' => FALSE,
  );
  $items[] = array(
    'id' => 'tax_subtotal',
    'title' => t('Subtotal excluding taxes'),
    'callback' => 'uc_line_item_tax_subtotal',
    'weight' => 7,
    'stored' => FALSE,
    'calculated' => FALSE,
  );

  return $items;
}

/**
 * Update and save tax line items to the order.
 */
function uc_taxes_order($op, $arg1, $arg2) {
  switch ($op) {
    case 'save':
      $changes = array();
      $line_items = uc_line_item_tax('load', $arg1);
      //$arg1->line_items = uc_order_load_line_items($arg1, TRUE);
      if (is_array($arg1->line_items)) {
        //drupal_set_message('<pre>'. var_export($arg1->line_items, TRUE) .'</pre>');
        foreach ($arg1->line_items as $line) {
          if ($line['type'] == 'tax') {
            $delete = TRUE;
            foreach ($line_items as $id => $new_line) {
              if ($new_line['title'] == $line['title']) {
                if ($new_line['amount'] != $line['amount']) {
                  uc_order_update_line_item($line['line_item_id'], $new_line['title'], $new_line['amount']);
                  $changes[] = t('Changed %title to %amount.', array('%amount' => uc_currency_format($new_line['amount']), '%title' => $new_line['title']));
                }
                unset($line_items[$id]);
                $delete = FALSE;
                break;
              }
            }
            if ($delete) {
              uc_order_delete_line_item($line['line_item_id']);
              $changes[] = t('Removed %title.', array('%title' => $line['title']));
            }
          }
        }
      }
      if (is_array($line_items)) {
        foreach ($line_items as $line) {
          uc_order_line_item_add($arg1->order_id, $line['id'], $line['title'], $line['amount'], $line['weight']);
          $changes[] = t('Added %amount for %title.', array('%amount' => uc_currency_format($line['amount']), '%title' => $line['title']));
        }
      }
      if (count($changes)) {
        uc_order_log_changes($arg1->order_id, $changes);
      }
    break;
  }
}

/******************************************************************************
 * Menu Callbacks                                                             *
 ******************************************************************************/

/**
 * Handle the tax line item.
 */
function uc_line_item_tax($op, $order) {
  switch ($op) {
    case 'cart-preview':
      $taxes = module_invoke_all('calculate_tax', $order);
      $script = '';
      foreach ($taxes as $tax) {
        $script .= "set_line_item('tax_". $tax->id ."', '". $tax->name ."', ". $tax->amount .", + ". variable_get('uc_li_tax_weight', 9) + ($tax->weight / 10) .", 1, false);\n";
      }
      if ($script) {
        drupal_add_js("if (Drupal.jsEnabled) { \$(document).ready(function() {
          if (window.set_line_item) {
            ". $script .";
            render_line_items();
          }
        })};", 'inline');
      }
      break;
    case 'load':
      $lines = array();
      $taxes = module_invoke_all('calculate_tax', $order);
      foreach ($taxes as $tax) {
        $lines[] = array(
          'id' => 'tax',
          'title' => $tax->name,
          'amount' => $tax->amount,
          'weight' => variable_get('uc_li_tax_weight', 9) + $tax->weight / 10,
        );
      }
      return $lines;
  }
}

function uc_line_item_tax_subtotal($op, $order) {
  $amount = 0;
  if (is_array($order->products)) {
    foreach ($order->products as $item) {
      $amount += $item->price * $item->qty;
    }
  }
  if (is_array($order->line_items)) {
    foreach ($order->line_items as $key => $line_item) {
      if (substr($line_item['type'], 0, 3) != 'tax') {
        $amount += $line_item['amount'];
        $different = TRUE;
      }
      else {
        $has_taxes = TRUE;
      }
    }
  }
  if (is_array($order->taxes)) {
    $has_taxes = TRUE;
  }
  if ($different && $has_taxes) {
    switch ($op) {
      case 'cart-preview':
        drupal_add_js("if (Drupal.jsEnabled) { \$(document).ready(function() {
          if (window.set_line_item) {
            set_line_item('tax_subtotal', '". t('Subtotal excluding taxes') ."', ". $amount .", ". variable_get('uc_li_tax_subtotal_weight', 8) .");
          }
        })};", 'inline');
      break;
      case 'load':
        return array(array(
          'id' => 'tax_subtotal',
          'title' => t('Subtotal excluding taxes'),
          'amount' => $amount,
          'weight' => variable_get('uc_li_tax_subtotal_weight', 7),
        ));
    }
  }
}

/******************************************************************************
 * Module and Helper Functions
 ******************************************************************************/

/**
 * Load all tax rates.
 */
function uc_taxes_get_rates() {
  static $taxes = array();

  if (empty($taxes)) {
    $result = db_query("SELECT * FROM {uc_taxes} ORDER BY weight");
    while ($rule = db_fetch_object($result)) {
      $rule->taxed_product_types = unserialize($rule->taxed_product_types);
      $rule->taxed_line_items = unserialize($rule->taxed_line_items);
      $taxes[$rule->id] = $rule;
    }
  }

  return $taxes;
}

/**
 * Calculates the taxes for an order based on enabled tax modules.
 *
 * @param $order
 *   The full order object for the order want to calculate taxes for.
 * @return
 *   An array of taxes for the order.
 */
function uc_taxes_calculate($order) {
  // Find any taxes specified by enabled modules.
  $taxes = module_invoke_all('calculate_tax', $order);

  return $taxes;
}

/**
 * Calculate the amount and types of taxes that apply to an order.
 */
function uc_taxes_calculate_tax($order) {
  global $user;
  if (is_numeric($order)) {
    $order = uc_order_load($order);
    $account = user_load(array('uid' => $order->uid));
  }
  else if ((int)$order->uid) {
    $account = user_load(array('uid' => intval($order->uid)));
  }
  else {
    $account = $user;
  }
  if (!is_object($order)) {
    return array();
  }
  if (empty($order->delivery_postal_code)) {
    $order->delivery_postal_code = $order->billing_postal_code;
  }
  if (empty($order->delivery_zone)) {
    $order->delivery_zone = $order->billing_zone;
  }
  if (empty($order->delivery_country)) {
    $order->delivery_country = $order->billing_country;
  }
  if (is_array($order->line_items)) {
    foreach ($order->line_items as $i => $line) {
      if (substr($line['type'], 0, 4) == 'tax_' && substr($line['type'], 5) != 'subtotal') {
        unset($order->line_items[$i]);
      }
    }
  }
  $taxes = uc_taxes_get_rates();
  $order->taxes = array();
  $arguments = array(
    'order' => array(
      '#entity' => 'uc_order',
      '#title' => t('Order'),
      '#data' => $order,
    ),
    'tax' => array(
      '#entity' => 'tax',
      '#title' => t('Tax rule'),
      // #data => each $tax in the following foreach() loop;
    ),
    'account' => array(
      '#entity' => 'user',
      '#title' => t('User'),
      '#data' => $account,
    ),
  );
  foreach ($taxes as $tax) {
    $arguments['tax']['#data'] = $tax;
    $predicates = ca_load_trigger_predicates('calculate_taxes');
    if (ca_evaluate_conditions($predicates['uc_taxes_'. $tax->id], $arguments)) {
      $line_item = uc_taxes_action_apply_tax($order, $tax);
      if ($line_item) {
        $order->taxes[$line_item->id] = $line_item;
      }
    }
  }
  return $order->taxes;
}

/**
 * AJAX callback for order preview.
 *
 * Calculate tax amounts for an order in the payment checkout pane.
 */
function uc_taxes_javascript() {
  drupal_set_header("Content-Type: text/javascript; charset=utf-8");
  $order = $_POST['order'];
  if ($order = unserialize(rawurldecode($order))) {
    $taxes = module_invoke_all('calculate_tax', $order);
    $subtotal = uc_line_item_tax_subtotal('load', $order);
    if (is_array($subtotal) && !empty($taxes)) {
      $taxes['subtotal'] = array('id' => 'subtotal', 'name' => $subtotal[0]['title'], 'amount' => $subtotal[0]['amount'], 'weight' => -10);
    }
    //drupal_set_message('<pre>'. print_r($taxes, TRUE) .'</pre>');
    if (count($taxes)) {
      print drupal_to_js((array)$taxes);
    }
    else {
      print '{}';
    }
  }
  else {
    print '{}';
  }
  exit();
}
