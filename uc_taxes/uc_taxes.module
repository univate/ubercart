<?php
// $Id: uc_taxes.module,v 1.11 2007-11-05 20:32:02 rszrama Exp $

/**
 * @file
 * Übercart Taxes module.
 *
 * Allows tax rules to be set up and applied to orders.
 *
 * Coded by Lyle Mantooth
 */


require_once('uc_taxes_workflow.inc');

/******************************************************************************
 * Drupal Hooks                                                               *
 ******************************************************************************/

/**
 * Implementation of hook_help().
 */
function uc_taxes_help($section){
  switch ($section){
    case 'admin/store/taxes':
      return t('Set the default tax rates for various geographic locations. Specify tax rates as a multiplier. Smaller areas override the rates of the larger areas.');
    break;
    case 'admin/store/taxes/products':
      return t("Select a product class to edit it's tax rules. These rules are applied only to products of that class.");
    break;
  }
}

/**
 * Implementation of hook_perm().
 */
function uc_taxes_perm(){
  return array('configure taxes');
}

/**
 * Implementation of hook_menu().
 */
function uc_taxes_menu($may_cache){
  $items = array();
  
  if ($may_cache){
    $items[] = array('path' => 'admin/store/settings/taxes',
      'title' => t('Tax settings'),
      'access' => user_access('configure taxes'),
      'callback' => 'uc_taxes_admin_settings',
      'type' => MENU_NORMAL_ITEM,
    );
    $items[] = array('path' => 'admin/store/settings/taxes/edit',
      'title' => t('Edit tax rule'),
      'access' => user_access('configure taxes'),
      'callback' => 'drupal_get_form',
      'callback arguments' => array('uc_taxes_form'),
      'type' => MENU_CALLBACK,
    );
    $items[] = array('path' => 'admin/store/settings/taxes/copy',
      'access' => user_access('configure taxes'),
      'callback' => 'uc_taxes_copy',
      'type' => MENU_CALLBACK,
    );
    $items[] = array('path' => 'admin/store/settings/taxes/delete',
      'title' => t('Delete tax rule'),
      'access' => user_access('configure taxes'),
      'callback' => 'drupal_get_form',
      'callback arguments' => array('uc_taxes_delete'),
      'type' => MENU_CALLBACK,
    );
  }
  else{
    drupal_add_css(drupal_get_path('module', 'uc_taxes') .'/uc_taxes.css');
    
    $items[] = array('path' => 'taxes/calculate',
      'access' => true,
      'callback' => 'uc_taxes_javascript',
      'type' => MENU_CALLBACK,
    );
  }
  
  return $items;
}

/*******************************************************************************
 * Übercart Hooks
 ******************************************************************************/

/**
 * Implementation of Übercart's hook_line_item().
 */
function uc_taxes_line_item() {
  $items[] = array(
    'id' => 'tax',
    'title' => t('Tax'),
    'callback' => 'uc_line_item_tax',
    'weight' => 9,
    'stored' => FALSE,
    'default' => FALSE,
    'calculated' => TRUE,
    'display_only' => FALSE,
  );

  return $items;
}

/**
 * Display a list of tax rates.
 */
function uc_taxes_admin_settings(){
  $header = array(t('Name'), t('Area'), t('Rate'), t('Taxed Product Types'), t('Taxed Line Items'), t('Weight'), array('data' => t('Actions'), 'colspan' => 3));
  $rows = array();
  $result = db_query("SELECT * FROM {uc_taxes} ORDER BY weight");
  while ($rule = db_fetch_object($result)){
    switch ($rule->type){
      case 'code':
        $area = $rule->area;
      break;
      case 'zone':
        $area = uc_get_zone_code($rule->area);
      break;
      case 'country':
        $country = uc_get_country_data(array('country_id' => $rule->area));
        $area = $country[0]['country_iso_code_3'];
    }
    $rule->taxed_product_types = (array)unserialize($rule->taxed_product_types);
    $rule->taxed_line_items = (array)unserialize($rule->taxed_line_items);
    $rows[] = array($rule->name, $area, $rule->rate * 100 .'%', implode(', ', $rule->taxed_product_types), implode(', ', $rule->taxed_line_items), $rule->weight, l(t('edit'), 'admin/store/settings/taxes/edit/'. $rule->id), l(t('copy'), 'admin/store/settings/taxes/copy/'. $rule->id), l(t('delete'), 'admin/store/settings/taxes/delete/'. $rule->id));
  }
  $output = theme('table', $header, $rows);
  $output .= l('Make a new tax rule.', 'admin/store/settings/taxes/edit');
  return $output;
}

/**
 * Create or edit a tax rule.
 *
 * @ingroup forms
 * @see uc_taxes_form_submit
 */
function uc_taxes_form($tax_id = 0){
  $form = array();
  if ($tax_id != 0){
    $form_values = db_fetch_array(db_query("SELECT * FROM {uc_taxes} WHERE id = %d", $tax_id));
    $form_values['taxed_product_types'] = array_values(unserialize($form_values['taxed_product_types']));
    $form_values['taxed_line_items'] = array_values(unserialize($form_values['taxed_line_items']));
  }
  
  $form['id'] = array('#type' => 'hidden', '#value' => $form_values['id']);
  $form['name'] = array('#type' => 'textfield',
    '#title' => t('Name'),
    '#default_value' => isset($form_values['name']) ? $form_values['name'] : '',
    '#required' => true,
  );
  $form['rate'] = array('#type' => 'textfield',
    '#title' => t('Rate'),
    '#description' => t('The tax rate as a percent or decimal. Examples: 6%, .06'),
    '#default_value' => isset($form_values['rate']) ? $form_values['rate'] : '',
    '#size' => 15,
    '#required' => true,
  );
  $types = array();
  foreach (uc_product_node_info() as $type => $info){
    $types[$type] = $info['name'];
  }
  $form['taxed_product_types'] = array('#type' => 'checkboxes',
    '#title' => t('Tax Product Types'),
    '#multiple' => true,
    '#options' => $types,
    '#default_value' => $form_values['taxed_product_types'],
    '#description' => t('Apply taxes to specific product types.'),
  );
  $options = array();
  foreach(_line_item_list() as $line_item){
    if (!in_array($line_item['id'], array('subtotal', 'total'))){
      $options[$line_item['id']] = $line_item['title'];
    }
  }
  $form['taxed_line_items'] = array('#type' => 'checkboxes',
    '#title' => t('Tax Shipping Costs'),
    '#multiple' => true,
    '#options' => $options,
    '#default_value' => $form_values['taxed_line_items'],
    '#description' => t('Includes any taxed_line_items cost in the subtotal for the order.'),
  );
  $form['weight'] = array('#type' => 'weight',
    '#title' => t('Weight'),
    '#default_value' => isset($form_values['weight']) ? $form_values['weight'] : 0,
    '#description' => t('Lighter taxes are applied to an order first. This value is unimportant if there are no taxes based on taxes.'),
  );
  $form['submit'] = array('#type' => 'submit', '#value' => t('Submit'));
  
  return $form;
}

/**
 * Submit handler for uc_taxes_form().
 */
function uc_taxes_form_submit($form_id, $form_values){
  if ($form_values['op'] == t('Submit')){
    if (strpos($form_values['rate'], '%')){
      $rate = floatval($form_values['rate']) / 100;
    }
    else{
      $rate = floatval($form_values['rate']);
    }
    if (($form_values['id']) != ''){
      db_query("UPDATE {uc_taxes} SET name = '%s', rate = %f, taxed_product_types = '%s', taxed_line_items = '%s', weight = %d WHERE id = %d",
        $form_values['name'], $rate, serialize(array_filter($form_values['taxed_product_types'])), serialize(array_filter($form_values['taxed_line_items'])), $form_values['weight'], $form_values['id']
      );
    }
    else{
      db_query("INSERT INTO {uc_taxes} (id, name, rate, taxed_product_types, taxed_line_items, weight) VALUES (%d, '%s', %f, '%s', '%s', %d)",
        db_next_id('{uc_taxes}_id'), $form_values['name'], $rate, serialize(array_filter($form_values['taxed_product_types'])), serialize(array_filter($form_values['taxed_line_items'])), $form_values['weight']
      );
    }
    
    drupal_set_message(t('%name settings have been saved.', array('%name' => $form_values['name'])));
  }
  return 'admin/store/settings/taxes';
}

/**
 * Copy a tax rule.
 */
function uc_taxes_copy($tax_id){
  $rule = db_fetch_array(db_query("SELECT * FROM {uc_taxes} WHERE id = %d", $tax_id));
  
  db_query("INSERT INTO {uc_taxes} (id, name, rate, taxed_product_types, taxed_line_items, weight) VALUES (%d, '%s', %f, '%s', '%s', %d)",
    db_next_id('{uc_taxes}_id'), $rule['name'], $rate, serialize(array_filter($rule['taxed_product_types'])), serialize(array_filter($rule['taxed_line_items'])), $rule['weight']
  );
  
  drupal_goto('admin/store/settings/taxes');
}

/**
 * Delete a tax rule.
 *
 * @ingroup forms
 * @see uc_taxes_delete_submit
 */
function uc_taxes_delete($tax_id = 0){
  //drupal_set_message($tax_id);
  if ($tax_id != 0){
    $rule = db_fetch_object(db_query("SELECT * FROM {uc_taxes} WHERE id = %d", $tax_id));
    $form = array(
      'id' => array('#type' => 'value', '#value' => $tax_id),
    );
    $output = confirm_form($form, t('Delete !rule?', array('!rule' => $rule->name)), 'admin/store/settings/taxes', '', t('Continue'), t('Cancel'));
    return $output;
  }
  else{
    drupal_goto('admin/store/settings/taxes');
  }
}

/**
 * Submit handler for uc_taxes_delete().
 */
function uc_taxes_delete_submit($form_id, $form_values){
  if ($form_values['confirm']){
    db_query("DELETE FROM {uc_taxes} WHERE id = %d", $form_values['id']);
  }
  
  drupal_set_message(t('Tax rule deleted.'));
  
  return 'admin/store/settings/taxes';
}

/**
 * Handle the tax line item.
 */
function uc_line_item_tax($op, $order) {
  switch ($op) {
    case 'cart-preview':
      /* $items = $order;
      $order = new stdClass();
      $order->products = $items; */
      $taxes = uc_taxes_calculate($order);
      $script = '';
      foreach ($taxes as $tax){
        $script .= "set_line_item('tax_". $tax['id'] ."', '". $tax['name'] ."', ". $tax['amount'] .", + ". variable_get('uc_li_tax_weight', 9) + ($tax['weight'] / 10) .");\n";
      }
      if ($script){
        drupal_add_js("\$(document).ready( function() { ". $script ." } );", 'inline');
      }
      break;
    case 'load':
    case 'display':
      $taxes = uc_taxes_calculate($order);
      foreach ($taxes as $tax){
        $lines[] = array(
          'id' => 'tax_'. $tax['id'],
          'title' => $tax['name'],
          'amount' => $tax['amount'],
          'weight' => variable_get('uc_li_tax_weight', 9) + $tax['weight'] / 10,
        );
      }
      return $lines;
  }
}


/******************************************************************************
 * Module and Helper Functions
 ******************************************************************************/

/**
 * Load all tax rates.
 */
function uc_taxes_get_rates(){
  static $taxes = array();
  
  if (empty($taxes)){
    $result = db_query("SELECT * FROM {uc_taxes} ORDER BY weight");
    while ($rule = db_fetch_object($result)){
      $rule->taxed_product_types = unserialize($rule->taxed_product_types);
      $rule->taxed_line_items = unserialize($rule->taxed_line_items);
      $taxes[$rule->id] = $rule;
    }
  }
  
  return $taxes;
}

/**
 * Calculate the amount and types of taxes that apply to an order.
 */
function uc_taxes_calculate($order){
  if (is_numeric($order)){
    $order = uc_order_load($order);
  }
  if (!is_object($order)){
    return array();
  }
  if (empty($order->delivery_postal_code)){
    $order->delivery_postal_code = $order->billing_postal_code;
  }
  if (empty($order->delivery_zone)){
    $order->delivery_zone = $order->billing_zone;
  }
  if (empty($order->delivery_country)){
    $order->delivery_country = $order->billing_country;
  }
  $_SESSION['taxes'] = array();
  $taxes = uc_taxes_get_rates();
  foreach ($taxes as $tax){
    // Gotta pass a fake line_item entity for the data to be saved to $_SESSION.
    workflow_ng_invoke_event('calculate_tax_'. $tax->id, $order, $tax, array());
  }
  $order->taxes = $_SESSION['taxes'];
  unset($_SESSION['taxes']);
  return $order->taxes;
}

/**
 * AJAX callback for order preview.
 *
 * Calculate tax amounts for an order in the payment checkout pane.
 */
function uc_taxes_javascript(){
  $order = $_POST['order'];
  if ($order = unserialize(rawurldecode($order))){
    $taxes = uc_taxes_calculate($order);
    if (count($taxes)){
      print drupal_to_js((array)$taxes);
    }
    else{
      print '[]';
    }
  }
  exit();
}
