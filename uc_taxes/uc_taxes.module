<?php

/******************************************************************************
 * Drupal Hooks                                                               *
 ******************************************************************************/

function uc_taxes_help($section){
  switch ($section){
    case 'admin/store/taxes':
      return t('Set the default tax rates for various geographic locations. Specify tax rates as a multiplier. Smaller areas override the rates of the larger areas.');
    break;
    case 'admin/store/taxes/products':
      return t("Select a product class to edit it's tax rules. These rules are applied only to products of that class.");
    break;
  }
}

function uc_taxes_perm(){
  return array('configure taxes');
}

function uc_taxes_menu($may_cache){
  $items = array();
  
  if ($may_cache){
    $items[] = array('path' => 'admin/store/settings/taxes',
      'title' => t('Tax settings'),
      'access' => user_access('configure taxes'),
      'callback' => 'drupal_get_form',
      'callback arguments' => array('uc_taxes_form', 0),
      'type' => MENU_NORMAL_ITEM,
    );
    $items[] = array('path' => 'admin/store/settings/taxes/edit',
      'title' => t('Edit tax rule'),
      'access' => user_access('configure taxes'),
      'callback' => 'drupal_get_form',
      'callback arguments' => array('uc_taxes_form'),
      'type' => MENU_CALLBACK,
    );
    $items[] = array('path' => 'admin/store/settings/taxes/copy',
      'access' => user_access('configure taxes'),
      'callback' => 'uc_taxes_copy',
      'type' => MENU_CALLBACK,
    );
    $items[] = array('path' => 'admin/store/settings/taxes/delete',
      'title' => t('Delete tax rule'),
      'access' => user_access('configure taxes'),
      'callback' => 'drupal_get_form',
      'callback arguments' => array('uc_taxes_delete'),
      'type' => MENU_CALLBACK,
    );
  }
  else{
    drupal_add_css(drupal_get_path('module', 'uc_taxes') .'/uc_taxes.css');
    
    $items[] = array('path' => 'taxes/calculate',
      'access' => true,
      'callback' => 'uc_taxes_javascript',
      'type' => MENU_CALLBACK,
    );
  }
  
  return $items;
}

/*******************************************************************************
 * Übercart Hooks
 ******************************************************************************/

/**
 * Implementation of hook_line_item().
 */
function uc_taxes_line_item() {
  $items[] = array(
    'id' => 'tax',
    'title' => t('Tax'),
    'callback' => 'uc_line_item_tax',
    'weight' => 9,
    'stored' => FALSE,
    'default' => FALSE,
    'calculated' => TRUE,
    'display_only' => FALSE,
  );

  return $items;
}

/* function uc_taxes_order($op, $arg1, $arg2){
  switch($op){
    case 'total':
      $total_tax = 0;
      $taxes = uc_taxes_calculate($arg1);
      foreach ($taxes as $tax){
        $total_tax += $tax['amount'];
      }
      return $total_tax;
  }
} */

function uc_taxes_form($tax_id = 0, $form_values = null){
  $form = array('#multistep' => true, '#redirect' => false);
  if ($tax_id != 0 && is_null($form_values)){
    $form_values = db_fetch_array(db_query("SELECT * FROM {uc_taxes} WHERE id = %d", $tax_id));
    $form_values['taxed_product_types'] = serialize(array_values(unserialize($form_values['taxed_product_types'])));
    $form_values['taxed_line_items'] = serialize(array_values(unserialize($form_values['taxed_line_items'])));
    $form_values['step'] = 0;
    $form_values['op'] = t('Next');
  }
  if (isset($form_values['area_zone'])){
    $form_values['area'] = $form_values['area_zone'];
  }
  switch ($form_values['op']){
    case t('Add Tax Rule'):
    case t('Next'):
      $form_values['step']++;
    break;
    case t('Back'):
      $form_values['step']--;
    break;
    default:
      $form_values['step'] = 0;
    break;
  }
  $form['step'] = array('#type' => 'hidden', '#value' => isset($form_values['step']) ? $form_values['step'] : 0);
  
  switch ($form_values['step']){
    case 0: // View tax rules.
      $form['start'] = array('#type' => 'submit', '#value' => t('Add Tax Rule'));
    break;
    case 1: // Name, type select.
      $form['id'] = array('#type' => 'hidden', '#value' => $form_values['id']);
      $form['name'] = array('#type' => 'textfield',
        '#title' => t('Name'),
        '#default_value' => isset($form_values['name']) ? $form_values['name'] : '',
        '#validate' => array('uc_taxes_element_validate' => array()),
        //'#required' => true,
      );
      $form['type'] = array('#type' => 'select',
        '#title' => t('Scope'),
        '#options' => array('code' => uc_get_field_name('postal_code'), 'zone' => uc_get_field_name('zone'), 'country' => uc_get_field_name('country')),
        '#default_value' => isset($form_values['type']) ? $form_values['type'] : 'code',
        '#validate' => array('uc_taxes_element_validate' => array()),
        //'#required' => true,
      );
      $form['area'] = array('#type' => 'hidden', '#value' => $form_values['area']);
      $form['rate'] = array('#type' => 'hidden', '#value' => $form_values['rate']);
      $form['taxed_product_types'] = array('#type' => 'hidden', '#value' => $form_values['taxed_product_types']);
      $form['taxed_line_items'] = array('#type' => 'hidden', '#value' => $form_values['taxed_line_items']);
      $form['weight'] = array('#type' => 'hidden', '#value' => $form_values['weight']);
      $form['conditions'] = array('#type' => 'hidden', '#value' => $form_values['conditions']);
      $form['cancel'] = array('#type' => 'submit', '#value' => t('Cancel'));
      $form['next'] = array('#type' => 'submit', '#value' => t('Next'));
    break;
    case 2: // Choose area
      $form['id'] = array('#type' => 'hidden', '#value' => $form_values['id']);
      $form['name'] = array('#type' => 'hidden', '#value' => $form_values['name']);
      $form['type'] = array('#type' => 'hidden', '#value' => $form_values['type']);
      switch ($form_values['type']){
        case 'code':
          $form['area'] = array('#type' => 'textfield',
            '#title' => t('Area'),
            '#default_value' => $form_values['area'],
            '#description' => t('Specify taxes that are specific to postal code areas.
              A "*" may be used as a wild card to set a rate for multiple areas.
              Example: In the US, 402* represents all areas from 40200 to 40299.'),
            '#size' => 15,
            '#validate' => array('uc_taxes_element_validate' => array()),
            //'#required' => true,
          );
        break;
        case 'zone':
          $zone = db_fetch_object(db_query("SELECT * FROM {uc_zones} WHERE zone_id = %d", $form_values['area']));
          $form['area_country'] = uc_country_select(uc_get_field_name('country'), isset($zone->zone_country_id) ? $zone->zone_country_id : null);
          $form['area_zone'] = uc_zone_select(uc_get_field_name('zone'), isset($form_values['area']) ? $form_values['area'] : null, null, isset($_POST['area_country']) ? intval($_POST['area_country']) : $zone->zone_country_id);
          $form['area'] = array('#type' => 'hidden', '#value' => $form_values['area']);
        break;
        case 'country':
          $form['area'] = uc_country_select(t('Country'), isset($form_values['area']) ? $form_values['area'] : null);
        break;
      }
      $form['rate'] = array('#type' => 'hidden', '#value' => $form_values['rate']);
      $form['taxed_product_types'] = array('#type' => 'hidden', '#value' => $form_values['taxed_product_types']);
      $form['taxed_line_items'] = array('#type' => 'hidden', '#value' => $form_values['taxed_line_items']);
      $form['weight'] = array('#type' => 'hidden', '#value' => $form_values['weight']);
      $form['conditions'] = array('#type' => 'hidden', '#value' => $form_values['conditions']);
      $form['back'] = array('#type' => 'submit', '#value' => t('Back'));
      $form['next'] = array('#type' => 'submit', '#value' => t('Next'));
    break;
    case 3: // Amount, etc.?
      $form['id'] = array('#type' => 'hidden', '#value' => $form_values['id']);
      $form['name'] = array('#type' => 'hidden', '#value' => $form_values['name']);
      $form['type'] = array('#type' => 'hidden', '#value' => $form_values['type']);
      $form['area'] = array('#type' => 'hidden', '#value' => $form_values['area']);
      $form['rate'] = array('#type' => 'textfield',
        '#title' => t('Rate'),
        '#description' => t('The tax rate as a percent or decimal. Examples: 6%, .06'),
        '#default_value' => isset($form_values['rate']) ? $form_values['rate'] : '',
        '#size' => 15,
        '#validate' => array('uc_taxes_element_validate' => array()),
        //'#required' => true,
      );
      $types = array();
      foreach (uc_product_node_info() as $type => $info){
        $types[$type] = $info['name'];
      }
      $form['taxed_product_types'] = array('#type' => 'checkboxes',
        '#title' => t('Tax Product Types'),
        '#multiple' => true,
        '#options' => $types,
        '#description' => t('Apply taxes to specific product types.'),
      );
      $options = array();
      foreach(_line_item_list() as $line_item){
        if (!in_array($line_item['id'], array('subtotal', 'total'))){
          $options[$line_item['id']] = $line_item['title'];
        }
      }
      $form['taxed_line_items'] = array('#type' => 'checkboxes',
        '#title' => t('Tax Shipping Costs'),
        '#multiple' => true,
        '#options' => $options,
        '#description' => t('Includes any taxed_line_items cost in the subtotal for the order.'),
      );
      $form['weight'] = array('#type' => 'weight',
        '#title' => t('Weight'),
        '#default_value' => isset($form_values['weight']) ? $form_values['weight'] : 0,
        '#description' => t('Lighter taxes are applied to an order first. This value is unimportant if there are no cumulative taxes.'),
      );
      $form['conditions'] = array('#type' => 'textarea',
        '#title' => t('Custom conditions'),
        '#default_value' => isset($form_values['conditions']) ? $form_values['conditions'] : '',
        '#description' => t("For experts only. Enter PHP code that returns true or false, which indicates that this rule applies to an order. Do not include &lt;?php ?&gt; tags. This code is evaluated after the rule matches the customer's address.<br />\nMisusing this field can really mess up your site. <b>DO NOT BE STUPID.</b>"),
      );
      $form['back'] = array('#type' => 'submit', '#value' => t('Back'));
      $form['finish'] = array('#type' => 'submit', '#value' => t('Submit'));
    break;
  }
  
  /* if ($form_values){
    drupal_set_message('Tax ID: '. $tax_id);
    drupal_set_message('Form elements:<pre>'. print_r($form, true) .'</pre>');
    drupal_set_message('Form values:<pre>'. print_r($form_values, true) .'</pre>');
    drupal_set_message('POST:<pre>'. print_r($_POST, true) .'</pre>');
  } */
  
  return $form;
}

function theme_uc_taxes_form($form){
  if ($form['step']['#value'] == 0){
    $header = array(t('Name'), t('Area'), t('Rate'), t('Taxed Product Types'), t('Taxed Line Items'), t('Weight'), array('data' => t('Actions'), 'colspan' => 3));
    $rows = array();
    $result = db_query("SELECT * FROM {uc_taxes} ORDER BY weight");
    while ($rule = db_fetch_object($result)){
      switch ($rule->type){
        case 'code':
          $area = $rule->area;
        break;
        case 'zone':
          $area = uc_get_zone_code($rule->area);
        break;
        case 'country':
          $country = uc_get_country_data(array('country_id' => $rule->area));
          $area = $country[0]['country_iso_code_3'];
      }
      $rule->taxed_product_types = (array)unserialize($rule->taxed_product_types);
      $rule->taxed_line_items = (array)unserialize($rule->taxed_line_items);
      $rows[] = array($rule->name, $area, $rule->rate * 100 .'%', implode(', ', $rule->taxed_product_types), implode(', ', $rule->taxed_line_items), $rule->weight, l(t('edit'), 'admin/store/settings/taxes/edit/'. $rule->id), l(t('copy'), 'admin/store/settings/taxes/copy/'. $rule->id), l(t('delete'), 'admin/store/settings/taxes/delete/'. $rule->id));
    }
    $output = theme('table', $header, $rows);
  }
  $output .= drupal_render($form);
  
  return $output;
}

function uc_taxes_element_validate($elements){
  if ($GLOBALS['form_values']['op'] == t('Submit') || $GLOBALS['form_values']['op'] == t('Next')){
    if (empty($elements['#value']) && $elements['#value'] !== '0') {
      form_error($elements, t('!name field is required.', array('!name' => $elements['#title'])));
    }
  }
}

function uc_taxes_form_submit($form_id, $form_values){
  if ($form_values['op'] == t('Cancel')){
    drupal_goto('admin/store/settings/taxes');
  }
  if ($form_values['op'] == t('Submit')){
    if (strpos($form_values['rate'], '%')){
      $rate = floatval($form_values['rate']) / 100;
    }
    else{
      $rate = floatval($form_values['rate']);
    }
    if (($form_values['id']) != ''){
      db_query("UPDATE {uc_taxes} SET name = '%s', area = '%s', type = '%s', rate = %f, taxed_product_types = '%s', taxed_line_items = '%s', weight = %d, conditions = '%s' WHERE id = %d",
        $form_values['name'], $form_values['area'], $form_values['type'], $rate, serialize(array_filter($form_values['taxed_product_types'])), serialize(array_filter($form_values['taxed_line_items'])), $form_values['weight'], $form_values['conditions'], $form_values['id']
      );
    }
    else{
      db_query("INSERT INTO {uc_taxes} (id, name, area, type, rate, taxed_product_types, taxed_line_items, weight, conditions) VALUES (%d, '%s', '%s', '%s', %f, '%s', '%s', %d, '%s')",
        db_next_id('{uc_taxes}_id'), $form_values['name'], $form_values['area'], $form_values['type'], $rate, serialize(array_filter($form_values['taxed_product_types'])), serialize(array_filter($form_values['taxed_line_items'])), $form_values['weight'], $form_values['conditions']
      );
    }
    
    drupal_set_message(t('%name settings have been saved.', array('%name' => $form_values['name'])));
    
    drupal_goto('admin/store/settings/taxes'); // workaround #redirect = false for editing tax rules.
  }
}

function uc_taxes_copy($tax_id){
  $rule = db_fetch_array(db_query("SELECT * FROM {uc_taxes} WHERE id = %d", $tax_id));
  
  db_query("INSERT INTO {uc_taxes} (id, name, area, type, rate, taxed_line_items, cumulative, weight) VALUES (%d, '%s', '%s', '%s', %f, '%s', %d, %d)",
    db_next_id('{uc_taxes}_id'), $rule['name'], $rule['area'], $rule['type'], $rule['rate'], $rule['taxed_line_items'], $rule['cumulative'], $rule['weight']
  );
  
  drupal_goto('admin/store/settings/taxes');
}

function uc_taxes_delete($tax_id = 0){
  //drupal_set_message($tax_id);
  if ($tax_id != 0){
    $rule = db_fetch_object(db_query("SELECT * FROM {uc_taxes} WHERE id = %d", $tax_id));
    $form = array(
      'id' => array('#type' => 'value', '#value' => $tax_id),
    );
    $output = confirm_form($form, t('Delete !rule?', array('!rule' => $rule->name)), 'admin/store/settings/taxes', '', t('Continue'), t('Cancel'));
    return $output;
  }
  else{
    drupal_goto('admin/store/settings/taxes');
  }
}

function uc_taxes_delete_submit($form_id, $form_values){
  if ($form_values['confirm']){
    db_query("DELETE FROM {uc_taxes} WHERE id = %d", $form_values['id']);
  }
  
  drupal_set_message(t('Tax rule deleted.'));
  
  return 'admin/store/settings/taxes';
}

/**
 * Handle the tax line item.
 */
function uc_line_item_tax($op, $order) {
  switch ($op) {
    case 'cart-preview':
      /* $items = $order;
      $order = new stdClass();
      $order->products = $items; */
      $taxes = uc_taxes_calculate($order);
      $script = '';
      foreach ($taxes as $tax){
        $script .= "set_line_item('tax_". $tax['id'] ."', '". $tax['name'] ."', ". $tax['amount'] .", + ". variable_get('uc_li_tax_weight', 9) + ($tax['weight'] / 10) .");\n";
      }
      if ($script){
        drupal_add_js("\$(document).ready( function() { ". $script ." } );", 'inline');
      }
      break;
    case 'load':
    case 'display':
      $taxes = uc_taxes_calculate($order);
      foreach ($taxes as $tax){
        $lines[] = array(
          'id' => 'tax_'. $tax['id'],
          'title' => $tax['name'],
          'amount' => $tax['amount'],
          'weight' => variable_get('uc_li_tax_weight', 9) + $tax['weight'] / 10,
        );
      }
      return $lines;
  }
}


/******************************************************************************
 * Module and Helper Functions
 ******************************************************************************/

function uc_taxes_get_rates(){
  static $taxes = array();
  
  if (empty($taxes)){
    $result = db_query("SELECT * FROM {uc_taxes} ORDER BY weight");
    while ($rule = db_fetch_object($result)){
      $rule->taxed_product_types = unserialize($rule->taxed_product_types);
      $rule->taxed_line_items = unserialize($rule->taxed_line_items);
      $taxes[$rule->id] = $rule;
    }
  }
  
  return $taxes;
}

function uc_taxes_calculate($order){
  if (is_numeric($order)){
    $order = uc_order_load($order);
  }
  else if (!is_object($order)){
    return array();
  }
  if (empty($order->delivery_postal_code)){
    $order->delivery_postal_code = $order->billing_postal_code;
  }
  if (empty($order->delivery_zone)){
    $order->delivery_zone = $order->billing_zone;
  }
  if (empty($order->delivery_country)){
    $order->delivery_country = $order->billing_country;
  }
  $tax_rules = uc_taxes_get_rates();
  $subtotal = 0;
  $taxes = array();
  foreach ($tax_rules as $rule){
    $conditions = $rule->conditions;
    if (!$conditions){
      $conditions = 'return true;';
    }
    if ((uc_taxes_match_area($rule, $order)) && eval($conditions)){
      $rate = $rule->rate;
      $amount = 0;
      $debug = ' (';
      if (is_array($order->products)) {
        foreach($order->products as $item){
          $node = node_load($item->nid);
          if (in_array($node->type, $rule->taxed_product_types)){
            $amount += $item->price * $item->qty * $rate;
            $debug .= ' + '. $item->price;
          }
        }
      }
      $debug = substr($debug, 3);
      $taxed_line_items = $rule->taxed_line_items;
      if (is_array($order->line_items) && is_array($taxed_line_items)){
        foreach ($order->line_items as $key => $line_item){
          if (strpos($line_item['type'], 'tax_') !== false){
            // Calculated taxes might be different from the line item, so handle them later.
            continue;
          }
          if (in_array($line_item['type'], $taxed_line_items) && $line_item['type'] != 'tax'){
            $amount += $line_item['amount'] * $rate;
            $debug .= ' + '. $line_item['amount'];
          }
        }
        if (in_array('tax', $taxed_line_items)){
          foreach ($taxes as $id => $taxed_tax){
            if ($taxed_tax['weight'] < $rule->weight){
              $amount += $taxed_tax['amount'] * $rate;
              $debug .= ' + '. $taxed_tax['amount'];
            }
          }
        }
      }
      $debug .= ') * '. $rate;
      $taxes[$rule->id] = array('id' => $rule->id, 'name' => $rule->name /* . $debug */, 'amount' => $amount, 'weight' => $rule->weight);
    }
  }
  return $taxes;
}

function uc_taxes_match_area($tax, $order){
  if (!is_object($order)){
    return false;
  }
  switch ($tax->type){
    case 'code':
      $code = rtrim($tax->area, '*');
      return (strpos($order->delivery_postal_code, $code) === 0);
    case 'zone':
      return $tax->area == $order->delivery_zone;
    case 'country':
      return $tax->area == $order->delivery_country;
  }
}

function uc_taxes_javascript(){
  $order = $_POST['order'];
  if ($order = unserialize(rawurldecode($order))){
    $taxes = uc_taxes_calculate($order);
    if (count($taxes)){
      print drupal_to_js((array)$taxes);
    }
    else{
      print '[]';
    }
    //exit();
  }
}
