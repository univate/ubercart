<?php
// $Id: uc_taxes.module,v 1.12.2.1 2008-08-06 13:41:28 islandusurper Exp $

/**
 * @file
 * Übercart Taxes module.
 *
 * Allows tax rules to be set up and applied to orders.
 *
 * Coded by Lyle Mantooth
 */

/******************************************************************************
 * Drupal Hooks                                                               *
 ******************************************************************************/

function uc_taxes_help($path, $arg) {
  $output = '';
  switch ($path) {
    case 'admin/store/settings/taxes':
      $output .= t('After setting up tax rates and rules on this page, go to the
  <a href="!link">Conditional actions settings</a> to add
  conditions to the taxes. Especially important are the geographic area
  conditions for the delivery address.', array('!link' => url('admin/settings/ca')));
    break;
  }
  return $output;
}

/**
 * Implementation of hook_perm().
 */
function uc_taxes_perm() {
  return array('configure taxes');
}

/**
 * Implementation of hook_menu().
 */
function uc_taxes_menu() {
  $items = array();

  $items['admin/store/settings/taxes'] = array(
    'title' => 'Tax rates and settings',
    'page callback' => 'uc_taxes_admin_settings',
    'access arguments' => array('configure taxes'),
    'type' => MENU_NORMAL_ITEM,
  );
  $items['admin/store/settings/taxes/edit'] = array(
    'title' => 'Edit tax rule',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('uc_taxes_form'),
    'access arguments' => array('configure taxes'),
    'type' => MENU_CALLBACK,
  );
  $items['admin/store/settings/taxes/copy'] = array(
    'page callback' => 'uc_taxes_copy',
    'access arguments' => array('configure taxes'),
    'type' => MENU_CALLBACK,
  );
  $items['admin/store/settings/taxes/delete'] = array(
    'title' => 'Delete tax rule',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('uc_taxes_delete'),
    'access arguments' => array('configure taxes'),
    'type' => MENU_CALLBACK,
  );
  $items['taxes/calculate'] = array(
    'page callback' => 'uc_taxes_javascript',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  return $items;
}

function uc_taxes_init() {
  require_once('uc_taxes.ca.inc');
}

function uc_taxes_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == 'uc_cart_checkout_form') {
    if (isset($form['panes']['payment'])) {
      uc_add_js('var tax_weight = '. variable_get('uc_li_tax_weight', 9), 'inline');
      uc_add_js(drupal_get_path('module', 'uc_taxes') .'/uc_taxes.js');
    }
  }
  else if ($form_id == 'uc_order_edit_form') {
    if (isset($form['quotes'])) {
      uc_add_js(drupal_get_path('module', 'uc_taxes') .'/uc_taxes.js');
    }
  }
}

/*******************************************************************************
 * Übercart Hooks
 ******************************************************************************/

/**
 * Implementation of Übercart's hook_line_item().
 */
function uc_taxes_line_item() {
  $items[] = array(
    'id' => 'tax',
    'title' => t('Tax'),
    'callback' => 'uc_line_item_tax',
    'weight' => 9,
    'stored' => true,
    'default' => FALSE,
    'calculated' => TRUE,
    'display_only' => FALSE,
  );
  $items[] = array(
    'id' => 'tax_subtotal',
    'title' => t('Subtotal excluding taxes'),
    'callback' => 'uc_line_item_tax_subtotal',
    'weight' => 7,
    'stored' => false,
    'calculated' => false,
  );

  return $items;
}

/**
 * Update and save tax line items to the order.
 */
function uc_taxes_order($op, $arg1, $arg2) {
  switch ($op) {
    case 'save':
      $changes = array();
      $line_items = uc_line_item_tax('load', $arg1);
      //$arg1->line_items = uc_order_load_line_items($arg1, true);
      if (is_array($arg1->line_items)) {
        //drupal_set_message('<pre>'. var_export($arg1->line_items, true) .'</pre>');
        foreach ($arg1->line_items as $line) {
          if ($line['type'] == 'tax') {
            $delete = true;
            foreach ($line_items as $id => $new_line) {
              if ($new_line['title'] == $line['title']) {
                if ($new_line['amount'] != $line['amount']) {
                  uc_order_update_line_item($line['line_item_id'], $new_line['title'], $new_line['amount']);
                  $changes[] = t('Changed %title to %amount.', array('%amount' => uc_currency_format($new_line['amount']), '%title' => $new_line['title']));
                }
                unset($line_items[$id]);
                $delete = false;
                break;
              }
            }
            if ($delete) {
              uc_order_delete_line_item($line['line_item_id']);
              $changes[] = t('Removed %title.', array('%title' => $line['title']));
            }
          }
        }
      }
      if (is_array($line_items)) {
        foreach ($line_items as $line) {
          uc_order_line_item_add($arg1->order_id, $line['id'], $line['title'], $line['amount'], $line['weight']);
          $changes[] = t('Added %amount for %title.', array('%amount' => uc_currency_format($line['amount']), '%title' => $line['title']));
        }
      }
      if (count($changes)) {
        uc_order_log_changes($arg1->order_id, $changes);
      }
    break;
  }
}

/******************************************************************************
 * Menu Callbacks                                                             *
 ******************************************************************************/

/**
 * Display a list of tax rates.
 */
function uc_taxes_admin_settings() {
  $header = array(t('Name'), t('Rate'), t('Taxed product types'), t('Taxed line items'), t('Weight'), array('data' => t('Actions'), 'colspan' => 3));
  $rows = array();
  $result = db_query("SELECT * FROM {uc_taxes} ORDER BY weight");
  while ($rule = db_fetch_object($result)) {
    $rule->taxed_product_types = (array)unserialize($rule->taxed_product_types);
    $rule->taxed_line_items = (array)unserialize($rule->taxed_line_items);
    $rows[] = array($rule->name, $rule->rate * 100 .'%', implode(', ', $rule->taxed_product_types), implode(', ', $rule->taxed_line_items), $rule->weight, l(t('edit'), 'admin/store/settings/taxes/edit/'. $rule->id), l(t('copy'), 'admin/store/settings/taxes/copy/'. $rule->id), l(t('delete'), 'admin/store/settings/taxes/delete/'. $rule->id));
  }
  $output = theme('table', $header, $rows);
  $output .= l('Make a new tax rule.', 'admin/store/settings/taxes/edit');
  return $output;
}

/**
 * Create or edit a tax rule.
 *
 * @ingroup forms
 * @see uc_taxes_form_submit
 */
function uc_taxes_form($form_state, $tax_id = 0) {
  $form = array();
  if ($tax_id != 0) {
    $form_state['values'] = db_fetch_array(db_query("SELECT * FROM {uc_taxes} WHERE id = %d", $tax_id));
    $form_state['values']['taxed_product_types'] = array_values(unserialize($form_state['values']['taxed_product_types']));
    $form_state['values']['taxed_line_items'] = array_values(unserialize($form_state['values']['taxed_line_items']));
  }

  $form['id'] = array('#type' => 'hidden', '#value' => $form_state['values']['id']);
  $form['name'] = array('#type' => 'textfield',
    '#title' => t('Name'),
    '#default_value' => isset($form_state['values']['name']) ? $form_state['values']['name'] : '',
    '#required' => true,
  );
  $form['rate'] = array('#type' => 'textfield',
    '#title' => t('Rate'),
    '#description' => t('The tax rate as a percent or decimal. Examples: 6%, .06'),
    '#default_value' => isset($form_state['values']['rate']) ? $form_state['values']['rate'] : '',
    '#size' => 15,
    '#required' => true,
  );
  $types = array();
  $node_types = module_invoke_all('node_info');
  $product_types = module_invoke_all('product_types');
  foreach ($product_types as $type) {
    $types[$type] = $node_types[$type]['name'];
  }
  $form['taxed_product_types'] = array('#type' => 'checkboxes',
    '#title' => t('Taxed product types'),
    '#multiple' => true,
    '#options' => $types,
    '#default_value' => isset($form_state['values']['taxed_product_types']) ? $form_state['values']['taxed_product_types'] : NULL,
    '#description' => t('Apply taxes to specific product types.'),
  );
  $options = array();
  foreach (_line_item_list() as $line_item) {
    if (!in_array($line_item['id'], array('subtotal', 'tax_subtotal', 'total'))) {
      $options[$line_item['id']] = $line_item['title'];
    }
  }
  $form['taxed_line_items'] = array('#type' => 'checkboxes',
    '#title' => t('Taxed line items'),
    '#multiple' => true,
    '#options' => $options,
    '#default_value' => isset($form_state['values']['taxed_line_items']) ? $form_state['values']['taxed_line_items'] : NULL,
    '#description' => t('Adds the checked line item types to the total before applying this tax.'),
  );
  $form['weight'] = array('#type' => 'weight',
    '#title' => t('Weight'),
    '#default_value' => isset($form_state['values']['weight']) ? $form_state['values']['weight'] : 0,
    '#description' => t('Lighter taxes are applied to an order first. This value is unimportant if there are no taxes on tax line items.'),
  );
  $form['submit'] = array('#type' => 'submit', '#value' => t('Submit'));

  return $form;
}

/**
 * Submit handler for uc_taxes_form().
 */
function uc_taxes_form_submit($form, &$form_state) {
  if ($form_state['values']['op'] == t('Submit')) {
    if (strpos($form_state['values']['rate'], '%')) {
      $rate = floatval($form_state['values']['rate']) / 100;
    }
    else {
      $rate = floatval($form_state['values']['rate']);
    }
    if (($form_state['values']['id']) != '') {
      db_query("UPDATE {uc_taxes} SET name = '%s', rate = %f, taxed_product_types = '%s', taxed_line_items = '%s', weight = %d WHERE id = %d",
        $form_state['values']['name'], $rate, serialize(array_filter($form_state['values']['taxed_product_types'])), serialize(array_filter($form_state['values']['taxed_line_items'])), $form_state['values']['weight'], $form_state['values']['id']
      );
    }
    else {
      db_query("INSERT INTO {uc_taxes} (name, rate, taxed_product_types, taxed_line_items, weight) VALUES ('%s', %f, '%s', '%s', %d)",
        $form_state['values']['name'], $rate, serialize(array_filter($form_state['values']['taxed_product_types'])), serialize(array_filter($form_state['values']['taxed_line_items'])), $form_state['values']['weight']
      );
    }

    drupal_set_message(t('%name settings have been saved.', array('%name' => $form_state['values']['name'])));
  }
  $form_state['redirect'] = 'admin/store/settings/taxes';
}

/**
 * Copy a tax rule.
 */
function uc_taxes_copy($tax_id) {
  $rule = db_fetch_array(db_query("SELECT * FROM {uc_taxes} WHERE id = %d", $tax_id));

  db_query("INSERT INTO {uc_taxes} (name, rate, taxed_product_types, taxed_line_items, weight) VALUES ('%s', %f, '%s', '%s', %d)",
    t('Copy of @rule', array('%rule' => $rule['name'])), $rule['rate'], $rule['taxed_product_types'], $rule['taxed_line_items'], $rule['weight']
  );

  drupal_goto('admin/store/settings/taxes');
}

/**
 * Delete a tax rule.
 *
 * @ingroup forms
 * @see uc_taxes_delete_submit
 */
function uc_taxes_delete($tax_id = 0) {
  //drupal_set_message($tax_id);
  if ($tax_id != 0) {
    $rule = db_fetch_object(db_query("SELECT * FROM {uc_taxes} WHERE id = %d", $tax_id));
    $form = array(
      'id' => array('#type' => 'value', '#value' => $tax_id),
    );
    $output = confirm_form($form, t('Delete !rule?', array('!rule' => $rule->name)), 'admin/store/settings/taxes', '', t('Continue'), t('Cancel'));
    return $output;
  }
  else {
    drupal_goto('admin/store/settings/taxes');
  }
}

/**
 * Submit handler for uc_taxes_delete().
 */
function uc_taxes_delete_submit($form, &$form_state) {
  if ($form_state['values']['confirm']) {
    db_query("DELETE FROM {uc_taxes} WHERE id = %d", $form_state['values']['id']);
    ca_delete_predicate('uc_taxes_'. $form_state['values']['id']);
  }

  drupal_set_message(t('Tax rule deleted.'));

  $form_state['redirect'] = 'admin/store/settings/taxes';
}

/**
 * Handle the tax line item.
 */
function uc_line_item_tax($op, $order) {
  switch ($op) {
    case 'cart-preview':
      $taxes = uc_taxes_calculate($order);
      $script = '';
      foreach ($taxes as $tax) {
        $script .= "set_line_item('tax_". $tax->id ."', '". $tax->name ."', ". $tax->amount .", + ". variable_get('uc_li_tax_weight', 9) + ($tax->weight / 10) .", 1, false);\n";
      }
      if ($script) {
        uc_add_js("\$(document).ready(function() {
          if (window.set_line_item) {
            ". $script .";
            render_line_items();
          }
        });", 'inline');
      }
      break;
    case 'load':
      $lines = array();
      $taxes = uc_taxes_calculate($order);
      foreach ($taxes as $tax) {
        $lines[] = array(
          'id' => 'tax',
          'title' => $tax->name,
          'amount' => $tax->amount,
          'weight' => variable_get('uc_li_tax_weight', 9) + $tax->weight / 10,
        );
      }
      return $lines;
  }
}

function uc_line_item_tax_subtotal($op, $order) {
  $amount = 0;
  if (is_array($order->products)) {
    foreach ($order->products as $item) {
      $amount += $item->price * $item->qty;
    }
  }
  if (is_array($order->line_items)) {
    foreach ($order->line_items as $key => $line_item) {
      if (substr($line_item['type'], 0, 3) != 'tax') {
        $amount += $line_item['amount'];
        $different = true;
      }
      else {
        $has_taxes = true;
      }
    }
  }
  if (is_array($order->taxes)) {
    $has_taxes = true;
  }
  if ($different && $has_taxes) {
    switch ($op) {
      case 'cart-preview':
        uc_add_js("\$(document).ready(function() {
          if (window.set_line_item) {
            set_line_item('tax_subtotal', '". t('Subtotal excluding taxes') ."', ". $amount .", ". variable_get('uc_li_tax_subtotal_weight', 8) .");
          }
        });", 'inline');
      break;
      case 'load':
        return array(array(
          'id' => 'tax_subtotal',
          'title' => t('Subtotal excluding taxes'),
          'amount' => $amount,
          'weight' => variable_get('uc_li_tax_subtotal_weight', 7),
        ));
    }
  }
}

/******************************************************************************
 * Module and Helper Functions
 ******************************************************************************/

/**
 * Load all tax rates.
 */
function uc_taxes_get_rates() {
  static $taxes = array();

  if (empty($taxes)) {
    $result = db_query("SELECT * FROM {uc_taxes} ORDER BY weight");
    while ($rule = db_fetch_object($result)) {
      $rule->taxed_product_types = unserialize($rule->taxed_product_types);
      $rule->taxed_line_items = unserialize($rule->taxed_line_items);
      $taxes[$rule->id] = $rule;
    }
  }

  return $taxes;
}

/**
 * Calculate the amount and types of taxes that apply to an order.
 */
function uc_taxes_calculate($order) {
  global $user;
  if (is_numeric($order)) {
    $order = uc_order_load($order);
    $account = user_load(array('uid' => $order->uid));
  }
  else if ((int)$order->uid) {
    $account = user_load(array('uid' => intval($order->uid)));
  }
  else {
    $account = $user;
  }
  if (!is_object($order)) {
    return array();
  }
  if (empty($order->delivery_postal_code)) {
    $order->delivery_postal_code = $order->billing_postal_code;
  }
  if (empty($order->delivery_zone)) {
    $order->delivery_zone = $order->billing_zone;
  }
  if (empty($order->delivery_country)) {
    $order->delivery_country = $order->billing_country;
  }
  if (is_array($order->line_items)) {
    foreach ($order->line_items as $i => $line) {
      if (substr($line['type'], 0, 4) == 'tax_' && substr($line['type'], 5) != 'subtotal') {
        unset($order->line_items[$i]);
      }
    }
  }
  $_SESSION['taxes'] = array();
  $taxes = uc_taxes_get_rates();
  $order->taxes = array();
  $arguments = array(
    'order' => array(
      '#entity' => 'uc_order',
      '#title' => t('Order'),
      '#data' => $order,
    ),
    'tax' => array(
      '#entity' => 'tax',
      '#title' => t('Tax rule'),
      // #data => each $tax in the following foreach() loop;
    ),
    'account' => array(
      '#entity' => 'user',
      '#title' => t('User'),
      '#data' => $account,
    ),
  );
  foreach ($taxes as $tax) {
    $arguments['tax']['#data'] = $tax;
    $predicates = ca_load_trigger_predicates('calculate_taxes');
    if (ca_evaluate_conditions($predicates['uc_taxes_'. $tax->id], $arguments)) {
      $line_item = uc_taxes_action_apply_tax($order, $tax);
      if ($line_item) {
        $order->taxes[$line_item->id] = $line_item;
      }
    }
  }
  return $order->taxes;
}

/**
 * AJAX callback for order preview.
 *
 * Calculate tax amounts for an order in the payment checkout pane.
 */
function uc_taxes_javascript() {
  drupal_set_header("Content-Type: text/javascript; charset=utf-8");
  $order = $_POST['order'];
  if ($order = unserialize(rawurldecode($order))) {
    $taxes = uc_taxes_calculate($order);
    $subtotal = uc_line_item_tax_subtotal('load', $order);
    if (is_array($subtotal) && !empty($taxes)) {
      $taxes['subtotal'] = array('id' => 'subtotal', 'name' => $subtotal[0]['title'], 'amount' => $subtotal[0]['amount'], 'weight' => -10);
    }
    //drupal_set_message('<pre>'. print_r($taxes, true) .'</pre>');
    if (count($taxes)) {
      print drupal_to_js((array)$taxes);
    }
    else {
      print '{}';
    }
  }
  else {
    print '{}';
  }
  exit();
}
