<?php

/******************************************************************************
 * Drupal Hooks                                                               *
 ******************************************************************************/

function uc_taxes_help($section){
  switch ($section){
    case 'admin/store/taxes':
      return t('Set the default tax rates for various geographic locations. Specify tax rates as a multiplier. Smaller areas override the rates of the larger areas.');
    break;
    case 'admin/store/taxes/products':
      return t('Select a product class to edit it\'s tax rules. These rules are applied only to products of that class.');
    break;
  }
}

function uc_taxes_perm(){
  return array('configure taxes');
}

function uc_taxes_menu($may_cache){
  $items = array();
  
  if ($may_cache){
    $items[] = array('path' => 'admin/store/settings/taxes',
      'title' => t('Tax settings'),
      'access' => user_access('configure taxes'),
      'callback' => 'drupal_get_form',
      'callback arguments' => array('uc_taxes_form'),
      'type' => MENU_NORMAL_ITEM,
    );
  }
  else{
    drupal_add_css(drupal_get_path('module', 'uc_taxes') .'/uc_taxes.css');
    
    $items[] = array('path' => 'taxes',
      'access' => true,
      'callback' => 'uc_taxes_javascript',
      'type' => MENU_CALLBACK_ITEM,
    );
  }
  
  return $items;
}

/*******************************************************************************
 * Ãœbercart Hooks
 ******************************************************************************/

/**
 * Implementation of hook_line_item().
 */
function uc_taxes_line_item() {
  $items[] = array(
    'id' => 'tax',
    'title' => t('Tax'),
    'weight' => 9,
    'default' => FALSE,
    'stored' => FALSE,
    'calculated' => FALSE,
    'display_only' => TRUE,
    'callback' => 'uc_line_item_tax',
  );

  return $items;
}

function uc_taxes_order($op, $arg1, $arg2){
  switch($op){
    case 'total':
      $total_tax = 0;
      $taxes = uc_taxes_calculate($arg1);
      foreach ($taxes as $tax){
        $total_tax += $tax['amount'];
      }
      return $total_tax;
  }
}

function uc_taxes_form($form_values = null){
  $form = array('#multistep' => true, '#redirect' => false);
  switch ($form_values['op']){
    case t('Add Tax Rule'):
    case t('Next'):
      $form_values['step']++;
    break;
    case t('Back'):
      $form_values['step']--;
    break;
    default:
      $form_values['step'] = 0;
    break;
  }
  $form['step'] = array('#type' => 'hidden', '#value' => isset($form_values['step']) ? $form_values['step'] : 0);
  
  switch ($form_values['step']){
    case 0: // View tax rules.
      $form['start'] = array('#type' => 'submit', '#value' => t('Add Tax Rule'));
    break;
    case 1: // Name, type select.
      $form['name'] = array('#type' => 'textfield',
        '#title' => t('Name'),
        '#default_value' => isset($form_values['name']) ? $form_values['name'] : '',
        '#required' => true,
      );
      $form['type'] = array('#type' => 'select',
        '#title' => t('Scope'),
        '#options' => array('code' => uc_get_field_name('postal_code'), 'zone' => uc_get_field_name('zone'), 'country' => uc_get_field_name('country')),
        '#default_value' => isset($form_values['type']) ? $form_values['type'] : 'code',
        '#required' => true,
      );
      $form['back'] = array('#type' => 'submit', '#value' => t('Back'));
      $form['next'] = array('#type' => 'submit', '#value' => t('Next'));
    break;
    case 2: // Choose area
      $form['name'] = array('#type' => 'hidden', '#value' => $form_values['name']);
      $form['type'] = array('#type' => 'hidden', '#value' => $form_values['type']);
      switch ($form_values['type']){
        case 'code':
          $form['area'] = array('#type' => 'textfield',
            '#title' => t('Area'),
            '#default_value' => $form_values['area'],
            '#description' => t('Specifiy taxes that are specific to postal code areas.
              A "*" may be used as a wild card to set a rate for multiple areas.
              Example: In the US, 402* represents all areas from 40200 to 40299.'),
            '#size' => 15,
            '#required' => true,
          );
        break;
        case 'zone':
          $result = db_query('SELECT zone_id, zone_name FROM {uc_zones}');
          $zones = array(t('Please Select'));
          while ($zone = db_fetch_array($result)){
            $zones[$zone['zone_id']] = $zone['zone_name'];
          }
          $form['area'] = array('#type' => 'select',
            '#title' => t('Zone/State/Province'),
            '#options' => $zones,
            '#default_value' => isset($form_values['area']) ? $form_values['area'] : 0,
          );
        break;
        case 'country':
          $form['area'] = uc_country_select(t('Country'), isset($form_values['area']) ? $form_values['area'] : null);
        break;
      }
      $form['back'] = array('#type' => 'submit', '#value' => t('Back'));
      $form['next'] = array('#type' => 'submit', '#value' => t('Next'));
    break;
    case 3: // Conditions
      $form['name'] = array('#type' => 'hidden', '#value' => $form_values['name']);
      $form['type'] = array('#type' => 'hidden', '#value' => $form_values['type']);
      $form['area'] = array('#type' => 'hidden', '#value' => $form_values['area']);
    
      $form['back'] = array('#type' => 'submit', '#value' => t('Back'));
      $form['next'] = array('#type' => 'submit', '#value' => t('Next'));
    break;
    case 4: // Amount, etc.?
      $form['name'] = array('#type' => 'hidden', '#value' => $form_values['name']);
      $form['type'] = array('#type' => 'hidden', '#value' => $form_values['type']);
      $form['area'] = array('#type' => 'hidden', '#value' => $form_values['area']);
      $form['rate'] = array('#type' => 'textfield',
        '#title' => t('Rate'),
        '#description' => t('The tax rate as a percent or decimal. Examples: 6%, .06'),
        '#default_value' => isset($form_values['rate']) ? $form_values['rate'] : '',
        '#size' => 15,
        '#required' => true,
      );
      $form['shipping'] = array('#type' => 'checkbox',
        '#title' => t('Tax Shipping Costs'),
        '#default_value' => isset($form_values['shipping']) ? $form_values['shipping'] : 1,
        '#description' => t('Includes any shipping cost in the subtotal for the order.'),
      );
      $form['cumulative'] = array('#type' => 'checkbox',
        '#title' => t('Cumulative'),
        '#default_value' => isset($form_values['cumulative']) ? $form_values['cumulative'] : 0,
        '#description' => t('Applies the tax to the current order total, rather than the subtotal.'),
      );
      $form['weight'] = array('#type' => 'weight',
        '#default_value' => isset($form_values['weight']) ? $form_values['weight'] : 0,
        '#description' => t('Lighter taxes are applied to an order first. This value is unimportant if there are no cumulative taxes.'),
      );
      $form['back'] = array('#type' => 'submit', '#value' => t('Back'));
      $form['finish'] = array('#type' => 'submit', '#value' => t('Submit'));
    break;
  }
  
  /* if ($form_values){
    drupal_set_message('Form elements:<pre>'. print_r($form, true) .'</pre>');
    drupal_set_message('Form values:<pre>'. print_r($form_values, true) .'</pre>');
  } */
  
  return $form;
}

function theme_uc_taxes_form($form){
  if ($form['step']['#value'] == 0){
    $header = array(t('Name'), t('Area'), t('Tax Shipping?'), t('Rate'), t('Cumulative?'), t('Weight'), t('Actions'));
    $rows = array();
    $result = db_query("SELECT * FROM {uc_taxes} ORDER BY weight");
    while ($rule = db_fetch_object($result)){
      switch ($rule->type){
        case 'code':
          $area = $rule->area;
        break;
        case 'zone':
          $area = uc_get_zone_code($rule->area);
        break;
        case 'country':
          $country = uc_get_country_data($rule->area);
          $area = $country->country_iso_code_3;
      }
      $rows[] = array($rule->name, $area, ($rule->shipping ? t('Yes') : t('No')), $rule->rate, ($rule->cumulative ? t('Yes') : t('No')), $rule->weight, t('edit copy delete'));
    }
    $output = theme('table', $header, $rows, array(), t('Tax Rules'));
  }
  if ($form['step']['#value'] == 3){
    $output = t('Need to put in some kind of form for tax conditions.');
  }
  $output .= drupal_render($form);
  
  return $output;
}

function uc_taxes_form_submit($form_id, $form_values){
  //drupal_set_message('Submit:<pre>'. print_r($form_values, true) .'</pre>');
  if ($form_values['op'] ==  t('Submit')){
    if (strpos($form_values['rate'], '%')){
      $rate = floatval($form_values['rate']) / 100;
    }
    else{
      $rate = floatval($form_values['rate']);
    }
    db_query("INSERT INTO {uc_taxes} (id, name, area, type, rate, shipping, cumulative, weight) VALUES (%d, '%s', '%s', '%s', %f, %d, %d, %d)",
      db_next_id('{uc_taxes}_id'), $form_values['name'], $form_values['area'], $form_values['type'], $rate, $form_values['shipping'], $form_values['cumulative'], $form_values['weight']
    );
    
    return 'admin/store/settings/taxes';
  }
}

/**
 * Handle the tax line item.
 */
function uc_line_item_tax($op, $order) {
  switch ($op) {
    case 'cart-preview':
      $items = $order;
      $order = new stdClass();
      $order->products = $items;
      $taxes = uc_taxes_calculate($order);
      $script = '';
      foreach ($taxes as $tax){
        $script .= "set_line_item('tax_". $tax['id'] ."', '". $tax['name'] ."', ". $tax['amount'] .", 9);\n";
      }
      if ($script){
        drupal_add_js("\$(document).ready( function() { ". $script ." } );", 'inline');
      }
      break;
    case 'load':
    case 'display':
      $taxes = uc_taxes_calculate($order);
      foreach ($taxes as $tax){
        $lines[] = array(
          'id' => 'tax_'. $tax['id'],
          'title' => $tax['name'],
          'amount' => $tax['amount'],
        );
      }
      return $lines;
  }
}


/******************************************************************************
 * Module and Helper Functions
 ******************************************************************************/

function uc_taxes_get_rates(){
  static $taxes = array();
  
  if (empty($taxes)){
    $result = db_query("SELECT * FROM {uc_taxes} ORDER BY weight");
    while ($rule = db_fetch_object($result)){
      $taxes[] = $rule;
    }
  }
  
  return $taxes;
}

function uc_taxes_calculate($order){
  if (is_numeric($order)){
    $order = uc_order_load($order);
  }
  if ($order === FALSE) {
    return array();
  }
  $tax_rules = uc_taxes_get_rates();
  $subtotal = 0;
  $taxes = array();
  if (is_array($order->products)) {
    foreach($order->products as $item){
      $subtotal += $item->price * $item->qty;
    }
  }
  $shipping_rate = 0;
  if (is_array($order->line_items)){
    foreach ($order->line_items as $line_item){
      if ($line_item['type'] == 'shipping'){
        $shipping_rate = $line_item['amount'];
        break;
      }
    }
  }
  $new_total = $subtotal + $shipping_rate;
  foreach ($tax_rules as $rule){
    if ($rate = uc_taxes_match_area($rule, $order->delivery_postal_code, $order->delivery_zone, $order->delivery_country)){
      if ($rule->cumulative){
        $amount = $new_total * $rate;
      }
      elseif ($rule->shipping){
        $amount = ($subtotal + $shipping_rate) * $rate;
      }
      else{
        $amount = $subtotal * $rate;
      }
      $new_total += $amount;
      $taxes[] = array('id' => $rule->id, 'name' => $rule->name, 'amount' => $amount);
    }
  }
  return $taxes;
}

function uc_taxes_match_area($tax, $postal_code, $state, $country = '223'){
  $rate = 0;
  switch ($tax->type){
    case 'code':
      $code = rtrim($tax->area, '*');
      if (strpos($postal_code, $code) === 0){
        $rate = $tax->rate;
      }
    break;
    case 'zone':
      if ($tax->area == $state){
        $rate = $tax->rate;
      }
    break;
    case 'country':
      if ($tax->area == $country){
        $rate = $tax->rate;
      }
    break;
  }
  return $rate;
}

function uc_taxes_javascript($order){
  if ($order = unserialize(rawurldecode($order))){
    $taxes = uc_taxes_calculate($order);
    if (count($taxes)){
      print drupal_to_js((array)$taxes);
    }
    else{
      print '';
    }
    //exit();
  }
}
