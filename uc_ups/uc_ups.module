<?php
// $Id$

/**
 * @file
 * Shipping quote module that interfaces with www.ups.com to get rates for small package shipments.
 */

include_once(drupal_get_path('module', 'uc_store') .'/includes/XML2Array.php');

/******************************************************************************
 * Drupal Hooks                                                               *
 ******************************************************************************/

/**
 * Implementation of hook_menu().
 */
function uc_ups_menu($may_cache){
  $items = array();
  
  if ($may_cache){
    $items[] = array('path' => 'admin/store/settings/quotes/methods/ups',
      'access' => user_access('configure quotes'),
      'title' => t('UPS'),
      'callback' => 'drupal_get_form',
      'callback arguments' => 'uc_ups_admin_settings',
      'type' => MENU_LOCAL_TASK,
    );
  }
  else{
    drupal_add_css(drupal_get_path('module', 'uc_ups') .'/uc_ups.css');
  }
  
  return $items;
}

/**
 * Implementation of hook_form_alter().
 *
 * Adds package type and physical dimensions to products.
 */
function uc_ups_form_alter($form_id, &$form){
  $node = $form['#node'];
  $product_types = uc_product_node_info();
  if ($form_id == $node->type .'_node_form' && isset($product_types[$node->type])){
    $enabled = variable_get('uc_quote_enabled', array('ups' => true));
    $ups = array('#type' => 'fieldset',
      '#title' => t('UPS Product Description'),
      '#collapsible' => true,
      '#collapsed' => ($enabled['ups'] == false || uc_product_get_shipping_type($node) != 'small_package'),
      '#weight' => 2,
      '#tree' => true,
    );
    $ups['pkg_type'] = array('#type' => 'select',
      '#title' => t('Package Type'),
      '#options' => _uc_ups_pkg_types(),
      '#default_value' => $node->ups['pkg_type'] ? $node->ups['pkg_type'] : '02',
    );
    $ups['qty'] = array('#type' => 'textfield',
      '#title' => t('Package Quantity'),
      '#default_value' => $node->ups['qty'] ? $node->ups['qty'] : 1,
      '#description' => t('For a package containing only this product, how many are in it?'),
    );
    $ups['dimensions'] = array('#type' => 'fieldset',
      '#title' => t('Dimensions'),
      '#description' => t('Physical dimensions of the packaged product.'),
      '#theme' => 'uc_ups_dimensions',
    );
    $ups['dimensions']['units'] = array('#type' => 'select',
      '#title' => t('Units of measurement'),
      '#options' => array(
        'in' => t('Inches'),
        'cm' => t('Centimeters'),
      ),
      '#default_value' => $node->ups ? $node->ups['units'] : variable_get('uc_store_length_unit', 'in'),
    );
    $ups['dimensions']['length'] = array('#type' => 'textfield',
      '#title' => t('Length'),
      '#default_value' => $node->ups['length'],
    );
    $ups['dimensions']['width'] = array('#type' => 'textfield',
      '#title' => t('Width'),
      '#default_value' => $node->ups['width'],
    );
    $ups['dimensions']['height'] = array('#type' => 'textfield',
      '#title' => t('Height'),
      '#default_value' => $node->ups['height'],
    );
    
    $form['shipping']['ups'] = $ups;
    if ($enabled['ups']){
      $form['#validate']['uc_ups_product_alter_validate'] = array();
    }
  }
}

/**
 * Theme function for uc_ups_form_alter().
 */
function theme_uc_ups_dimensions($form){
  $output = '';
  $row = array();
  foreach (element_children($form) as $dimension){
    $row[] = drupal_render($form[$dimension]);
  }
  $output .= theme('table', array(), array($row));
  return $output;
}

function uc_ups_product_alter_validate($form_id, $form_values){
  $enabled = variable_get('uc_quote_enabled', array('ups' => true));
  if ($form_values['shipping_type'] == 'small_package'){
    $dimensions = $form_values['ups']['dimensions'];
    if ($form_values['ups']['pkg_type'] == '02' && (empty($dimensions['length']) || empty($dimensions['width']) || empty($dimensions['height']))){
      form_set_error('ups][dimensions', t('Dimensions are required for custom packaging.'));
    }
  }
}

/**
 * Implementation of hook_nodeapi().
 */
function uc_ups_nodeapi(&$node, $op){
  switch ($op){
    case 'insert':
    case 'update':
      if (isset($node->ups)){
        $ups_values = $node->ups;
        db_query("DELETE FROM {uc_ups_products} WHERE nid = %d", $node->nid);
        db_query("INSERT INTO {uc_ups_products} (nid, pkg_type, qty, length, width, height, units) VALUES (%d, '%s', %d, %f, %f, %f, '%s')",
          $node->nid, $ups_values['pkg_type'], $ups_values['qty'], $ups_values['dimensions']['length'], $ups_values['dimensions']['width'], $ups_values['dimensions']['height'], $ups_values['dimensions']['units']);
      }
    break;
    case 'load':
      if (uc_product_get_shipping_type($node) == 'small_package'){
        return array('ups' => db_fetch_array(db_query("SELECT * FROM {uc_ups_products} WHERE nid = %d", $node->nid)));
      }
    break;
    case 'delete':
      db_query("DELETE FROM {uc_ups_products} WHERE nid = %d", $node->nid);
    break;
  }
}

/******************************************************************************
 * Übercart Hooks                                                             *
 ******************************************************************************/

/**
 * Implementation of Übercart's hook_shipping_type().
 */
function uc_ups_shipping_type(){
  $weight = variable_get('uc_quote_type_weight', array('small_package' => 0));

  $types = array();
  $types['small_package'] = array(
    'id' => 'small_package',
    'title' => t('Small Packages'),
    'weight' => $weight['small_package'],
  );
  
  return $types;
}

/**
 * Implementation of Übercart's hook_shipping_method().
 */
function uc_ups_shipping_method(){
  $methods = array();
  
  $enabled = variable_get('uc_quote_enabled', array('ups' => true));
  $weight = variable_get('uc_quote_method_weight', array('ups' => 0));
  $methods['ups'] = array(
    'id' => 'ups',
    'module' => 'uc_ups',
    'title' => t('UPS'),
    'enabled' => $enabled['ups'],
    'quote' => array(
      'type' => 'small_package',
      'callback' => 'uc_ups_quote',
      'accessorials' => _uc_ups_service_list(),
    ),
    'weight' => $weight['ups'],
  );
  
  return $methods;
}

/**
 * Implementation of Übercart's hook_store_status().
 *
 * Let's the administrator know that the UPS account information has not been
 * filled out.
 */
function uc_ups_store_status(){
  $messages = array();
  $access = variable_get('uc_ups_access_license', '') != '';
  $account = variable_get('uc_ups_shipper_number', '') != '';
  $user = variable_get('uc_ups_user_id', '') != '';
  $password = variable_get('uc_ups_password', '') != '';
  if ($access && $account && $user && $password){
    $messages[] = array('status' => 'ok', 'title' => t('UPS Online Tools'),
      'desc' => t('Information needed to access UPS Online Tools has been entered.'),
    );
  }
  else{
    $messages[] = array('status' => 'error', 'title' => t('UPS Online Tools'),
      'desc' => t('More information is needed to access UPS Online Tools. Please enter it ') .
        l('here', 'admin/store/settings/quotes/ups') .'.',
    );
  }
  
  return $messages;
}

/******************************************************************************
 * Menu Callbacks                                                             *
 ******************************************************************************/

/**
 * Default UPS Online Tool settings.
 *
 * Records UPS account information neccessary to use service. Allows testing
 * or production mode. Configures which UPS services are quoted to customers.
 */
function uc_ups_admin_settings(){
  $form = array();
  
  $form['uc_ups_access_license'] = array('#type' => 'textfield',
    '#title' => t('UPS Online Tools Access #'),
    '#default_value' => variable_get('uc_ups_access_license', ''),
    '#required' => true,
  );
  $form['uc_ups_shipper_number'] = array('#type' => 'textfield',
    '#title' => t('UPS Shipper #'),
    '#default_value' => variable_get('uc_ups_shipper_number', ''),
    '#required' => true,
  );
  $form['uc_ups_user_id'] = array('#type' => 'textfield',
    '#title' => t('UPS.com User ID'),
    '#default_value' => variable_get('uc_ups_user_id', ''),
    '#required' => true,
  );
  $form['uc_ups_password'] = array('#type' => 'password',
    '#title' => t('Password'),
    '#default_value' => variable_get('uc_ups_password', ''),
    '#required' => true,
  );
  $form['uc_ups_connection_address'] = array('#type' => 'select',
    '#title' => t('Mode'),
    '#description' => t('Quotes and shipments requested in Testing mode will not be picked up or charged to your account.'),
    '#options' => array('https://wwwcie.ups.com/ups.app/xml/' => t('Testing'),
      'https://www.ups.com/ups.app.xml/' => t('Production'),
    ),
    '#default_value' => variable_get('uc_ups_connection_address', 'https://wwwcie.ups.com/ups.app/xml/'),
  );
  $form['uc_ups_services'] = array('#type' => 'checkboxes',
    '#title' => t('UPS Services'),
    '#default_value' => variable_get('uc_ups_services', _uc_ups_service_list()),
    '#options' => _uc_ups_service_list(),
    '#description' => t('Select the UPS services that are available to customers.'),
  );
  $form['uc_ups_pickup_type'] = array('#type' => 'select',
    '#title' => t('Pickup Type'),
    '#options' => array(
      '01' => 'Daily Pickup',
      '03' => 'Customer Counter',
      '06' => 'One Time Pickup',
      '07' => 'On Call Air',
      '11' => 'Suggested Retail Rates',
      '19' => 'Letter Center',
      '20' => 'Air Service Center',
    ),
    '#default_value' => '01',
  );
  $form['uc_ups_negotiated_rates'] = array('#type' => 'radios',
    '#title' => t('Negotiated Rates'),
    '#default_value' => variable_get('uc_ups_negotiated_rates', 0),
    '#options' => array(1 => t('Yes'), 0 => t('No')),
    '#description' => t('Is your UPS account receiving negotiated rates on shipments?'),
  );
  $form['uc_ups_markup'] = array('#type' => 'textfield',
    '#title' => t('Shipping Rate Markup'),
    '#default_value' => variable_get('uc_ups_markup', '0%'),
    '#description' => t('Markup shipping rate quote by dollar amount, percentage, or multiplier.'),
  );
  $form['uc_ups_all_in_one'] = array('#type' => 'radios',
    '#title' => t('Product Packages'),
    '#default_value' => variable_get('uc_ups_all_in_one', 1),
    '#options' => array(
      0 => t('Each in its own package'),
      1 => t('All in one'),
    ),
    '#description' => t('Indicate whether each product is quoted as shipping separately or all in one package.'),
  );
  
  return system_settings_form($form);
}

/******************************************************************************
 * Module Functions                                                           *
 ******************************************************************************/

/**
 * Returns XML access request to be prepended to all requests to the UPS webservice.
 */
function uc_ups_access_request(){
  $access = variable_get('uc_ups_access_license', '');
  $user = variable_get('uc_ups_user_id', '');
  $password = variable_get('uc_ups_password', '');
  return "<?xml version=\"1.0\" encoding=\"UTF-8\"?>
<AccessRequest xml:lang=\"en-US\">
  <AccessLicenseNumber>$access</AccessLicenseNumber>
  <UserId>$user</UserId>
  <Password>$password</Password>
</AccessRequest>
";
}

/**
 * Constructs an XML quote request.
 *
 * @param $packages
 *   Array of packages received from the cart.
 * @param $origin
 *   Delivery origin address information.
 * @param $destination
 *   Delivery destination address information.
 * @param $ups_service
 *   UPS service code (refers to UPS Ground, Next-Day Air, etc.).
 * @return
 *   ShipConfirm XML document to send to UPS
 */
function uc_ups_shipping_quote($packages, $origin, $destination, $ups_service){
  $store['name'] = variable_get('uc_store_name', NULL);
  $store['owner'] = variable_get('uc_store_owner', NULL);
  $store['email'] = variable_get('uc_store_email', NULL);
  $store['email_from'] = variable_get('uc_store_email_from', NULL);
  $store['phone'] = variable_get('uc_store_phone', NULL);
  $store['fax'] = variable_get('uc_store_fax', NULL);
  $store['street1'] = variable_get('uc_store_street1', NULL);
  $store['street2'] = variable_get('uc_store_street2', NULL);
  $store['city'] = variable_get('uc_store_city', NULL);
  $store['zone'] = variable_get('uc_store_zone', NULL);
  $store['postal_code'] = variable_get('uc_store_postal_code', NULL); 
  $store['country'] = variable_get('uc_store_country', 840);
  
  $account = variable_get('uc_ups_shipper_number', '');
  $ua = explode(' ', $_SERVER['HTTP_USER_AGENT']);
  $user_agent = $ua[0];
  
  $services = _uc_ups_service_list();
  $service = array('code' => $ups_service, 'description' => $services[$ups_service]);
  
  $pkg_types = _uc_ups_pkg_types();
  
  // DJS 6/7/2007 rates and service request here instead of shipping confirm request.
  $shipper_country = uc_get_country_data(array('country_id' => $store['country']));
  $shipper_country = $shipper_country[0]['country_iso_code_2'];
  $shipper_zip = $store['postal_code'];
  $shipto_country = uc_get_country_data(array('country_id' => $destination->country));
  $shipto_country = $shipto_country[0]['country_iso_code_2'];
  $shipto_zip = $destination->postal_code;
  $shipfrom_country = uc_get_country_data(array('country_id' => $origin->country));
  $shipfrom_country = $shipfrom_country[0]['country_iso_code_2'];
  $shipfrom_zip = $origin->postal_code;

  $shipment_weight = 0;
  $package_schema = '';
  foreach ($packages as $package){
    $qty = $package->qty;
    for ($i = 0; $i < $qty; $i++){
      $size = $package->length + 2 * ($package->width + $package->height);
      $package_type = array('code' => $package->pkg_type, 'description' => $pkg_types[$package->pkg_type]);
      $package_schema .= "<Package>";
        $package_schema .= "<PackagingType>";
          $package_schema .= "<Code>". $package_type['code'] ."</Code>";
          //$package_schema .= "<Description>". $package_type['description'] ."</Description>";
        $package_schema .= "</PackagingType>";
        if ($package->pkg_type == '02' && $package->length && $package->width && $package->height){
          if ($package->length < $package->width){
            list($package->length, $package->width) = array($package->width, $package->length);
          }
          $package_schema .= "<Dimensions>";
            $package_schema .= "<UnitOfMeasurement>";
            if ($package->units == 'cm'){
              $package_schema .= "<Code>CM</Code>";
              //$package_schema .= "<Description>Centimeters</Description>";
            }
            else{
              $package_schema .= "<Code>IN</Code>";
              //$package_schema .= "<Description>Inches</Description>";
            }
            $package_schema .= "</UnitOfMeasurement>";
            $package_schema .= "<Length>". $package->length ."</Length>";
            $package_schema .= "<Width>". $package->width ."</Width>";
            $package_schema .= "<Height>". $package->height ."</Height>";
          $package_schema .= "</Dimensions>";
        }
        switch ($package->weight_units){
          case 'oz':
            $units = 'LBS';
            $unit_name = 'Pounds';
            $weight = $package->weight / 16;
            $shipment_weight += $weight;
          break;
          case 'lb':
            $units = 'LBS';
            $unit_name = 'Pounds';
            $weight = $package->weight;
            $shipment_weight += $weight;
          break;
          case 'g':
            $units = 'KGS';
            $unit_name = 'Kilograms';
            $weight = $package->weight / 1000;
            $shipment_weight += $weight * 2.2;
          break;
          case 'kg':
            $units = 'KGS';
            $unit_name = 'Kilograms';
            $weight = $package->weight;
            $shipment_weight += $weight * 2.2;
          break;
        }
        $package_schema .= "<PackageWeight>";
          $package_schema .= "<UnitOfMeasurement>";
            $package_schema .= "<Code>$units</Code>";
            $package_schema .= "<Description>$unit_name</Description>";
          $package_schema .= "</UnitOfMeasurement>";
          $package_schema .= "<Weight>". $weight ."</Weight>";
        $package_schema .= "</PackageWeight>";
        if ($size > 130 && $size <= 165){
          $package_schema .= "<LargePackageIndicator/>";
        }
        $package_schema .= "<PackageServiceOptions>";
          $package_schema .= "<InsuredValue>";
            $package_schema .= "<CurrencyCode>". variable_get('uc_currency_code', 'USD') ."</CurrencyCode>";
            $package_schema .= "<MonetaryValue>". $package->price ."</MonetaryValue>";
          $package_schema .= "</InsuredValue>";
        $package_schema .= "</PackageServiceOptions>";
      $package_schema .= "</Package>";
    }
  }

  $schema = uc_ups_access_request() ."
<?xml version=\"1.0\" encoding=\"UTF-8\"?>
<RatingServiceSelectionRequest xml:lang=\"en-US\">
  <Request>
    <TransactionReference>
      <CustomerContext>Complex Rate Request</CustomerContext>
      <XpciVersion>1.0001</XpciVersion>
    </TransactionReference>
    <RequestAction>Rate</RequestAction>
    <RequestOption>rate</RequestOption>
  </Request>
  <PickupType>
    <Code>". variable_get('uc_ups_pickup_type', '01') ."</Code>
  </PickupType>
  <Shipment>
    <Shipper>
      <ShipperNumber>". variable_get('uc_ups_shipper_number', '') ."</ShipperNumber>
      <Address>
        <PostalCode>$shipper_zip</PostalCode>
        <CountryCode>$shipper_country</CountryCode>
      </Address>
    </Shipper>
    <ShipTo>
      <Address>
        <PostalCode>$shipto_zip</PostalCode>
        <CountryCode>$shipto_country</CountryCode>
      ";
      if ($destination->residence){
        $schema .= "<ResidentialAddress/>
      ";
      }
      $schema .= "</Address>
    </ShipTo>
    <ShipFrom>
      <Address>
        <PostalCode>$shipfrom_zip</PostalCode>
        <CountryCode>$shipfrom_country</CountryCode>
      </Address>
    </ShipFrom>
    <ShipmentWeight>
      <UnitOfMeasurement>
        <Code>LBS</Code>
      </UnitOfMeasurement>
      <Weight>$shipment_weight</Weight>
    </ShipmentWeight>
    <Service>
      <Code>{$service[code]}</Code>
      <Description>{$service[description]}</Description>
    </Service>
    ";
    $schema .= $package_schema;
    if (variable_get('uc_ups_negotiated_rates', false)){
      $schema .= "<RateInformation>
          <NegotiatedRatesIndicator/>
        </RateInformation>";
    }
  $schema .= "</Shipment>
</RatingServiceSelectionRequest>";

  return $schema;
}

/**
 * Callback for retrieving a UPS shipping quote.
 *
 * Requests a quote for each enabled UPS Service. Therefore, the quote will 
 * take longer to display to the user for each option the customer has available.
 *
 * @param $products
 *   Array of cart contents.
 * @param $details
 *   Order details other than product information.
 * @return
 *   JSON object containing rate, error, and debugging information.
 */
function uc_ups_quote($products, $details){
  $quotes = array();
  
  $method = uc_ups_shipping_method();
  
  $packages = array();
  if (variable_get('uc_ups_all_in_one', true)){
    $shipment_weight = 0;
    $package = new stdClass();
    foreach ($products as $product){
      $product->weight *= $product->qty;
      switch ($product->units){
        case 'oz':
          $weight = $product->weight / 16;
          $shipment_weight += $weight;
        break;
        case 'lb':
          $weight = $product->weight;
          $shipment_weight += $weight;
        break;
        case 'g':
          $weight = $product->weight / 1000;
          $shipment_weight += $weight * 2.2;
        break;
        case 'kg':
          $weight = $product->weight;
          $shipment_weight += $weight * 2.2;
        break;
      }
      $package->price += $product->price * $product->qty;
    }
    $package->weight_units = 'lb';
    $package->weight = $shipment_weight;
    $package->qty = 1;
    $package->pkg_type = '02';
    $packages[] = $package;
  }
  else{
    foreach ($products as $product){
      if (!$product->ups['qty']){
        $product->ups['qty'] = 1;
      }
      $num_of_pkgs = (int)($product->qty / $product->ups['qty']);
      if ($num_of_pkgs){
        $package = drupal_clone($product);
        $package->weight = $product->weight * $product->ups['qty'];
        $package->weight_units = $product->units;
        $package->length = $product->ups['length'];
        $package->width = $product->ups['width'];
        $package->height = $product->ups['height'];
        $package->units = $product->ups['units'];
        $package->price = $product->price * $product->ups['qty'];
        $package->qty = $num_of_pkgs;
        $package->pkg_type = $product->ups['pkg_type'];
        $packages[] = $package;
      }
      $remaining_qty = $product->qty % $product->ups['qty'];
      if ($remaining_qty){
        $package = drupal_clone($product);
        $package->description = $product->model;
        $package->weight = $product->weight * $remaining_qty;
        $package->weight_units = $product->units;
        $package->length = $product->ups['length'];
        $package->width = $product->ups['width'];
        $package->height = $product->ups['height'];
        $package->units = $product->ups['units'];
        $package->price = $product->price * $remaining_qty;
        $package->qty = 1;
        $package->pkg_type = $product->ups['pkg_type'];
        $packages[] = $package;
      }
    }
  }
  
  $dest = (object)$details;
  
  $orig = variable_get('uc_quote_store_default_address', new stdClass());
  $orig->email = variable_get('uc_store_email', '');
  foreach (array_keys(array_filter(variable_get('uc_ups_services', array()))) as $ups_service){
    $quote = array();
    $dest->residence = false;
    $request = uc_ups_shipping_quote($packages, $orig, $dest, $ups_service);
    $resp = drupal_http_request(variable_get('uc_ups_connection_address', 'https://wwwcie.ups.com/ups.app/xml/') .'Rate', array(), 'POST', $request);
    //if (user_access('configure quotes')){
    //  $quote['debug'] = /* '<pre>'. print_r($packages, true) .'</pre>' . */ htmlentities($request) .' <br /><br /> '. htmlentities($resp->data);
    //}
    $xmlObj = new xml2array();
    $response = $xmlObj->parse($resp->data);
    $error = $response[0]['children'][0]['children'][3]['children'];
    if (isset($error)){
      $quote['error'][] = $error[0]['tagData'] .' '. $error[1]['tagData'] .': '. $error[2]['tagData'] ."\n". $error[3]['tagData'];
      if ($error[0]['tagData'] == 'Hard'){
        $quotes[$ups_service] = $quote;
        break;
      }
    }
    $charges = $response[0]['children'][1]['children'];
    $charge = array();
    // if NegotiatedRates exist, quote based on those, otherwise, use TotalCharges
    if (is_array($charges)){
      foreach ($charges as $charge_type){
        if ($charge_type['name'] == strtoupper('TotalCharges')){
          $charge = $charge_type;
        }
      }
    }
    foreach ($response[0]['children'] as $check_for_rates){
      if ($check_for_rates['name'] == strtoupper('NegotiatedRates')){
        $charge = $check_for_rates['children'][0]['children'][0];
        break;
      }
    }
    $rate = $charge['children'][1]['tagData'];
    if ($rate){
      $rate = uc_ups_markup($rate);
      $quote['rate'] = $rate;
      $quote['format'] = uc_currency_format($rate);
      $quote['option_label'] = '<img class="ups_logo" src="'. base_path() . drupal_get_path('module', 'uc_ups') .'/uc_ups_logo.gif" /> '. $method['ups']['quote']['accessorials'][$ups_service] . t(' Rate');
    }
    $quotes[$ups_service] = $quote;
  }
  
  uasort($quotes, '_uc_ups_sort_quotes');
  
  /**
   * Ugly hack to work around PHP bug, details here:
   *   http://bugs.php.net/bug.php?id=23220
   * We strip out errors that look something like:
   *  warning: fread() [function.fread]: SSL fatal protocol error in...
   * Copied from http://drupal.org/node/70915.
   */
  $messages = drupal_set_message();
  $errors = $messages['error'];
  $count = 0;
  for ($i = 0; $i <= sizeof($errors); $i++) {
    if (strpos($errors[$i], 'SSL: fatal protocol error in')) {
      unset($errors[$i]);
      unset($_SESSION['messages']['error'][$i]);
    }
    else {
      $count++;
    }
  }
  if (!$count) {
    unset($_SESSION['messages']['error']);
  }
  db_query("DELETE FROM {watchdog} WHERE type = 'php' AND message LIKE '%%SSL: fatal protocol error%%'");
  // End of ugly hack.
  
  return drupal_to_js($quotes);
}

/**
 * Modifies the rate received from UPS before displaying to the customer.
 */
function uc_ups_markup($rate){
  $markup = variable_get('uc_ups_markup', '0%');
  if (strpos($markup, '%') !== false){
    return $rate + $rate * floatval(rtrim($markup, '%')) / 100;
  }
  else if (strpos($markup, '$') !== false){
    return $rate + floatval(ltrim($markup, '$'));
  }
  else if (floatval($markup)){
    return $rate + $rate * floatval($markup);
  }
  else{
    return $rate;
  }
}

/**
 * Convenience function to get UPS codes for their services.
 */
function _uc_ups_service_list(){
  return array(
    '03' => t('UPS Ground'),
    '11' => t('UPS Standard'),
    '01' => t('UPS Next Day Air'),
    '13' => t('UPS Next Day Air Saver'),
    '14' => t('UPS Next Day Early A.M.'),
    '02' => t('UPS 2nd Day Air'),
    '59' => t('UPS 2nd Day Air A.M.'),
    '12' => t('UPS 3-Day Select'),
  );
}

/**
 * Convenience function to get UPS codes for their package types.
 */
function _uc_ups_pkg_types(){
  return array(
    '01' => t('UPS Letter'),
    '02' => t('Customer Supplied Package'),
    '03' => t('Tube'),
    '04' => t('PAK'),
    '21' => t('UPS Express Box'),
    '24' => t('UPS 25KG Box'),
    '25' => t('UPS 10KG Box'),
    '30' => t('Pallet'),
  );
}

/**
 * Callback for usort().
 *
 * Sorts service rates by increasing price.
 */
function _uc_ups_sort_quotes($a, $b){
  $ar = $a['rate'];
  $br = $b['rate'];
  if ($ar == $br){
    return 0;
  }
  else{
    return ($ar < $br) ? -1 : 1;
  }
}

/**
 * A simple xml parsing function.
 *
 * @param  $xml        A text string that contains the xml to be parsed.
 * @param  $open_tag   The opening xml tag to search for.
 * @return string      The string between $open_tag and its close tag.
 */
function _parse_xml($xml, $open_tag) {
  $close_tag = '</'. substr($open_tag, 1, strlen($open_tag));
  $pos1 = strpos($xml, $open_tag);
  $pos2 = strpos($xml, $close_tag);
  return substr($xml, $pos1 + strlen($open_tag), $pos2 - ($pos1 + strlen($open_tag)));
}
